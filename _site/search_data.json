{
  

    "2017-testing": {
      "title": "testing",
      "content"	 : "testing",
      "url": " /2017/testing/",
      "author": "",
      "categories": ""
    }
    ,
  

    "2017-linux-clear-iptables": {
      "title": "LINUX - Clear iptables",
      "content"	 : "iptables -Fiptables -Xiptables -t nat -Fiptables -t nat -Xiptables -t mangle -Fiptables -t mangle -Xiptables -P INPUT ACCEPTiptables -P FORWARD ACCEPTiptables -P OUTPUT ACCEPT",
      "url": " /2017/linux-clear-iptables/",
      "author": "",
      "categories": "Linux"
    }
    ,
  

    "2017-linux-transparent-proxy": {
      "title": "Linux - Transparent Proxy",
      "content"	 : "Install Squidyum install squid -y/etc/squid/squid.conf...http_port 3128 intercept...Start Serviceservice squid restartBy now you have a proxy server, however, nothing is being blocked, lets go that now.Routingiptables -t nat -A PREROUTING -i eth1 -p tcp --dport80 -j DNAT --to 192.168.111.1:3128Check accesscat /var/log/squid/access.logThe access log should have entries….",
      "url": " /2017/linux-transparent-proxy/",
      "author": "",
      "categories": "Linux"
    }
    ,
  

    "2017-linux-routing": {
      "title": "CentOS - Router",
      "content"	 : "Nics/etc/sysconfig/network-scripts/ifcfg-eth0...NAME=WANONBOOT=yes.../etc/sysconfig/network-scripts/ifcfg-eth1...IPADDR=192.168.111.1NETMASK=255.255.255.0NAME=LANONBOOT=yes...Routing/etc/sysctl.conf...net.ipv4.ip_forward = 1...Setup Nat (Network Address Translations)iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADEiptables -t filter -D FORWARD -j REJECT --reject-with icmp-host-prohibitedsystemctl disable firewalldyum install iptables-servicessystemctl enable iptablesservice iptables saveDHCPInstallyum install dhcp -y/etc/dhcp/dhcpd.confsubnet 192.168.111.0 netmask 255.255.255.0 {range 192.168.111.166 192.168.111.170;    option domain-name-servers 208.67.220.220;    option domain-name &quot;ODIN&quot;;    option routers 192.168.111.1;    option broadcast-address 192.168.111.255;    default-lease-time 600;    max-lease-time 7200;}Service startchkconfig dhcpd onservice dhcpd restart",
      "url": " /2017/linux-routing/",
      "author": "",
      "categories": "Linux"
    }
    ,
  

    "2017-node-skapa-och-publicera-en-node-js-modul": {
      "title": "Node - Skapa och publicera en node.js modul",
      "content"	 : "  Den här artikeln går igenom hur vi skapar och publiserar node moduler till NPM. Jag utgår ifrån att du har och använder node till vardags.Konfigurera NPMBörja med att ange namn, email, och länk till din webbplats. När vi sedan köra NPM kommandon vet NPM vilka vi är och kommer att automatiskt fylla i den informationen åt oss.npm set init.author.name &#39;Andree &quot;DevelDoe&quot; Ray&#39;npm set init.author.email &#39;me@andreeray.se&#39;npm set init.author.url &quot;http://andreeray.se&quot;Nästa kommando kommer att be dig om e-post och lösenord, skapa/verifiera användaren i NPM registret och spara referenser till den i ~/.npmrc filen.npm adduserDin ModulEn NPM modul är bara vanlig JavaScript som använder sig utav CommonJS syntax.Node modulerna körs i sitt eget uttrymme så att vi underviker konflikter i det globala namnuttrymmet. När vi sedan arbetar med modulerna, använder vi oss utav  require och exports.var other = require(&#39;other_module&#39;);module.exports = function() {    console.log(other.doSomething());}Som exempel, skapar vi ett API mot LocalStorage. NPM-modulen består av två metoder. En set, som tar en array, omvandlar den till en sträng och sedan lagrar strängen i localStorage. En get metod, som JSON parsar strängen tillbaka och returnerar den på anrop.Observera att om du kodar med, och planerar att publicera din modul till NPM, måste du ge din modul ett unikt namn.SetupSkapa/klona ett nytt repo på Github.Skapa sedan en package.json fil genom att köra:npm initpackage.json{  &quot;name&quot;: &quot;devel-localstorage&quot;,  &quot;version&quot;: &quot;0.1.0&quot;,  &quot;description&quot;: &quot;A small library providing an API for localStorage&quot;,  &quot;main&quot;: &quot;index.js&quot;,  &quot;scripts&quot;: {    &quot;test&quot;: &quot;karma start&quot;  },  &quot;repository&quot;: {    &quot;type&quot;: &quot;git&quot;,    &quot;url&quot;: &quot;git+https://github.com/AndreeDeveldoeRay/DevelLocalStorage.git&quot;  },  &quot;keywords&quot;: [    &quot;localstorage&quot;  ],  &quot;author&quot;: &quot;Andree &quot;DevelDoe&quot; Ray &amp;lt;me@andreeray.se&amp;gt; (http://andreeray.se)&quot;,  &quot;license&quot;: &quot;ISC&quot;,  &quot;bugs&quot;: {    &quot;url&quot;: &quot;https://github.com/AndreeDeveldoeRay/DevelLocalStorage/issues&quot;  },  &quot;homepage&quot;: &quot;https://github.com/AndreeDeveldoeRay/DevelLocalStorage#readme&quot;}SkapaVi börjar med vår primära modul.index.js module.exports = {     /**      * Takes an array and transforms it to a string for localStorage       * and stores is as &#39;store&#39;      * @param {Array} array      */     set: function (array) {         if (Array.isArray(array)) {             localStorage.setItem(&#39;store&#39;,JSON.stringify(array))             return array         }     },     /**      * Gets the &#39;store in localStorage and parses it back to array (JSON)      * @return {Array} returns the store as an array if it exist otherwise       * returns an empy array      */     get: function () {         var stringArray = localStorage.getItem(&#39;store&#39;)         var array = []         try { array = JSON.parse(stringArray) } catch (e) {}         return Array.isArray(array) ? array : []     } }README.md&amp;lt;!--@Author: Andreee Ray &amp;lt;develdoe&amp;gt;@Date:   2017-04-10T17:45:02+02:00@Email:  me@andreeray.se@Filename: README.md@Last modified by:   develdoe@Last modified time: 2017-04-11T14:16:50+02:00--&amp;gt;=========    A small library providing an API for localStorage## Installation    npm install devel-localstorage --save## Usagevar localstorage = require(&#39;devel-localstorage&#39;)localstorage.set([&#39;devel&#39;,&#39;doe&#39;])res = localstorage.get()console.log(&#39;res:&#39;, res);## ContributingIn lieu of a formal styleguide, take care to maintain the existing coding style.Add unit tests for any new or changed functionality. Lint and test your code.## Release History* 1.0 Initial releasePublicera och UppdateraDu updaterar ditt bibliotek genom att upprepa stegen nedan.Git commitgit add .git commit -m &#39;initial release&#39;git pushgit tag 0.1.0git push --tagsNPMUppdatera versions nummer:package.json&quot;version&quot;: 0.1.0Publicera:npm publishObservara att du kan installera packet direkt ifrån Githubnpm install git://github.com/brentertz/scapegoat.gitnpm install git://github.com/brentertz/scapegoat.git#0.1.0Installnpm install devel-localstorageSummeringVid det här lager bör du se över hur du ska testa ditt packet. Jag uteslöt det här eftersom packetet använders sig av localStorage, som ju är en del av client-side JS. Test sviten blir såpass omfattande att jag har valt att göra en separat artikel för ändamålet. Länkar här så fort den är klar.",
      "url": " /2017/node-skapa-och-publicera-en-node-js-modul/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2017-javascript-grundhandboken-introduktion": {
      "title": "JavaScript - Grundhandboken Introduktion",
      "content"	 : "  I det här kapitlet av JavaScript diskuterar vi några av dess grundläggande begrepp.Vad du redan bör vetaDenna handbok förutsätter att du har följande grundläggande bakgrund:  En allmän förståelse för Internet och webben (WWW).  Goda kunskaper i Hypertext Markup Language (HTML).  Viss erfarenhet av programmering. Om du är ny på programmering, prova en av de guider länkade på huvudsidan om JavaScript.Vart du hittar information om JavaScriptMDN är en utmärkt platts att hitta information kring JavaScript. Jag hjälper till att översätta på nätverket och denna artikel hittar du även där.JavaScript dokumentation på MDN omfattar följande:  Learning the Web ger information för nybörjare och introducerar grundläggande begrepp inom programmering och Internet.  JavaScript Guide (Den här handboken) ger en översikt om JavaScript och dess objekt.  JavaScript Reference tillhandahåller detaljerad referensmaterial för JavaScript.Om du är ny på JavaScript börja med artiklarna i learning area och JavaScript Guide. När du har ett fast grepp om grunderna, kan du använda JavaScript Reference för att få mer information om enskilda objekt och uttryck.Vad är JavaScript?JavaScript är ett plattformsoberoende, objektorienterat skriptspråk. Det är ett litet lättvikt språk som används i en värdmiljön (till exempel en webbläsare), JavaScript kan förbinda sig till värdens miljöobjekt, för att ge programmatisk kontroll över dem.JavaScript innehåller ett standardbibliotek av objekt, såsom Array, Date, och Math, och en grundläggande uppsättning av språkelement såsom operatörer, styrstrukturer och uttryck. Kärnan i JavaScript kan förlängas för en mängd olika syften genom att komplettera den med ytterligare objekt, till exempel:  JavaScript på klientsidan förlänger kärnspråket genom att tillägga objekt för att styra en webbläsare och dess Document Object Model (DOM). Till exempel, klientsidans förlägning tillåter en applikation placera elementen i ett HTML-formulär och svara på användarhändelser, såsom musklick, formulär input och sid navigering.  Server-side JavaScript förlänger huvudspråket genom att leverera objekt som är relevanta för att köra JavaScript på en server. Till exempel, på serversidan tillåter utökningen en applikation kommunicera med en databas, ge kontinuitet av information från ett anrop till en annan applikation, eller utföra fil manipulationer på en server.JavaScript och JavaJavaScript och Java är liknande på vissa sätt, men fundamentalt annorlunda i vissa andra. JavaScript liknar Java men har inte Java’s statiska typning och starka typkontroll. JavaScript har dock för de mesta samma syntax som Java,  som var anledningen till att man döpte om JavaScript från LiveScript.Till skillnad från Javas kompilering av system klasser byggda av deklarationer, stöder JavaScript ett runtime system, baserat på ett litet antal datatyper som representerar numeriska, Boolean och strängvärden . JavaScript har en prototyp baserad objektmodell istället för den mer vanliga klassbaserade modell. Prototyp bas modellen ger dynamiskt arv; det vill säga vad som ärvs kan variera för enskilda objekt. JavaScript stöder också funktioner utan några speciella deklarativa krav. Funktioner kan vara egenskaper som tillhör objekt och exekveras såsom löst skrivna metoder.JavaScript är ett mycket fritt formspråk jämfört med Java. Du behöver inte deklarera alla variabler, klasser och metoder. Du behöver inte bekymra sig om metoder är offentliga, privata eller skyddade och du behöver inte genomföra gränssnitt. Variabler, parametrar och funktionsreturtyper inte uttryckligen typad.Java är ett programmeringsspråk klassbaserad avsedd för snabb exekvering och typsäkerhet. Typsäkerhet betyder, till exempel, att du inte kan kasta ett Java heltal till en objektreferens eller tillgå privat minne genom att korrumpera Java bytekoder . Javas klassbaseradmodell innebär att program består uteslutande av klasser och deras metoder. Java klass arv och stark typning kräver iallmänhet hårt kopplade objekt hierarkier. Dessa krav gör Java-programmering mer komplex än JavaScript programmering.I kontrast, JavaScript stiger ned i ande från en linje av mindre, dynamiskt typade språk såsom Hypertalk och dBASE. Dessa skriptspråk ger programmeringsverktyg till en mycket bredare publik på grund av deras lättare syntax, specialiserade inbyggd funktionalitet och minimikrav för att skapa objekt.JavaScript jämfört med Java            JavaScript      Java                  Objektorienterad. Ingen åtskillnad mellan olika typer av objekt. Arv är genom prototypen mekanismen, och egenskaper och metoder kan läggas till alla objekt dynamiskt.      Klass-baserade. Objekt är indelade i klasser och instanser med all arv genom klasshierarkin . Klasser och instanser kan inte ha egenskaper eller metoder tillsatta dynamiskt.              Variablers datatyper är inte deklarerade (dynamisk typning).      Variablel datatyper måste deklareras (statisk typning).              Det går inte att automatiskt skriva till hårddisken.      Kan automatiskt skriva till hårddisken.      För mer information om skillnaderna mellan JavaScript och Java, se kapitlet Details of the object model.JavaScript och ECMAScript specifikationenJavaScript är standardiserad vid Ecma International — den europeiska sammanslutningen för standardisering informations- och kommunikationssystem (ECMA var tidigare en akronym för Europeiska Computer Manufacturers Association) för att leverera en standardiserad internationell programmeringsspråk baserad på JavaScript. Denna standardiserade versionen av JavaScript, kallad ECMAScript, beter sig på samma sätt i alla program som stöder standarden. Företag kan använda den öppna standarden av språket för att utveckla en egen implementation av JavaScript. ECMAScript standard dokumenteras i ECMA-262-specifikationen. Se New in JavaScript för att lära dig mer om olika versioner av JavaScript och ECMAScript specifikations upplagorECMA-262 standarden är också godkänd av ISO (International Organization for Standardization) som ISO-16262. Du kan också hitta specifikation på Ecma International’s hemsida. ECMAScript specifikationen beskriver inte Document Object Model (DOM), som standardiserats av Worls Wide Web Consortium (W3C) och/eller WHATWG (Web Hypertext Application Technology Working Group). DOM definierar det sätt på vilket HTML dokument objekt exponeras för ditt skript. För att få en bättre uppfattning om de olika tekniker som används vid programmering med JavaScript, konsultera artikeln JavaScript technologies overview.JavaScript dokumentation kontra ECMAScript specifikationenECMAScript specifikationen är en uppsättning regler för att implementera ECMAScript; vilket är användbart om du vill genomföra standard kompatibla språkfunktioner av ECMAScript implementation eller motor (t.ex. Spidermonkey i Firefox eller v8 i Chrome).ECMAScript specifikationen är inte avsett att hjälpa skript programmerare; använda JavaScript dokumentationen för information om hur du skriver skript.ECMAScript specifikationen använder terminologi och syntax som kan vara främmande för en JavaScript programmerare. Även om beskrivningen av språket kan skilja sig i ECMAScript, förblir själva språket densamma . JavaScript stöder alla funktioner som beskrivs i ECMAScript specifikationen.Däremot så finns det i JavaScript dokumentationen aspekter av språket som är lämpligt för en JavaScript programmerare.Komma igång med JavaScriptKomma igång med JavaScript är enkelt: allt du behöver är en modern webbläsare. Denna guide innehåller några JavaScript funktioner som endast tillgängliga i de senaste versionerna av Firefox, så använder den senaste versionen av Firefox rekommenderas.Det finns två verktyg inbyggda i Firefox som är användbara för att experimentera med JavaScript: Webb Konsol och Kladdblocket.Webb KonsolWebb Konsol visar information om den aktuellat laddade webbsida och innehåller även en kommandorad som du kan använda för att köra JavaScript uttryck i den aktuella sidan.För att öppna webbkonsolen (Ctrl+Shift+K på Windows och Linux, eller Cmd-Option-K på mac), välj “Webb Konsole” från “Webbutvecklare” menyn,som är under menyn “Verktyg” i Firefox. Det visas längst ned i webbläsarfönstret . Längs botten av konsolen är en kommandorad som du kan använda för att komma in JavaScript och utgången visas i rutan ovan:KladdblocketWebb Konsol är bra för att utföra enkla rader JavaScript, men även om du kan utföra flera rader, är den inte bekvämt för det. Du kan heller inte spara dina kodexempel när du använder webbkonsolen. För mer komplexa exempel är  Kladdblocket ett bättre verktyg.För att öppna Kladdblocket (Shift+F4), och välj “Kladdblocket” from the “Webbutvecklare” menyn, som är under menyn i Firefox. Den öppnas i ett separat fönster och är en editor som du kan använda för att skriva och exekvera JavaScript i webbläsaren. Du kan också läsa/spara in dem från disk.Hello worldFör att komma igång med att skriva JavaScript öppnar Kladdblocket och skriv din första “Hello world” JavaScript-kod:function greetMe(yourName) {  alert(&#39;Hello &#39; + yourName);}greetMe(&#39;World&#39;);Välj koden i blocket och tryck ner Ctrl+R för att se det utvecklas i din webbläsare!På följande sidor kommer den här guiden introducera dig till JavaScript syntax och språkfunktioner, så att du kommer att kunna skriva mer komplexa applikationer.",
      "url": " /2017/javascript-grundhandboken-introduktion/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-javascript-callback-pattern-promises": {
      "title": "JavaScript - Callback Pattern &amp; Promises",
      "content"	 : "Classic Callback patternSay we have a async function that takes an location and returns the temp.function getTempCallback (location, callback) {callback(undefined ,78) // success    callback(&#39;City not found&#39;) // error}getTempCallback(&#39;Stockholm&#39;, (err, temp) =&amp;gt; {if(err) {    console.log(&#39;error&#39;, err)    } else {    console.log(&#39;success&#39;, temp)    }})PromisesWith Promises we cant mess up our code and get both success and error to get called, only one of them are going to get fired.function getTempPromise(location) {return new Promise(function (resolve,reject) {    resolve(79)        reject(&#39;City not found&#39;)    })}getTempPromise(&#39;Stockholm&#39;).then(function (temp) {console.log(&#39;promise success&#39;,temp)}, function (err) {console.log(&#39;promise error&#39;,err)})",
      "url": " /2017/javascript-callback-pattern-promises/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-javascript-objects": {
      "title": "JavaScript - Objects",
      "content"	 : "JavaScript is designed on a simple object-based paradigm.An object is a collection of properties, and a property is an association between a name (or key) and a value.A property’s value can be a function, in which case the property is known as a method.In addition to objects that are predefined in the browser, you can define your own objects.Objects and propertiesObject properties are basically the same as ordinary JavaScript variables, except for the attachment to objects.The properties of an object define the characteristics of the object. You access the properties of an object with a simple dot-notation:obj.propertyLike all JavaScript variables, both the object name (which could be a normal variable) and property name are case sensitive. You can define a property by assigning it a value.For example, let’s create an object named myCar and give it properties named make, model, and year as follows:var myCar = new Object()myCar.make = &quot;Ford&quot;myCar.model = &quot;Mustang&quot;myCat.year = 1969Unassigned properties of an object are undefined (and not null), myCar.color; // undefined.Properties of JavaScript objects can also be accessed or set using a bracket notation. Objects are sometimes called associative arrays, since each property is associated with a string value that can be used to access it. So, for example, you could access the properties of the myCar object as follows:myCar[&#39;make&#39;] = &#39;Ford&#39;;myCar[&#39;model&#39;] = &#39;Mustang&#39;;myCar[&#39;year&#39;] = 1969;An object property name can be any valid JavaScript string, or anything that can be converted to a string, including the empty string.However, any property name that is not a valid JavaScript identifier (for example, a property name that has a space or a hyphen, or that starts with a number) can only be accessed using the square bracket notation.This notation is also very useful when property names are to be dynamically determined (when the property name is not determined until runtime). Examples are as follows:var myObj = new Object(),    str = &#39;myString&#39;,    rand = Math.random(),    obj = new Object()myObj.type              = &#39;Dot syntax&#39;myObj[&#39;date created&#39;]   = &#39;String with space&#39;myObj[str]              = &#39;String value&#39;myObj[rand]             = &#39;Random Number&#39;myObj[obj]              = &#39;Object&#39;myObj[&#39;&#39;]               = &#39;Even an empty string&#39;console.log(myObj)Please note that all keys in the square bracket notation are converted to String type, since objects in JavaScript can only have String type as key type.For example, in the above code, when the key obj is added to the myObj, JavaScript will call the obj.toString() method, and use this result string as the new key.You can also access properties by using a string value that is stored in a variable:var propertyName = &#39;make&#39;;myCar[propertyName] = &#39;Ford&#39;;propertyName = &#39;model&#39;;myCar[propertyName] = &#39;Mustang&#39;;You can use the bracket notation with for…in to iterate over all the enumerable properties of an object.To illustrate how this works, the following function displays the properties of the object when you pass the object and the object’s name as arguments to the function:function showProps(obj,objName) {  var result = &#39;&#39;  for (var i in obj) {    // obj.hasOwnProperty() is used to filter out properties from the object&#39;s prototype chain    if (obj.hasOwnProperty(i)) {      result += objName + &#39;.&#39; + i + &#39; = &#39; + obj[i] + &#39;n&#39;    }  }  console.log(result)}showProps(myObj, &quot;myObj&quot;)Enumerate the properties of an objectStarting with ECMAScript 5, there are three native ways to list/traverse object properties:  for…in loops - This method traverses all enumerable properties of an object and its prototype chain  Object.keys(o) - This method returns an array with all the own (not in the prototype chain) enumerable properties’ names (“keys”) of an object o.  Object.getOwnPropertyNames(o) - This method returns an array containing all own properties’ names (enumerable or not) of an object o.Before ECMAScript 5, there was no native way to list all properties of an object. However, this can be achieved with the following function:function listAllProperties(o) {var objectToInspect;     var result = [];for(objectToInspect = o; objectToInspect !== null; objectToInspect = Object.getPrototypeOf(objectToInspect)) {        result = result.concat(Object.getOwnPropertyNames(objectToInspect));  }return result; }This can be useful to reveal “hidden” properties (properties in the prototype chain which are not accessible through the object, because another property has the same name earlier in the prototype chain). Listing accessible properties only can easily be done by removing duplicates in the array.Creating new objectsJavaScript has a number of predefined objects. In addition, you can create your own objects. You can create an object using an object initializer. Alternatively, you can first create a constructor function and then instantiate an object invoking that function in conjunction with the new operator.Using object initializersIn addition to creating objects using a constructor function, you can create objects using an object initializer. Using object initializers is sometimes referred to as creating objects with literal notation. “Object initializer” is consistent with the terminology used by C++.var obj = { property_1:   value_1,   // property_# may be an identifier...            2:            value_2,   // or a number...            // ...,            &#39;property n&#39;: value_n }; // or a stringwhere obj is the name of the new object, each property_i is an identifier (either a name, a number, or a string literal), and each value_i is an expression whose value is assigned to the property_i.The obj and assignment is optional; if you do not need to refer to this object elsewhere, you do not need to assign it to a variable. (Note that you may need to wrap the object literal in parentheses if the object appears where a statement is expected, so as not to have the literal be confused with a block statement.)Object initializers are expressions, and each object initializer results in a new object being created whenever the statement in which it appears is executed.Identical object initializers create distinct objects that will not compare to each other as equal. Objects are created as if a call to new Object() were made; that is, objects made from object literal expressions are instances of Object.The following statement creates an object and assigns it to the variable x if and only if the expression cond is true:if (cond) var x = {greeting: &#39;hi there&#39;};The following example creates myHonda with three properties. Note that the engine property is also an object with its own properties.var myHonda = {color: &#39;red&#39;, wheels: 4, engine: {cylinders: 4, size: 2.2}};You can also use object initializers to create arrays. See array literals.Using a constructor functionAlternatively, you can create an object with these two steps:1 Define the object type by writing a constructor function. There is a strong convention, with good reason, to use a capital initial letter.2 Create an instance of the object wTo define an object type, create a function for the object type that specifies its name, properties, and methods.function Car(make, model, year) {  this.make = make;  this.model = model;  this.year = year;}Notice the use of this to assign values to the object’s properties based on the values passed to the function.Now you can create an object called mycar as follows:var mycar = new Car(&#39;Eagle&#39;, &#39;Talon TSi&#39;, 1993);This statement creates mycar and assigns it the specified values for its properties. Then the value of mycar.make is the string “Eagle”, mycar.year is the integer 1993, and so on.You can create any number of car objects by calls to new. For example,var kenscar = new Car(&#39;Nissan&#39;, &#39;300ZX&#39;, 1992);var vpgscar = new Car(&#39;Mazda&#39;, &#39;Miata&#39;, 1990);An object can have a property that is itself another object. For example, suppose you define an object called person as follows:function Person(name, age, sex) {  this.name = name;  this.age = age;  this.sex = sex;}and then instantiate two new person objects as follows:var rand = new Person(&#39;Rand McKinnon&#39;, 33, &#39;M&#39;);var ken = new Person(&#39;Ken Jones&#39;, 39, &#39;M&#39;);Then, you can rewrite the definition of car to include an owner property that takes a person object, as follows:function Car(make, model, year, owner) {  this.make = make;  this.model = model;  this.year = year;  this.owner = owner;}To instantiate the new objects, you then use the following:var car1 = new Car(&#39;Eagle&#39;, &#39;Talon TSi&#39;, 1993, rand);var car2 = new Car(&#39;Nissan&#39;, &#39;300ZX&#39;, 1992, ken);Notice that instead of passing a literal string or integer value when creating the new objects, the above statements pass the objects rand and ken as the arguments for the owners. Then if you want to find out the name of the owner of car2, you can access the following property:car2.owner.nameNote that you can always add a property to a previously defined object. For example, the statementcar1.color = &#39;black&#39;;adds a property color to car1, and assigns it a value of “black.” However, this does not affect any other objects.To add the new property to all objects of the same type, you have to add the property to the definition of the car object type (or use prototype).Using the Object.create methodObjects can also be created using the Object.create() method.This method can be very useful, because it allows you to choose the prototype object for the object you want to create, without having to define a constructor function.var Animal = {  type: &#39;Invertebrates&#39;,  displayType: function () {    console.log(this.type)  }}var animal1 = Object.create(Animal)animal1.displayType() // Output:Invertebratesvar fish = Object.create(Animal);fish.type = &#39;Fishes&#39;;fish.displayType(); // Output:FishesInheritanceAll objects in JavaScript inherit from at least one other object. The object being inherited from is known as the prototype, and the inherited properties can be found in the prototype object of the constructor.See Inheritance and the prototype chain for more information.Indexing object propertiesYou can refer to a property of an object either by its property name or by its ordinal index.If you initially define a property by its name, you must always refer to it by its name, and if you initially define a property by an index, you must always refer to it by its index.This restriction applies when you create an object and its properties with a constructor function (as we did previously with the Car object type) and when you define individual properties explicitly (for example, myCar.color = “red”).If you initially define an object property with an index, such as myCar[5] = “25 mpg”, you subsequently refer to the property only as myCar[5].The exception to this rule is objects reflected from HTML, such as the forms array.You can always refer to objects in these arrays by either their ordinal number (based on where they appear in the document) or their name (if defined).For example, if the second &amp;lt;FORM&amp;gt; tag in a document has a NAME attribute of “myForm”, you can refer to the form as document.forms[1] or document.forms[“myForm”] or document.forms.myForm.Defining properties for an object type using prototypeYou can add a property to a previously defined object type by using the prototype property.This defines a property that is shared by all objects of the specified type, rather than by just one instance of the object.The following code adds a color property to all objects of type car, and then assigns a value to the color property of the object car1.Car.prototype.color = null;car1.color = &#39;black&#39;;See the prototype articleDefining methodsA method is a function associated with an object, or, simply put, a method is a property of an object that is a function.Methods are defined the way normal functions are defined, except that they have to be assigned as the property of an object.objectName.methodname = function_name;var myObj = {  myMethod: function(params) {    // ...do something  }  // OR THIS WORKS TOO  myOtherMethod(params) {    // ...do something else  }};where objectName is an existing object, methodname is the name you are assigning to the method, and function_name is the name of the function.You can then call the method in the context of the object as follows:object.methodname(params);You can define methods for an object type by including a method definition in the object constructor function.For example, you could define a function that would format and display the properties of the previously-defined car objects;function displayCar() {  var result = &#39;A Beautiful &#39; + this.year + &#39; &#39; + this.make    + &#39; &#39; + this.model;  pretty_print(result);}where pretty_print is a function to display a horizontal rule and a string. Notice the use of this to refer to the object to which the method belongs.You can make this function a method of car by adding the statement:this.displayCar = displayCar;to the object definition. So, the full definition of car would now look like:function Car(make, model, year, owner) {  this.make = make;  this.model = model;  this.year = year;  this.owner = owner;  this.displayCar = displayCar;}Then you can call the displayCar method for each of the objects as follows:car1.displayCar();car2.displayCar();Using this for object referencesJavaScript has a special keyword, this, that you can use within a method to refer to the current object.For example, suppose you have a function called validate that validates an object’s value property, given the object and the high and low values:function validate(obj, lowval, hival) {  if ((obj.value &amp;lt; lowval) || (obj.value &amp;gt; hival)) {    alert(&#39;Invalid Value!&#39;);  }}Then, you could call validate in each form element’s onchange event handler, using this to pass it the element, as in the following example:&amp;lt;input type=&quot;text&quot; name=&quot;age&quot; size=&quot;3&quot; onChange=&quot;validate(this, 18, 99)&quot;&amp;gt;In general, this refers to the calling object in a method, but, when combined with the form property, this can refer to the current object’s parent form.For example, the form myForm contains a Text object and a button. When the user clicks the button, the value of the Text object is set to the form’s name. The button’s onclick event handler uses this.form to refer to the parent form, myForm.&amp;lt;form name=&quot;myForm&quot;&amp;gt;&amp;lt;p&amp;gt;&amp;lt;label&amp;gt;Form name:&amp;lt;input type=&quot;text&quot; name=&quot;text1&quot; value=&quot;Beluga&quot;&amp;gt;&amp;lt;/label&amp;gt;&amp;lt;p&amp;gt;&amp;lt;input name=&quot;button1&quot; type=&quot;button&quot; value=&quot;Show Form Name&quot;     onclick=&quot;this.form.text1.value = this.form.name&quot;&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/form&amp;gt;Defining getters and settersA getter is a method that gets the value of a specific property.A setter is a method that sets the value of a specific property.You can define getters and setters on any predefined core object or user-defined object that supports the addition of new properties. The syntax for defining getters and setters uses the object literal syntax.The following illustrates how getters and setters could work for a user-defined object o.var o = {  a: 7,  get b() {     return this.a + 1;  },  set c(x) {    this.a = x / 2;  }};console.log(o.a); // 7console.log(o.b); // 8o.c = 50;console.log(o.a); // 25The o object’s properties are:  o.a — a number  o.b — a getter that returns o.a plus 1  o.c — a setter that sets the value of o.a to half of the value o.c is being set toPlease note that function names of getters and setters defined in an object literal using “[gs]et property()” (as opposed to define[GS]etter ) are not the names of the getters themselves, even though the [gs]et propertyName(){ } syntax may mislead you to think otherwise.To name a function in a getter or setter using the “[gs]et property()” syntax, define an explicitly named function programmatically using Object.defineProperty (or the Object.prototype.defineGetter legacy fallback).For example, the following code illustrates how getters and setters can extend the Date prototype to add a year property to all instances of the predefined Date class. It uses the Date class’s existing getFullYear and setFullYear methods to support the year property’s getter and setter.var d = Date.prototype;Object.defineProperty(d, &#39;year&#39;, {  get: function() { return this.getFullYear(); },  set: function(y) { this.setFullYear(y); }});These statements use the getter and setter in a Date object:var now = new Date();console.log(now.year); // 2000now.year = 2001; // 987617605170console.log(now);// Wed Apr 18 11:13:25 GMT-0700 (Pacific Daylight Time) 2001In principle, getters and setters can be either  defined using object initializers, or  added later to any object at any time using a getter or setter adding method.When defining getters and setters using object initializers all you need to do is to prefix a getter method with get and a setter method with set. Of course, the getter method must not expect a parameter, while the setter method expects exactly one parameter (the new value to set). For instance:var o = {  a: 7,  get b() { return this.a + 1; },  set c(x) { this.a = x / 2; }};Getters and setters can also be added to an object at any time after creation using the Object.defineProperties method.This method’s first parameter is the object on which you want to define the getter or setter.he second parameter is an object whose property names are the getter or setter names, and whose property values are objects for defining the getter or setter functions.Here’s an example that defines the same getter and setter used in the previous example:var o = { a: 0 };Object.defineProperties(o, {    &#39;b&#39;: { get: function() { return this.a + 1; } },    &#39;c&#39;: { set: function(x) { this.a = x / 2; } }});o.c = 10; // Runs the setter, which assigns 10 / 2 (5) to the &#39;a&#39; propertyconsole.log(o.b); // Runs the getter, which yields a + 1 or 6Which of the two forms to choose depends on your programming style and task at hand. If you already go for the object initializer when defining a prototype you will probably most of the time choose the first form. This form is more compact and natural. However, if you need to add getters and setters later — because you did not write the prototype or particular object — then the second form is the only possible form. The second form probably best represents the dynamic nature of JavaScript — but it can make the code hard to read and understand.Deleting propertiesYou can remove a non-inherited property by using the delete operator. The following code shows how to remove a property.// Creates a new object, myobj, with two properties, a and b.var myobj = new Object;myobj.a = 5;myobj.b = 12;// Removes the a property, leaving myobj with only the b property.delete myobj.a;console.log (&#39;a&#39; in myobj); // yields &quot;false&quot;You can also use delete to delete a global variable if the var keyword was not used to declare the variable:g = 17;delete g;Comparing ObjectsIn JavaScript objects are a reference type.Two distinct objects are never equal, even if they have the same properties. Only comparing the same object reference with itself yields true.// Two variables, two distinct objects with the same propertiesvar fruit = {name: &#39;apple&#39;};var fruitbear = {name: &#39;apple&#39;};fruit == fruitbear; // return falsefruit === fruitbear; // return false// Two variables, a single objectvar fruit = {name: &#39;apple&#39;};var fruitbear = fruit;  // assign fruit object reference to fruitbear// here fruit and fruitbear are pointing to same objectfruit == fruitbear; // return truefruit === fruitbear; // return truefruit.name = &#39;grape&#39;;console.log(fruitbear);    // yields { name: &quot;grape&quot; } instead of { name: &quot;apple&quot; }",
      "url": " /2017/javascript-objects/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-javascript-prototype": {
      "title": "JavaScript - Prototype",
      "content"	 : "Every JavaScript object has a prototype and the prototype is also an object.The Object.prototype property represents the Object prototype object.All JavaScrpit object inherit their properties and methods from their prototype.Nearly all objects in JavaScript are instances of Object.A typical object inherits properties (including methods) from Object.prototype, although these properties may be shadowed (a.k.a. overridden).However, an Object may be deliberately created for which this is not true (e.g. by Object.create(null)), or it may be altered so that this is no longer true (e.g. with Object.setPrototypeOf).Objects created using an object literal, or with new Object(), inherit from a prototype called Object.prototype.Changes to the Object prototype object are seen by all objects through prototype chaining, unless the properties and methods subject to those changes are overridden further along the prototype chain.This provides a very powerful although potentially dangerous mechanism to override or extend object behavior.Creating a PrototypeThe strandard way to create an object protoype is to use an object constructor function:function Person(first,last,age,eyecolor) {  this.firstName = first  this.lastName = last  this.age = age  this.eyeColor = eyecolor}var father = new Person(&#39;Thomas&#39;,&#39;Fors&#39;,66,&#39;blue&#39;)console.log(father)The constructor function is the prototype for Person object. It is considered good practice to name constructor functions with an upper-case first letter.Using the prototype PropertyThe JavaScript prototype property allows you to add new properties to an existing prototype:function Person(first, last, age, eyecolor) {    this.firstName = first;    this.lastName = last;    this.age = age;    this.eyeColor = eyecolor;}Person.prototype.nationality = &quot;English&quot;; The JavaScript prototype property also allows you to add new methods to an existing prototype:function Person(first, last, age, eyecolor) {    this.firstName = first;    this.lastName = last;    this.age = age;    this.eyeColor = eyecolor;}Person.prototype.name = function() {    return this.firstName + &quot; &quot; + this.lastName;}; Only modify your own prototypes. Never modify the prototypes of standard JavaScript objects!Without using the prototype propertyAdding a new property to an existing object is easy:father.nationality = &quot;Swedish&quot;However, this property will be added to father and not to any other person objects.Adding a new method to an existing object is also easy:father.name = function () {  return this.firstName + &#39; &#39; + this.lastName}However, this method will also jsut be added to father and not to any other person objects.You cannot add a new property to a prototype the same way as you add a new property to an existing object, because the prototype is not an existing object.To add a new property to a prototype, you must add it to the constructor function:function Person(first, last, age, eyecolor) {    this.firstName = first;    this.lastName = last;    this.age = age;    this.eyeColor = eyecolor;    this.nationality = &quot;English&quot;; // can have default values} Your constructor function can also define methods:function Person(first, last, age, eyecolor) {    this.firstName = first;    this.lastName = last;    this.age = age;    this.eyeColor = eyecolor;    this.name = function() {return this.firstName + &quot; &quot; + this.lastName;};} MethodsObject.prototype.hasOwnProperty()Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.Syntaxobj.hasOwnProperty(prop)ParameterspropThe String name or symbol of the property to test.Return valueA Boolean indicating whether or not the object has the specified property.DescriptionEvery object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that objecExamplesUsing hasOwnProperty to test for a property’s existenceobj = new Object()obj.prop = &#39;exist&#39;function changeObj () {  obj.newprop = obj.prop  delete obj.prop}console.log(obj.hasOwnProperty(&#39;prop&#39;))changeObj()console.log(obj.hasOwnProperty(&#39;prop&#39;))Object.prototype.isPrototypeOf()The isPrototypeOf() method checks if an object exists in another object’s prototype chain.SyntaxprototypeObj.isPrototypeOf(object)ParametersobjectThe object whose prototype chain will be searched.Return valueA Boolean indicating whether the calling object has the specified object in its prototype chain.Errors thrownTypeErrorA TypeError is thrown if prototypeObj is undefined or null.DescriptionThe isPrototypeOf() method allows you to check whether or not an object exists within another object’s prototype chain.ExamplesThis example demonstrates that Baz.prototype, Bar.prototype, Foo.prototype and Object.prototype exist in the prototype chain for object baz:function Foo() {}function Bar() {}function Baz() {}Bar.prototype = Object.create(Foo.prototype);Baz.prototype = Object.create(Bar.prototype);var baz = new Baz();console.log(Baz.prototype.isPrototypeOf(baz)); // trueconsole.log(Bar.prototype.isPrototypeOf(baz)); // trueconsole.log(Foo.prototype.isPrototypeOf(baz)); // trueconsole.log(Object.prototype.isPrototypeOf(baz)); // trueObject.prototype.propertyIsEnumerable()The propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.Syntaxobj.propertyIsEnumerable(prop)ParameterspropThe name of the property to test.Return valueA Boolean indicating whether the specified property is enumerable.DescriptionEvery object has a propertyIsEnumerable method. This method can determine whether the specified property in an object can be enumerated by a for…in loop, with the exception of properties inherited through the prototype chain. If the object does not have the specified property, this method returns false.ExamplesThe following example shows the use of propertyIsEnumerable on objects and arrays:var o = {};var a = [];o.prop = &#39;is enumerable&#39;;a[0] = &#39;is enumerable&#39;;o.propertyIsEnumerable(&#39;prop&#39;);   // returns truea.propertyIsEnumerable(0);        // returns trueObject.prototype.toLocaleString()The toLocaleString() method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.Syntaxobj.toLocaleString();Return valueA string representing the object.DescriptionObject’s toLocaleString returns the result of calling toString().This function is provided to give objects a generic toLocaleString method, even though not all may use it. See the list below.Objects overriding toLocaleString  Array: Array.prototype.toLocaleString()  Number: Number.prototype.toLocaleString()  Date: Date.prototype.toLocaleString()Object.prototype.toString()The toString() method returns a string representing the object.Syntaxobj.toString()Return valueA string representing the object.DescriptionEvery object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns “[object type]”, where type is the object type. The following code illustrates this:var o = new Object();o.toString(); // returns [object Object]ExamplesOverriding the default toString methodYou can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object.function Dog(name, breed, color, sex) {  this.name = name;  this.breed = breed;  this.color = color;  this.sex = sex;}theDog = new Dog(&#39;Gabby&#39;, &#39;Lab&#39;, &#39;chocolate&#39;, &#39;female&#39;);theDog.toString(); // returns [object Object]The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form “property = value;”.Dog.prototype.toString = function dogToString() {  var ret = &#39;Dog &#39; + this.name + &#39; is a &#39; + this.sex + &#39; &#39; + this.color + &#39; &#39; + this.breed;  return ret;}With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:&quot;Dog Gabby is a female chocolate Lab&quot;Using toString() to detect object classtoString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg.var toString = Object.prototype.toString;toString.call(new Date);    // [object Date]toString.call(new String);  // [object String]toString.call(Math);        // [object Math]toString.call(undefined);   // [object Undefined]toString.call(null);        // [object Null]Object.prototype.valueOf()The valueOf() method returns the primitive value of the specified object.Syntaxobject.valueOf()Return valueThe primitive value of the specified object.DescriptionJavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.By default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself.You can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.prototype.valueOf() to call a custom method instead of the default Object method.Overriding valueOf for custom objectsYou can create a function to be called in place of the default valueOf method. Your function must take no arguments.Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object’s valueOf method:myNumberType.prototype.valueOf = function() { return customPrimitiveValue; };With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code.An object’s valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:myNumber.valueOf()Examplesfunction myNumberType(n) {    this.number = n;}myNumberType.prototype.valueOf = function() {    return this.number;};myObj = new myNumberType(4);myObj + 3; // 7MethodsWhen altering the behavior of existing Object.prototype methods, consider injecting code by wrapping your extension before or after the existing logic.  For example, this (untested) code will pre-conditionally execute custom logic before the built-in logic or someone else’s extension is executed.When a function is called, the arguments to the call are held in the array-like “variable” arguments. For example, in the call “myFn(a, b, c)”, the arguments within myFn’s body will contain 3 array elements corresponding to (a, b, c).  When modifying protoypes with hooks, simply pass this &amp;amp; the arguments (the call state) to the current behavior by calling apply() on the function.  This pattern can be used for any prototype, such as Node.prototype, Function.prototype, etc.var current = Object.prototype.valueOf// Since my property &quot;-prop-value&quot; is cross-cutting and isn&#39;t always// on the same prototype chain, I want to modify Object.prototype: Object.prototype.valueOf = function () {  if (this.hasOwnProperty(&#39;-prop-value&#39;)) {    return this[&#39;-prop-value&#39;]  } else {    // It doesn&#39;t look like one of my objects, so let&#39;s fall back on     // the default behavior by reproducing the current behavior as best we can.    // The apply behaves like &quot;super&quot; in some other languages.    // Even though valueOf() doesn&#39;t take arguments, some other hook may.    return current.apply(this,arguments)  }}Since JavaScript doesn’t exactly have sub-class objects, prototype is a useful workaround to make a “base class” object of certain functions that act as objects. For example:var Person = function() {  this.canTalk = true;};Person.prototype.greet = function() {  if (this.canTalk) {    console.log(&#39;Hi, I am &#39; + this.name);  }};var Employee = function(name, title) {  Person.call(this);  this.name = name;  this.title = title;};Employee.prototype = Object.create(Person.prototype);Employee.prototype.constructor = Employee;Employee.prototype.greet = function() {  if (this.canTalk) {    console.log(&#39;Hi, I am &#39; + this.name + &#39;, the &#39; + this.title);  }};var Customer = function(name) {  Person.call(this);  this.name = name;};Customer.prototype = Object.create(Person.prototype);Customer.prototype.constructor = Customer;var Mime = function(name) {  Person.call(this);  this.name = name;  this.canTalk = false;};Mime.prototype = Object.create(Person.prototype);Mime.prototype.constructor = Mime;var bob = new Employee(&#39;Bob&#39;, &#39;Builder&#39;);var joe = new Customer(&#39;Joe&#39;);var rg = new Employee(&#39;Red Green&#39;, &#39;Handyman&#39;);var mike = new Customer(&#39;Mike&#39;);var mime = new Mime(&#39;Mime&#39;);bob.greet();// Hi, I am Bob, the Builderjoe.greet();// Hi, I am Joerg.greet();// Hi, I am Red Green, the Handymanmike.greet();// Hi, I am Mikemime.greet();",
      "url": " /2017/javascript-prototype/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-javascript-array": {
      "title": "JavaScript - Array",
      "content"	 : "  An array is a systematic arrangement of similar objects, usually in rows and columns.The JavaScript Array object is a global object that is used in the construction of arrays; which are high-level, list-like objects.Create an Arrayvar fruits = [&#39;Apple&#39;, &#39;Banana&#39;]console.log(fruits.length) // 2Access (index into) an Array itemvar first = fruits[0] // Applevar last = fruits[fruits.lenth - 1] // BananaLoop over an Arrayfruits.forEach(function(item,index,array){console.log(item,index)})// Apple 0// Banana 1Add to the end of an Arrayvar newLength = fruits.push(&#39;Orange&#39;)// fruits = [&#39;Apple&#39;,&#39;Banana&#39;,&#39;Orange&#39;]// newLength = 3Remove from the end of an arrayvar last = fruits.pop() // Removes Orange// fruits =  [&#39;Apple&#39;,&#39;Banana&#39;]// last = &#39;Orange&#39;Remove from the front of the Arrayvar first = fruits.shift() // Remove Apple// fruits = [&quot;Banana&quot;]// first = &quot;Apple&quot;Find the index of an item in the Arrayfruits.push(&#39;Mango&#39;)// [&#39;Apple&#39;,&#39;Banana&#39;,&#39;Mango&#39;]var pos = fruits.indexOf(&#39;Banana&#39;) // 1Remove item by indexvar removed = fruits.splice(pos,1) // this is how to remove an item// fruits = [&#39;Apple&#39;,&#39;Mango&#39;]Remove items from indexvar vegetables = [&#39;Cabbage&#39;, &#39;Turnip&#39;, &#39;Radish&#39;, &#39;Carrot&#39;];console.log(vegetables); // [&quot;Cabbage&quot;, &quot;Turnip&quot;, &quot;Radish&quot;, &quot;Carrot&quot;]var pos = 1, n = 2;var removedItems = vegetables.splice(pos, n); // this is how to remove items, n defines the number of items to be removed,// from that position(pos) onward to the end of array.console.log(vegetables); // [&quot;Cabbage&quot;, &quot;Carrot&quot;] (the original array is changed)console.log(removedItems); // [&quot;Turnip&quot;, &quot;Radish&quot;]Copy an Arrayvar shallowCopy = fruits.slice() Syntax[element0, element1, ..., elementN]new Array(element0, element1[, ...[, elementN]])new Array(arrayLength)ParameterselementNA JavaScript array is initialized with the given elements.Except in the case where a single argument is passed to the Array constructor and that argument is a number (see the arrayLength parameter below). Note that this special case only applies to JavaScript arrays created with the Array constructor, not array literals created with the bracket syntax.arrayLengthIf the only argument passed to the Array constructor is an integer between 0 and 232-1 (inclusive), this returns a new JavaScript array with its length property set to that number. Note: this implies an array of arrayLength empty slots, not slots with actual undefined values. If the argument is any other number, a RangeError exception is thrown.DescriptionArrays are list-like objects whose prototype has methods to perform traversal and mutation operations.Neither the length of a JavaScript array nor the types of its elements are fixed.Since an array’s length can change at any time, and data can be stored at non-contiguous locations in the array, JavaScript arrays are not guaranteed to be dense; this depends on how the programmer chooses to use them.In general, these are convenient characteristics; but if these features are not desirable for your particular use, you might consider using typed arrays.Some people think that you shouldn’t use an array as an associative array. In any case, you can use plain objects instead, although doing so comes with its own caveats. See the post Lightweight JavaScript dictionaries with arbitrary keys as an example.Accessing array elementsJavaScript arrays are zero-indexed: the first element of an array is at index 0, and the last element is at the index equal to the value of the array’s length property minus 1.var arr = [&#39;this is the first element&#39;, &#39;this is the second element&#39;];console.log(arr[0]);              // logs &#39;this is the first element&#39;console.log(arr[1]);              // logs &#39;this is the second element&#39;console.log(arr[arr.length - 1]); // logs &#39;this is the second element&#39;Array elements are object properties in the same way that toString is a property, but trying to access an element of an array as follows throws a syntax error, because the property name is not valid:console.log(arr.0); // a syntax errorThere is nothing special about JavaScript arrays and the properties that cause this.JavaScript properties that begin with a digit cannot be referenced with dot notation; and must be accessed using bracket notation. For example, if you had an object with a property named ‘3d’, it can only be referenced using bracket notation. E.g.:var years = [1950, 1960, 1970, 1980, 1990, 2000, 2010];console.log(years.0);   // a syntax errorconsole.log(years[0]);  // works properlyrenderer.3d.setTexture(model, &#39;character.png&#39;);     // a syntax errorrenderer[&#39;3d&#39;].setTexture(model, &#39;character.png&#39;);  // works properlyNote that in the 3d example, ‘3d’ had to be quoted. It’s possible to quote the JavaScript array indexes as well (e.g., years[‘2’] instead of years[2]), although it’s not necessary.The 2 in years[2] is coerced into a string by the JavaScript engine through an implicit toString conversion. It is for this reason that ‘2’ and ‘02’ would refer to two different slots on the years object and the following example could be true:console.log(years[&#39;2&#39;] != years[&#39;02&#39;]);Similarly, object properties which happen to be reserved words(!) can only be accessed as string literals in bracket notation(but it can be accessed by dot notation in firefox 40.0a2 at least):var promise = {  &#39;var&#39;  : &#39;text&#39;,  &#39;array&#39;: [1, 2, 3, 4]};console.log(promise[&#39;var&#39;]);Relationship between length and numerical propertiesA JavaScript array’s length property and numerical properties are connected.Several of the built-in array methods (e.g., join, slice, indexOf, etc.) take into account the value of an array’s length property when they’re called.Other methods (e.g., push, splice, etc.) also result in updates to an array’s length property.var fruits = [];fruits.push(&#39;banana&#39;, &#39;apple&#39;, &#39;peach&#39;);console.log(fruits.length); // 3When setting a property on a JavaScript array when the property is a valid array index and that index is outside the current bounds of the array, the engine will update the array’s length property accordingly:fruits[5] = &#39;mango&#39;;console.log(fruits[5]); // &#39;mango&#39;console.log(Object.keys(fruits));  // [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;5&#39;]console.log(fruits.length); // 6Increasing the length:fruits.length = 10;console.log(Object.keys(fruits)); // [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;5&#39;]console.log(fruits.length); // 10Decreasing the length property does, however, delete elements.fruits.length = 2;console.log(Object.keys(fruits)); // [&#39;0&#39;, &#39;1&#39;]console.log(fruits.length); // 2More on Array.length.Creating an array using the result of a matchThe result of a match between a regular expression and a string can create a JavaScript array.This array has properties and elements which provide information about the match. Such an array is returned by RegExp.exec, String.match, and String.replace.To help explain these properties and elements, look at the following example and then refer to the table below:// Match one d followed by one or more b&#39;s followed by one d// Remember matched b&#39;s and the following d// Ignore casevar myRe = /d(b+)(d)/i;var myArray = myRe.exec(&#39;cdbBdbsbz&#39;);The properties and elements returned from this match are as follows:            Property/Element      Description      Example              input      A read-only property that reflects the original string against which the regular expression was matched.      cdbBdbsbz              index      A read-only property that is the zero-based index of the match in the string.      1              [0]      A read-only element that specifies the last matched characters.      dbBd              [1], …[n]      Read-only elements that specify the parenthesized substring matches, if included in the regular expression. The number of possible parenthesized substrings is unlimited.      [1]: bB[2]: d      PropertiesArray.lengthThe Array constructor’s length property whose value is 1.get Array[@@species]The constructor function that is used to create derived objects.Array.prototypeAllows the addition of properties to all array objects.MethodsArray.from()Creates a new Array instance from an array like or iterable objectArray.isArray()Returns booleanArray.of()Creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.Array InstancesAll Array instances inherits from Array.prototype. The prototype of the Array constructor can be modified to effect all Array instances.PropertiesArray.prototype.constructorSpecifies the function that creates an object’s prototype.Array.prototype.lengthReflects the number of elements in an array.Array.prototype[@@unscopables]A symbol containing property names to exclude from a with binding scope.MethodsMutator methodsThese methods modify the array.Array.prototype.copyWithin()Copies a sequence of a array elements within the array.Syntaxarr.copyWithin(target)arr.copyWithin(target, start)arr.copyWithin(target, start, end)Example[&#39;alpha&#39;, &#39;bravo&#39;, &#39;charlie&#39;, &#39;delta&#39;].copyWithin(2, 0);// results in [&quot;alpha&quot;, &quot;bravo&quot;, &quot;alpha&quot;, &quot;bravo&quot;]Array.prototype.fill()Fills all the elements of an array from a start index to an end index with a static value.Syntaxarr.fill(value)arr.fill(value, start)arr.fill(value, start, end)Examplevar numbers = [1, 2, 3]numbers.fill(1);// results in [1, 1, 1]Array.prototype.pop()Removes the last element from an array and returns that element.Syntaxarr.pop()Examplevar a = [1, 2, 3];a.pop();console.log(a); // [1, 2]Array.prototype.push()Adds one or more elements to the end of an array and returns the new length of the array.Syntaxarr.push([element1[, ...[, elementN]]])Examplevar sports = [&#39;soccer&#39;, &#39;baseball&#39;];var total = sports.push(&#39;football&#39;, &#39;swimming&#39;);console.log(sports); // [&#39;soccer&#39;, &#39;baseball&#39;, &#39;football&#39;, &#39;swimming&#39;]console.log(total);  // 4Array.prototype.reverse()Reverses the order of the elements of an array in place — the first becomes the last, and the last becomes the first..Syntaxa.reverse()Examplevar a = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];a.reverse(); console.log(a); // [&#39;three&#39;, &#39;two&#39;, &#39;one&#39;]Array.prototype.shift()Removes the first element from an array and returns that element.Syntaxarr.shift()Examplevar a = [1, 2, 3];var b = a.shift();console.log(a); // [2, 3]console.log(b); // 1Array.prototype.sort()Sorts the elements of an array in place and returns the array.Syntaxarr.sort()arr.sort(compareFunction)Examplevar fruit = [&#39;cherries&#39;, &#39;apples&#39;, &#39;bananas&#39;];fruit.sort(); // [&#39;apples&#39;, &#39;bananas&#39;, &#39;cherries&#39;]var scores = [1, 10, 21, 2]; scores.sort(); // [1, 10, 2, 21]// Note that 10 comes before 2,// because &#39;10&#39; comes before &#39;2&#39; in Unicode code point order.var things = [&#39;word&#39;, &#39;Word&#39;, &#39;1 Word&#39;, &#39;2 Words&#39;];things.sort(); // [&#39;1 Word&#39;, &#39;2 Words&#39;, &#39;Word&#39;, &#39;word&#39;]// In Unicode, numbers come before upper case letters,// which come before lower case letters.Array.prototype.splice()Adds and/or removes elements from an array.Syntaxarray.splice(start)array.splice(start, deleteCount)array.splice(start, deleteCount, item1, item2, ...)Examplevar myFish = [&#39;angel&#39;, &#39;clown&#39;, &#39;mandarin&#39;, &#39;sturgeon&#39;];myFish.splice(2, 0, &#39;drum&#39;); // myFish is [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]myFish.splice(2, 1); // myFish is [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]Array.prototype.unshift()Adds one or more elements to the front of an array and returns the new length of the array.Syntaxarr.unshift([element1[, ...[, elementN]]])Examplevar a = [1, 2, 3];a.unshift(4, 5);console.log(a); // [4, 5, 1, 2, 3]Accessor methodsThese methods do not modify the array and return some representation of the arrayArray.prototype.concat()Returns a new array comprised of this array joined with other array(s) and/or value(s).Syntaxvar new_array = old_array.concat(value1[, value2[, ...[, valueN]]])Examplevar arr1 = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];var arr2 = [&#39;d&#39;, &#39;e&#39;, &#39;f&#39;];var arr3 = arr1.concat(arr2);// results in a new array [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot; ]Array.prototype.includes()Determines whether an array contains a certain element, returning true or false as appropriate.Syntaxarr.includes(searchElement)arr.includes(searchElement, fromIndex)Examplevar a = [1, 2, 3];a.includes(2); // true a.includes(4); // falseArray.prototype.indexOf()Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.Syntaxarr.indexOf(searchElement)arr.indexOf(searchElement, fromIndex)Examplevar array = [2, 9, 9];array.indexOf(2);     // 0array.indexOf(7);     // -1array.indexOf(9, 2);  // 2array.indexOf(2, -1); // -1array.indexOf(2, -3); // 0Array.prototype.join()Joins all elements of an array into a string.Syntaxarr.join()arr.join(separator)Examplevar a = [&#39;Wind&#39;, &#39;Rain&#39;, &#39;Fire&#39;];a.join();    // &#39;Wind,Rain,Fire&#39;a.join(&#39;-&#39;); // &#39;Wind-Rain-Fire&#39;Array.prototype.lastIndexOf()Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.Syntaxarr.lastIndexOf(searchElement)arr.lastIndexOf(searchElement, fromIndex)Examplevar numbers = [2, 5, 9, 2];numbers.lastIndexOf(2); // 3numbers.lastIndexOf(7); // -1Array.prototype.slice()Extracts a section of an array and returns a new array.Syntaxarr.slice()arr.slice(begin)arr.slice(begin, end)Examplevar fruits = [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;];var citrus = fruits.slice(1, 3);// fruits contains [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;]// citrus contains [&#39;Orange&#39;,&#39;Lemon&#39;]Array.prototype.toString()Returns a string representing the array and its elements. Overrides the Object.prototype.toString() method.Syntaxarr.toString()Examplevar months = [&#39;Jan&#39;, &#39;Feb&#39;, &#39;Mar&#39;, &#39;Apr&#39;];months.toString(); // &quot;Jan,Feb,Mar,Apr&quot;Array.prototype.toLocaleString()Returns a localized string representing the array and its elements. Overrides the Object.prototype.toLocaleString() method.Syntaxarr.toLocaleString();arr.toLocaleString(locales);arr.toLocaleString(locales, options);Examplevar number = 1337;var date = new Date();var myArr = [number, date, &#39;foo&#39;];var str = myArr.toLocaleString(); console.log(str); // logs &#39;1337,6.12.2013 19:37:35,foo&#39;// if run in a German (de-DE) locale with timezone Europe/BerlinIteration methodsSeveral methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.Array.prototype.entries()Returns a new Array Iterator object that contains the key/value pairs for each index in the array.Syntaxa.entries()Examplevar a = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];var iterator = a.entries();console.log(iterator.next().value); // [0, &#39;a&#39;]console.log(iterator.next().value); // [1, &#39;b&#39;]console.log(iterator.next().value); // [2, &#39;c&#39;]Array.prototype.every()Returns true if every element in this array satisfies the provided testing function.Syntaxarr.every(callback[, thisArg])Examplefunction isBigEnough(element, index, array) {   return element &amp;gt;= 10; } [12, 5, 8, 130, 44].every(isBigEnough);   // false [12, 54, 18, 130, 44].every(isBigEnough); // trueArray.prototype.filter()Creates a new array with all of the elements of this array for which the provided filtering function returns true.Syntaxvar newArray = arr.filter(callback[, thisArg])Examplefunction isBigEnough(value) {  return value &amp;gt;= 10;}var filtered = [12, 5, 8, 130, 44].filter(isBigEnough);// filtered is [12, 130, 44]Array.prototype.find()Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.Syntaxarr.find(callback[, thisArg])Examplefunction isBigEnough(element) {  return element &amp;gt;= 15;}[12, 5, 8, 130, 44].find(isBigEnough); // 130Array.prototype.findIndex()Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.Syntaxarr.findIndex(callback[, thisArg])Examplefunction isBigEnough(element) {  return element &amp;gt;= 15;}[12, 5, 8, 130, 44].findIndex(isBigEnough); // index of 3rd element in the Array is returned, it will result in &#39;3&#39;Array.prototype.forEach()Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.Syntaxarr.forEach(function callback(currentValue, index, array) {    //your iterator}[, thisArg]);Examplefunction logArrayElements(element, index, array) {  console.log(&#39;a[&#39; + index + &#39;] = &#39; + element);}// Notice that index 2 is skipped since there is no item at// that position in the array.[2, 5, , 9].forEach(logArrayElements);// logs:// a[0] = 2// a[1] = 5// a[3] = 9Array.prototype.map()Creates a new array with the results of calling a provided function on every element in this array.Syntaxvar new_array = arr.map(callback[, thisArg])Examplevar numbers = [1, 4, 9];var roots = numbers.map(Math.sqrt);// roots is now [1, 2, 3]// numbers is still [1, 4, 9]var kvArray = [{key: 1, value: 10},                {key: 2, value: 20},                {key: 3, value: 30}];var reformattedArray = kvArray.map(function(obj) {    var rObj = {};   rObj[obj.key] = obj.value;   return rObj;});// reformattedArray is now [{1: 10}, {2: 20}, {3: 30}], // kvArray is still: // [{key: 1, value: 10}, //  {key: 2, value: 20}, //  {key: 3, value: 30}]Array.prototype.reduce()Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.Syntaxarr.reduce(callback, [initialValue])Examplevar sum = [0, 1, 2, 3].reduce(function(acc, val) {  return acc + val;}, 0);// sum is 6var list1 = [[0, 1], [2, 3], [4, 5]];var list2 = [0, [1, [2, [3, [4, [5]]]]]];const flatten = arr =&amp;gt; arr.reduce(  (acc, val) =&amp;gt; acc.concat(    Array.isArray(val) ? flatten(val) : val  ),  []);flatten(list1); // returns [0, 1, 2, 3, 4, 5]flatten(list2); // returns [0, 1, 2, 3, 4, 5]Array.prototype.reduceRight()Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.Syntaxarr.reduceRight(callback[, initialValue])Examplevar flattened = [[0, 1], [2, 3], [4, 5]].reduceRight(function(a, b) {    return a.concat(b);}, []);// flattened is [4, 5, 2, 3, 0, 1]Array.prototype.some()Returns true if at least one element in this array satisfies the provided testing function.Syntaxarr.some(callback[, thisArg])Examplefunction isBiggerThan10(element, index, array) {  return element &amp;gt; 10;}[2, 5, 8, 1, 4].some(isBiggerThan10);  // false[12, 5, 8, 1, 4].some(isBiggerThan10); // trueArray.prototype.some()Returns true if at least one element in this array satisfies the provided testing function.Syntaxarr.some(callback[, thisArg])Examplefunction isBiggerThan10(element, index, array) {  return element &amp;gt; 10;}[2, 5, 8, 1, 4].some(isBiggerThan10);  // false[12, 5, 8, 1, 4].some(isBiggerThan10); // trueArray.prototype.values()Returns a new Array Iterator object that contains the values for each index in the array.Syntaxarr.values()Examplevar a = [&#39;w&#39;, &#39;y&#39;, &#39;k&#39;, &#39;o&#39;, &#39;p&#39;]; var iterator = a.values();console.log(iterator.next().value); // w console.log(iterator.next().value); // y console.log(iterator.next().value); // k console.log(iterator.next().value); // o console.log(iterator.next().value); // pvar arr = [&#39;w&#39;, &#39;y&#39;, &#39;k&#39;, &#39;o&#39;, &#39;p&#39;];var iterator = arr.values();for (let letter of iterator) {  console.log(letter);}Array.prototype@@iteratorReturns a new Array Iterator object that contains the values for each index in the array.Syntaxarr[Symbol.iterator]()Examplevar arr = [&#39;w&#39;, &#39;y&#39;, &#39;k&#39;, &#39;o&#39;, &#39;p&#39;];var eArr = arr[Symbol.iterator]();// your browser must support for..of loop// and let-scoped variables in for loopsfor (let letter of eArr) {  console.log(letter);}var arr = [&#39;w&#39;, &#39;y&#39;, &#39;k&#39;, &#39;o&#39;, &#39;p&#39;];var eArr = arr[Symbol.iterator]();console.log(eArr.next().value); // wconsole.log(eArr.next().value); // yconsole.log(eArr.next().value); // kconsole.log(eArr.next().value); // oconsole.log(eArr.next().value); // pExamplesCreating an arrayThe following example creates an array, msgArray, with a length of 0, then assigns values to msgArray[0] and msgArray[99], changing the length of the array to 100.var msgArray = []msgArray[0] = &#39;Hello&#39;msgArray[99] = &#39;world&#39;if(msgArray.length === 100) {console.log(&#39;The length is 100.)}Creating a two-dimensional arrayThe following creates a chess board as a two dimensional array of strings. The first move is made by copying the ‘p’ in (6,4) to (4,4). The old position (6,4) is made blank.var boardp&#39;,&#39;p&#39;,&#39;p&#39;,&#39;p&#39;,&#39;p&#39;,&#39;p&#39;,&#39;p&#39;,&#39;p&#39;],  [&#39;r&#39;,&#39;n&#39;,&#39;b&#39;,&#39;q&#39;,&#39;k&#39;,&#39;b&#39;,&#39;n&#39;,&#39;r&#39;] ];console.log(board.join(&#39;n&#39;));// Move King&#39;s Pawn forward 2board[4][4] = board[6][4];board[6][4] = &#39; &#39;;console.log(board.join(&#39;n&#39;));Using an array to tabulate a set of valuesvalues = [];for (var x = 0; x &amp;lt; 10; x++){ values.push([  2 ** x,  2 * x ** 2 ])};console.table(values)",
      "url": " /2017/javascript-array/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-javascript-regular-expressions": {
      "title": "JavaScript - Regular Expressions",
      "content"	 : "  A regular expression, regex or regexp (sometimes called a rational expression)is, in theoretical computer science and formal language theory, a sequence of characters that define a search pattern. Usually this pattern is then used by string searching algorithms for “find” or “find and replace” operations on strings (2017, wikipedia).Syntax/pattern/modifiers; Working with regular expressionsRegular expressions are used with the RegExp methods test and exec and with the String methods match, replace, search, and split.When you want to know whether a pattern is found in a string, use the test or search method; for more information (but slower execution) use the exec or match methods.Methods            method      desc                  exec      Executes a search for a matching in a string. It returns an array of information or null on a missmatch.              test      Tests for a match in a string and returns a boolean              match      Executes a search for a matching in a string and returns array of information or null.              search      Tests for a mach in a string and returns the index of the match or -1.              repleace      Executes a search for match in a string and replaces the substring with a replacement substring.              split      Uses a regular expression or fixed string to break a string into an array of substrings.      If you use exec or match and if the match succeeds, these methods return an array and update properties of the associated regular expression object and also of the predefined regular expression object, RegExp.If the match fails, the exec method returns null (which coerces to false).ExamplesFind a matchvar myRe = /d(b+)d/gvar myArray = myRe.exec(&#39; cdbbdb sbz&#39;)console.log(myArray) // =&amp;gt; [&quot;dbbd&quot;, &quot;bb&quot;]If you do not need to access the properties of the regular expression  If you need to use a method like indexOf on the regular expression at a later state, you cannot use this syntax*var myArray = /d(b+)d/g.exec(&#39;cdbbdbsbz&#39;)Equivalentvar myArray = &quot;cdbbdbsbz&quot;.match(/d(b+)d/g)construct the regular expression from a stringvar myRe = new RegExp(&#39;d(b+)d&#39;, &#39;g&#39;)var myArray = myRe.exec(&#39;cdbbdbsbz&#39;)Using parenthesized substring matchesIncluding parentheses in a regular expression pattern causes the corresponding submatch to be remembered. For example, /a(b)c/ matches the characters ‘abc’ and remembers ‘b’. To recall these parenthesized substring matches, use the Array elements [1], …, [n].The number of possible parenthesized substrings is unlimited. The returned array holds all that were found. The following examples illustrate how to use parenthesized substring matches.The following script uses the replace() method to switch the words in the string. For the replacement text, the script uses the $1 and $2 in the replacement to denote the first and second parenthesized substring matches.var re = /(w+)s(w+)/;var str = &#39;John Smith&#39;;var newstr = str.replace(re, &#39;$2, $1&#39;);console.log(newstr); // =&amp;gt; &quot;Smith, John&quot;Advanced searching with flagsRegular expressions have five optional flags that allow for global and case insensitive searching. These flags can be used separately or together in any order, and are included as part of the regular expression.            flag      description                  i      Case-insensitive              g      Global match (find all matches rather then stopping after the first)              m      Multiline matching              u      unicode; treat pattern as a sequene of unicode code points              y      Perform a “sticky” search that matches starting at the current position in the target string      var re = /pattern/flags;var re = new RegExp(&#39;pattern&#39;, &#39;flags&#39;);The behavior associated with the ‘g’ flag is different when the .exec() method is used.  (This should not be a surprise; a given regular expression is expected to have different behavior when used with .match() versus .exec().  The roles of “class” and “argument” get reversed: In the case of .match(), the string class (or data type) owns the method and the regular expression is just an argument, while in the case of .exec(), it is the regular expression that owns the method, with the string being the argument.  Contrast str.match(re) versus re.exec(str).)  The ‘g’ flag is used with the .exec() method to get iterative progression.var xArray; while(xArray = re.exec(str)) console.log(xArray);// produces: // [&quot;fee &quot;, index: 0, input: &quot;fee fi fo fum&quot;]// [&quot;fi &quot;, index: 4, input: &quot;fee fi fo fum&quot;]// [&quot;fo &quot;, index: 7, input: &quot;fee fi fo fum&quot;]BracketsBrackets are used to find a range of characters.            expression      description                         [abc]      Find any character between the brackets                     [^abc]      Find any character NOT between the brackets                     [0-9]      Find any character between the brackets (digits)                     [x      y]      Find any of the alternatives specified      MetacharactersMetacharacters are characters with spacial meaning.            metacharacter      description                         .      find a single character, except newline or line terminator                     w      find a word character                     W      find a non-word character                     d      find a digt                     D      find a non-digit character                     s      Matches a single white space character, space, tab,form feed, line      feed              S      Matches a single character other than white space                     b      find a match at the beginning/end of a word                     B      find a match not at the beginning/end of a word                     O      find a NUL character                     n      find a new line character                     f      find a form feed character                     r      find a carriage return character                     t      find a tab char                     v      find vertical tab char                     xxx      find the char specified by an octal number                     xdd      find the character specified by a hexadecimal nuber dd                     uxxx      Find the Unicode character specified by a hexadecimal number xxxx             Quantifiers            quantifier      description                  n+      Match any string that contains at leas one n              n*      Match any string that contains zero and more n              n?      Match any string that contains zero or one occurences of n              n{X}      Matches any string that contains a sequence of X n’s              n{X,Y}      Matches any string that contains a sequence of X to Y n’s              n{X,}      Matches any string that contains a sequence of at least X n’s              n$      Matches any string with n at the end of it              ^n      Matches any string with n at the beginning of it              ?=n      Matches any string that is followed by a specific string n              ?!n      Matches any string that is not followed by a specific string n      RegExp Object Properties            Property      Description                  constructor      returns the function that created the RegExp objects prototype              global      checks whether the “g” modifier is set              ignoreCase      checks whether the “i” modifier is set              lastIndex      specified the index at which to start the next match              multiline      checks whether the “m” modifier is set              source      return the text of the regEx pattern      ExamplesChanging the order in an input stringThe following example illustrates the formation of regular expressions and the use of string.split() and string.replace().  It cleans a roughly formatted input string containing names (first name first) separated by blanks, tabs and exactly one semicolon.  Finally, it reverses the name order (last name first) and sorts the list.// The name string contains multiple spaces and tabs,// and may have multiple spaces between first and last names.var names = &#39;Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ; Chris Hand &#39;;var output = [&#39;---------- Original Stringn&#39;, names + &#39;n&#39;];// Prepare two regular expression patterns and array storage.// Split the string into array elements.// pattern: possible white space then semicolon then possible white spacevar pattern = /s*;s*/;// Break the string into pieces separated by the pattern above and// store the pieces in an array called nameListvar nameList = names.split(pattern);// new pattern: one or more characters then spaces then characters.// Use parentheses to &quot;memorize&quot; portions of the pattern.// The memorized portions are referred to later.pattern = /(w+)s+(w+)/;// New array for holding names being processed.var bySurnameList = [];// Display the name array and populate the new array// with comma-separated names, last first.//// The replace method removes anything matching the pattern// and replaces it with the memorized string—second memorized portion// followed by comma space followed by first memorized portion.//// The variables $1 and $2 refer to the portions// memorized while matching the pattern.output.push(&#39;---------- After Split by Regular Expression&#39;);var i, len;for (i = 0, len = nameList.length; i &amp;lt; len; i++) {  output.push(nameList[i]);  bySurnameList[i] = nameList[i].replace(pattern, &#39;$2, $1&#39;);}// Display the new array.output.push(&#39;---------- Names Reversed&#39;);for (i = 0, len = bySurnameList.length; i &amp;lt; len; i++) {  output.push(bySurnameList[i]);}// Sort by last name, then display the sorted array.bySurnameList.sort();output.push(&#39;---------- Sorted&#39;);for (i = 0, len = bySurnameList.length; i &amp;lt; len; i++) {  output.push(bySurnameList[i]);}output.push(&#39;---------- End&#39;);console.log(output.join(&#39;n&#39;));Using special characters to verify inputIn the following example, the user is expected to enter a phone number. When the user presses the “Check” button, the script checks the validity of the number. If the number is valid (matches the character sequence specified by the regular expression), the script shows a message thanking the user and confirming the number. If the number is invalid, the script informs the user that the phone number is not valid.&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;    &amp;lt;head&amp;gt;      &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=ISO-8859-1&quot;&amp;gt;      &amp;lt;meta http-equiv=&quot;Content-Script-Type&quot; content=&quot;text/javascript&quot;&amp;gt;      &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;        var re = /(?:d{3}|(d{3}))([-/.])d{3}1d{4}/;        function testInfo(phoneInput) {          var OK = re.exec(phoneInput.value);          if (!OK)            window.alert(phoneInput.value + &#39; isn&#39;t a phone number with area code!&#39;);          else          window.alert(&#39;Thanks, your phone number is &#39; + OK[0]);        }      &amp;lt;/script&amp;gt;    &amp;lt;/head&amp;gt;    &amp;lt;body&amp;gt;      &amp;lt;p&amp;gt;Enter your phone number (with area code) and then click &quot;Check&quot;.        &amp;lt;br&amp;gt;The expected format is like ###-###-####.&amp;lt;/p&amp;gt;    &amp;lt;form action=&quot;#&quot;&amp;gt;        &amp;lt;input id=&quot;phone&quot;&amp;gt;&amp;lt;button onclick=&quot;testInfo(document.getElementById(&#39;phone&#39;));&quot;&amp;gt;Check&amp;lt;/button&amp;gt;    &amp;lt;/form&amp;gt;    &amp;lt;/body&amp;gt;  &amp;lt;/html&amp;gt;Within non-capturing parentheses (?: , the regular expression looks for three numeric characters d{3} OR | a left parenthesis ( followed by three digits d{3}, followed by a close parenthesis ), (end non-capturing parenthesis )), followed by one dash, forward slash, or decimal point and when found, remember the character ([-/.]), followed by three digits d{3}, followed by the remembered match of a dash, forward slash, or decimal point 1, followed by four digits d{4}.",
      "url": " /2017/javascript-regular-expressions/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-javascript-currying-and-partial-functions": {
      "title": "JavaScript - Currying and Partial functions",
      "content"	 : "In JavaScript we can create a new function dynamically by partially applying a set of arguments to that function.When you find yourself calling the same function and passing mostly the same parameters, then the function is probably a good candidate for this technique.The new function will keep the repeated parameters stored (so you don’t have to pass them every time) and will use them to pre-fill the full list of arguments that the original function expects.// a curried add()// accepts partial list of argumentsfunction add(x, y) {    if (typeof y === &#39;undefined&#39;) {        // partial application        return function (y) {        return x + y        }                // full application        return x + y            }}add(3, 4)               // =&amp;gt; 7var add2000 = add(2000) // =&amp;gt; functionadd2000(10)             // =&amp;gt; 2010The next snippet shows an example of a general-purpose function. Borrowing the slice() method from Array.prototype helps us turn arguments into an array and work more conveniently with it.function schonfinkelize(fn) {     var slice = Array.prototype.slice,        stored_args = slice.call(arguments, 1);     return function () {        var new_args = slice.call(arguments),              args = stored_args.concat(new_args);        return fn.apply(null, args);     };}// a normal functionfunction add(x, y) {     return x + y;}// curry a function to get a new functionvar newadd = schonfinkelize(add, 5);newadd(4); // 9// another option -- call the new function directlyschonfinkelize(add, 6)(7); // 13When schonfinkelize() is called the first time, it stores a private reference to the slice() method (called slice) and also stores the arguments it was called with (into stored_args), only stripping the first, because the first argument is the function being curried.Then schonfinkelize() returns a new function. When the new function is called, it has access (via the closure) to the already privately stored arguments stored_args and the slice reference.The new function has to merge only the old partially applied arguments (stored_args) with the new ones (new_args) and then apply them to the original function fn (also privately available in the closure).The transformation function schonfinkelize() is not limited to single parameters or to single-step currying. Here are some more usage examples:// a normal functionfunction add(a, b, c, d, e) {     return a + b + c + d + e;}// works with any number of argumentsschonfinkelize(add, 1, 2, 3)(5, 5); // 16// two-step curryingvar addOne = schonfinkelize(add, 1);addOne(10, 10, 10, 10); // 41var addSix = schonfinkelize(addOne, 2, 3);addSix(5, 5); // 16",
      "url": " /2017/javascript-currying-and-partial-functions/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-javascript-string-functions": {
      "title": "JavaScript - String functions",
      "content"	 : "  JS treats primitive values as objects.toString()Returns a string representing the specific objectvar x = new String(&#39;Hello world&#39;);console.log(x.toString()); // logs &#39;Hello world&#39;valueOf()Same as toString()var x = new String(&#39;Hello world&#39;);console.log(x.valueOf()); // Displays &#39;Hello world&#39;lengthReturns the length property:var str = &quot;adsf&quot;console.log(str.length) // =&amp;gt; 4trim()Removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.) and returns a new string.var orig = &#39;   foo  &#39;;console.log(orig.trim()); // &#39;foo&#39;// Another example of .trim() removing whitespace from just one side.var orig = &#39;foo    &#39;;console.log(orig.trim()); //polyfillif (!String.prototype.trim) {  String.prototype.trim = function () {    return this.replace(/^[suFEFFxA0]+|[suFEFFxA0]+$/g, &#39;&#39;);  };}Extracing characterscharAt(position)Returns the character at a specified index:var str = &quot;HELLO WORLD&quot;;console.log(str.charAt(0)) // =&amp;gt; H charCodeAt()Returns the unicode of the char at specified index:var str = &quot;HELLO WORLD&quot;;console.log(str.charAt(0)) // =&amp;gt; 72codePointAt(pos) ES2015Returns a non-negative integar that is the Unicode point valueIf there is no element at the specified position, undefined is returned.&#39;ABC&#39;.codePointAt(1);          // =&amp;gt; 66&#39;uD800uDC00&#39;.codePointAt(0); // =&amp;gt; 65536&#39;XYZ&#39;.codePointAt(42); // =&amp;gt; undefinedPolyfill/*! http://mths.be/codepointat v0.1.0 by @mathias */if (!String.prototype.codePointAt) {  (function() {    &#39;use strict&#39;; // needed to support `apply`/`call` with `undefined`/`null`    var codePointAt = function(position) {      if (this == null) {        throw TypeError();      }      var string = String(this);      var size = string.length;      // `ToInteger`      var index = position ? Number(position) : 0;      if (index != index) { // better `isNaN`        index = 0;      }      // Account for out-of-bounds indices:      if (index &amp;lt; 0 || index &amp;gt;= size) {        return undefined;      }      // Get the first code unit      var first = string.charCodeAt(index);      var second;      if ( // check if it’s the start of a surrogate pair        first &amp;gt;= 0xD800 &amp;amp;&amp;amp; first &amp;lt;= 0xDBFF &amp;amp;&amp;amp; // high surrogate        size &amp;gt; index + 1 // there is a next code unit      ) {        second = string.charCodeAt(index + 1);        if (second &amp;gt;= 0xDC00 &amp;amp;&amp;amp; second &amp;lt;= 0xDFFF) { // low surrogate          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae          return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;        }      }      return first;    };    if (Object.defineProperty) {      Object.defineProperty(String.prototype, &#39;codePointAt&#39;, {        &#39;value&#39;: codePointAt,        &#39;configurable&#39;: true,        &#39;writable&#39;: true      });    } else {      String.prototype.codePointAt = codePointAt;    }  }());}Search stringsindexOfReturns the index position of the first occurence of a specific text in a string:var str = &quot;Please locate where &#39;locate&#39; occurs&quot;console.log(str.indexOf(&quot;locate&quot;)) // =&amp;gt; 7lastIndexOfReturns the index position of the last occurence:var str = &quot;Please locate where &#39;locate&#39; occurs&quot;console.log(str.lastIndexOf(&quot;locate&quot;)) // =&amp;gt; 21Note: both indexOf methods return - 1 if the string is not found.  JavaScript counts positions from zero.0 is the first position in a string, 1 is the second, 2 is the third …searchReturns the positionvar str = &quot;Please locate where &#39;locate&#39; occurs&quot;console.log(str.search(&quot;locate&quot;) // =&amp;gt; 7Note: indexOf and search() are equal, but search can take much more powerfull search values (like regular expressions).localCompare(compareString[, locales[, optoions]])Returns a number indicating whether a reference string comes before or after or is the same as the giving string in sort order.The new locales and options arguments let application specify the language whose sort order should be used and customize the behavior of the function.Examples// The letter &quot;a&quot; is before &quot;c&quot; yielding a negative value&#39;a&#39;.localeCompare(&#39;c&#39;); // -2 or -1 (or some other negative value)// Alphabetically the word &quot;check&quot; comes after &quot;against&quot; yielding a positive value&#39;check&#39;.localeCompare(&#39;against&#39;); // 2 or 1 (or some other positive value)// &quot;a&quot; and &quot;a&quot; are equivalent yielding a neutral value of zero&#39;a&#39;.localeCompare(&#39;a&#39;); // 0Check for browser support for extended argumentsThe locales and options arguments are not supported in all browsers yet. To check whether an implementation supports them, use the “i” argument (a requirement that illegal language tags are rejected) and look for a RangeError exception:function localeCompareSupportsLocales() {  try {    &#39;foo&#39;.localeCompare(&#39;bar&#39;, &#39;i&#39;);  } catch (e) {    return e.name === &#39;RangeError&#39;;  }  return false;}Using localesThe results provided by localeCompare() vary between languages. In order to get the sort order of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the locales argument:console.log(&#39;ä&#39;.localeCompare(&#39;z&#39;, &#39;de&#39;)); // a negative value: in German, ä sorts before zconsole.log(&#39;ä&#39;.localeCompare(&#39;z&#39;, &#39;sv&#39;)); // a positive value: in Swedish, ä sorts after zThe results provided by localeCompare() can be customized using the options argument:// in German, ä has a as the base letterconsole.log(&#39;ä&#39;.localeCompare(&#39;a&#39;, &#39;de&#39;, { sensitivity: &#39;base&#39; })); // 0// in Swedish, ä and a are separate base lettersconsole.log(&#39;ä&#39;.localeCompare(&#39;a&#39;, &#39;sv&#39;, { sensitivity: &#39;base&#39; })); // a positive valueincludes(searchString)determines whether one string may be found within another string, returning true or falsevar str = &#39;To be, or not to be, that is the question.&#39;;console.log(str.includes(&#39;To be&#39;));       // trueconsole.log(str.includes(&#39;question&#39;));    // trueconsole.log(str.includes(&#39;nonexistent&#39;)); // falseconsole.log(str.includes(&#39;To be&#39;, 1));    // falseconsole.log(str.includes(&#39;TO BE&#39;));       // falsePolyfillif (!String.prototype.includes) {  String.prototype.includes = function(search, start) {    &#39;use strict&#39;;    if (typeof start !== &#39;number&#39;) {      start = 0;    }        if (start + search.length &amp;gt; this.length) {      return false;    } else {      return this.indexOf(search, start) !== -1;    }  };}endsWith(searchString[, position])Deterines wghether a string ends with the character of another string, returns boolean.var str = &#39;To be, or not to be, that is the question.&#39;;console.log(str.endsWith(&#39;question.&#39;)); // trueconsole.log(str.endsWith(&#39;to be&#39;));     // falseconsole.log(str.endsWith(&#39;to be&#39;, 19)); // truePolyfillif (!String.prototype.endsWith) {  String.prototype.endsWith = function(searchString, position) {      var subjectString = this.toString();      if (typeof position !== &#39;number&#39; || !isFinite(position) || Math.floor(position) !== position || position &amp;gt; subjectString.length) {        position = subjectString.length;      }      position -= searchString.length;      var lastIndex = subjectString.lastIndexOf(searchString, position);      return lastIndex !== -1 &amp;amp;&amp;amp; lastIndex === position;  };}startsWith(searchString[, posotion])Determines whether a string begins with the caracter of another string and returns a boolean.var str = &#39;To be, or not to be, that is the question.&#39;;console.log(str.startsWith(&#39;To be&#39;));         // trueconsole.log(str.startsWith(&#39;not to be&#39;));     // falseconsole.log(str.startsWith(&#39;not to be&#39;, 10)); // truePolyfillif (!String.prototype.startsWith) {    String.prototype.startsWith = function(searchString, position){      position = position || 0;      return this.substr(position, searchString.length) === searchString;  };}match(regex)Retrieves the matching when matching is a string against a regex. Returns an array containting the entire match result and any parentheses-captured matched result, null it no matchIf he regular expression does not include the g flag, str.match() will return the same result as RegExp.exec(). The returned Array has an extra input property, which contains the original string that was parsed. In addition, it has an index property, which represents the zero-based index of the match in the string.If the regular expression includes the g flag, the method returns an Array containing all matched substrings rather than match objects. Captured groups are not returned.Use instead  If you need to know if a string matches a regular expression RegExp, use search().  If you only want the first match found, you might want to use RegExp.exec() instead.  if you want to obtain capture groups and the global flag is set, you need to use RegExp.exec() instead.ExamplesUsing match()var str = &#39;For more information, see Chapter 3.4.5.1&#39;;var re = /see (chapter d+(.d)*)/i;var found = str.match(re);console.log(found);// logs [ &#39;see Chapter 3.4.5.1&#39;,//        &#39;Chapter 3.4.5.1&#39;,//        &#39;.1&#39;,//        index: 22,//        input: &#39;For more information, see Chapter 3.4.5.1&#39; ]// &#39;see Chapter 3.4.5.1&#39; is the whole match.// &#39;Chapter 3.4.5.1&#39; was captured by &#39;(chapter d+(.d)*)&#39;.// &#39;.1&#39; was the last value captured by &#39;(.d)&#39;.// The &#39;index&#39; property (22) is the zero-based index of the whole match.// The &#39;input&#39; property is the original string that was parsed.Using global and ignore case flags with match()var str = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#39;;var regexp = /[A-E]/gi;var matches_array = str.match(regexp);console.log(matches_array);// [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]A non-RegExp object as the parameterWhen the parameter is a string or a number, it is implicitly converted to a RegExp by using new RegExp(obj). If it is a positive number with a positive sign,the RegExp() method will ignore the positive sign.var str1 = &quot;NaN means not a number. Infinity contains -Infinity and +Infinity in JavaScript.&quot;,    str2 = &quot;My grandfather is 65 years old and My grandmother is 63 years old.&quot;,    str3 = &quot;The contract was declared null and void.&quot;;str1.match(&quot;number&quot;);   // &quot;number&quot; is a string. returns [&quot;number&quot;]str1.match(NaN);        // the type of NaN is the number. returns [&quot;NaN&quot;]str1.match(Infinity);   // the type of Infinity is the number. returns [&quot;Infinity&quot;]str1.match(+Infinity);  // returns [&quot;Infinity&quot;]str1.match(-Infinity);  // returns [&quot;-Infinity&quot;]str2.match(65);         // returns [&quot;65&quot;]str2.match(+65);        // A number with a positive sign. returns [&quot;65&quot;]str3.match(null);       // returns [&quot;null&quot;]normalize([form])Returns the Unicode Normalization Form of a given string (if the value isn’t a string, it will be converted to one first).Prameterform: One of “NFC”, “NFD”, “NFKC”, or “NFKD”, specifying the Unicode Normalization Form. If omitted or undefined, “NFC” is used.  NFC — Normalization Form Canonical Composition.  NFD — Normalization Form Canonical Decomposition.  NFKC — Normalization Form Compatibility Composition.  NFKD — Normalization Form Compatibility Decomposition.// Initial string// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE// U+0323: COMBINING DOT BELOWvar str = &#39;u1E9Bu0323&#39;;// Canonically-composed form (NFC)// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE// U+0323: COMBINING DOT BELOWstr.normalize(&#39;NFC&#39;); // &#39;u1E9Bu0323&#39;str.normalize();      // same as above// Canonically-decomposed form (NFD)// U+017F: LATIN SMALL LETTER LONG S// U+0323: COMBINING DOT BELOW// U+0307: COMBINING DOT ABOVEstr.normalize(&#39;NFD&#39;); // &#39;u017Fu0323u0307&#39;// Compatibly-composed (NFKC)// U+1E69: LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVEstr.normalize(&#39;NFKC&#39;); // &#39;u1E69&#39;// Compatibly-decomposed (NFKD)// U+0073: LATIN SMALL LETTER S// U+0323: COMBINING DOT BELOW// U+0307: COMBINING DOT ABOVEstr.normalize(&#39;NFKD&#39;); // &#39;u0073u0323u0307&#39;Extracting  slice(start, end)  substring(start, end)  substr(start, length)slice(start,end)Returns a extracted part in a new string.var str = &quot;apple, banana, kiwi&quot;console.log(str.slice(7,13)) // =&amp;gt; bananaIf you omit the second param, the method will slice out the rest of the string:var str = &quot;apple, banana, kiwi&quot;console.log(str.slice(7)) // =&amp;gt; banana, kiwior the get the last 12 characters:var str = &quot;apple, banana, kiwi&quot;var res = str.slice(-12) // =&amp;gt; banana, kiwisubstring(start, end)The only differens is that substring cannot use negative indexes.var str = &quot;apple, banana, kiwi&quot;console.log(str.slice(7,13)) // =&amp;gt; bananasubstr(start, length)Similar to slice, only last param dictates lenght of the extraction.var str = &quot;apple, banana, kiwi&quot;console.log(str.slice(7,6)) // =&amp;gt; bananaNote: if the first start parameter is negative the position is counted from the end of the strin &amp;amp; if the second param is omited the rest is sliced out.var str = &quot;apple, banana, kiwi&quot;console.log(str.slice(-4)) // =&amp;gt; kiwiReplacing &amp;amp; repeatingrepace()Replaces with parameter value:var str = &quot;apple, banana, kiwi&quot;console.log(str.replace(&quot;banana&quot;,&quot;rasberry&quot;)) // =&amp;gt; apple, rasberry, kiwiCan also take Regular Expressions.var str = &quot;apple, banana, kiwi&quot;console.log(str.replace(/banana/g,&quot;rasberry&quot;)) // =&amp;gt; apple, rasberry, kiwiNote: replace returns a new string with the new value.repeat(count)Constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.&#39;abc&#39;.repeat(-1);   // RangeError&#39;abc&#39;.repeat(0);    // &#39;&#39;&#39;abc&#39;.repeat(1);    // &#39;abc&#39;&#39;abc&#39;.repeat(2);    // &#39;abcabc&#39;&#39;abc&#39;.repeat(3.5);  // &#39;abcabcabc&#39; (count will be converted to integer)&#39;abc&#39;.repeat(1/0);  // RangeError({ toString: () =&amp;gt; &#39;abc&#39;, repeat: String.prototype.repeat }).repeat(2);// &#39;abcabc&#39; (repeat() is a generic method)Polyfillif (!String.prototype.repeat) {  String.prototype.repeat = function(count) {    &#39;use strict&#39;;    if (this == null) {      throw new TypeError(&#39;can&#39;t convert &#39; + this + &#39; to object&#39;);    }    var str = &#39;&#39; + this;    count = +count;    if (count != count) {      count = 0;    }    if (count &amp;lt; 0) {      throw new RangeError(&#39;repeat count must be non-negative&#39;);    }    if (count == Infinity) {      throw new RangeError(&#39;repeat count must be less than infinity&#39;);    }    count = Math.floor(count);    if (str.length == 0 || count == 0) {      return &#39;&#39;;    }    // Ensuring count is a 31-bit integer allows us to heavily optimize the    // main part. But anyway, most current (August 2014) browsers can&#39;t handle    // strings 1 &amp;lt;&amp;lt; 28 chars or longer, so:    if (str.length * count &amp;gt;= 1 &amp;lt;&amp;lt; 28) {      throw new RangeError(&#39;repeat count must not overflow maximum string size&#39;);    }    var rpt = &#39;&#39;;    for (;;) {      if ((count &amp;amp; 1) == 1) {        rpt += str;      }      count &amp;gt;&amp;gt;&amp;gt;= 1;      if (count == 0) {        break;      }      str += str;    }    // Could we try:    // return Array(count + 1).join(this);    return rpt;  }}ConvertingtoUpperCase()Converts to upper case:var str = &quot;case&quot;console.log(str.toUpperCase()) // =&amp;gt; CASEtoLowerCase()Converts to lower case:var str = &quot;CASE&quot;console.log(str.toLowerCase()) // =&amp;gt; casMerge stringsconcat(separator, str,…)Joins two or more strings:var text1 = &quot;Hello&quot;;var text2 = &quot;World&quot;;console.log(text1.concat(&quot; &quot;, text2)) // =&amp;gt; Hello WorldNote: concat returns a new string with the new value.Converting to arraysplit(char)var txt = &quot;a,b,c,d,e&quot;;   // Stringtxt.split(&quot;,&quot;);          // Split on commastxt.split(&quot; &quot;);          // Split on spacestxt.split(&quot;|&quot;);          // Split on pipe var str = &quot;Hello&quot;;       // Stringstr.split(&quot;&quot;);           // Split in characters If separator is omitted, the returned array will contain the whole string at index 0Accessing a string as an array is posible, however,  is unpredictable and you should not do it! Convert the string like above first!",
      "url": " /2017/javascript-string-functions/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-javascript-pure-functions": {
      "title": "JavaScript - Pure functions",
      "content"	 : "A pure functions always give the same output on a specific input, they are not allowed to update object values inside the funciton and no asynchronous calls.Purefunction add(a,b){    return a + b}Not Pure// 1) The same output with the same inputvar a = 3function add(b){    return a + b}// 2) Side effectsvar resultfunction add (a,b){    result = a + b    return result}// 3) Updates the values inside the functionfunction add (a,b){return a + b + new Date().getSeconds()}Real world exampleThis first example changes the value of the original objectfunction changeProp(obj){    obj.name = &#39;Ilona&#39;    return obj}var startingValue = {    name: &#39;andree&#39;,    age: 25}var res = changeProp(startingValue)console.log(res)console.log(startingValue)This second example is pure, it does not update the original objectfunction changeProp(obj){    return {        ...obj,        name: &#39;Ilona&#39;    }}var startingValue = {    name: &#39;andree&#39;,    age: 25}var res = changeProp(startingValue)console.log(res)console.log(startingValue)",
      "url": " /2017/javascript-pure-functions/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-git-update-remotes": {
      "title": "Git - Update remotes",
      "content"	 : "git remote rm {name}git remote add {name} {link}",
      "url": " /2017/git-update-remotes/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2017-node-npm-moment": {
      "title": "Node - NPM moment",
      "content"	 : "momentnpm install moment --save-devvar moment = require(&#39;moment&#39;)console.log(moment().format())var now = moment()console.log(&#39;current timestamp&#39;, now.unix())var timestamp = 1488458642var currentMoment = moment.unix(timestamp)console.log(&#39;currentMoment&#39;,currentMoment.format(&#39;MMM D, Y @ H:mm&#39;))",
      "url": " /2017/node-npm-moment/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2017-node-npm-unique-id": {
      "title": "Node - NPM Unique id",
      "content"	 : "npm install node-uuid --save-dev",
      "url": " /2017/node-npm-unique-id/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2017-javascript-es2015-spread-operator": {
      "title": "JavaScript - ES2015 Spread Operator",
      "content"	 : "old stylefunction add(a,b) {    return a + b}console.log(add(3,1))es2015var toAdd = [9,5]console.log(add(...toAdd))",
      "url": " /2017/javascript-es2015-spread-operator/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-react-installing-test-suit-karma-mocha-and-expect": {
      "title": "React - Test suit Karma, Mocha, and Expect ",
      "content"	 : "npm install karma@0.13.22 karma-chrome-launcher@0.2.2 karma-mocha@0.2.2 karma-mocha-reporter@2.0.0 karma-sourcemap-loader@0.3.7 karma-webpack@1.7.0 mocha@2.4.5 expect@1.14.0 react-addons-test-utils@0.14.6 --save-dev/karma.conf.jsvar webpackConfig = require(&#39;./webpack.config.js&#39;)module.exports = function (config) {    config.set({        browsers: [&#39;Chrome&#39;],        singleRun: true,        frameworks: [&#39;mocha&#39;],        files: [&#39;app/tests/**/*.test.jsx&#39;],        preprocessors: {            &#39;app/tests/**/*.test.jsx&#39;: [&#39;webpack&#39;,&#39;sourcemap&#39;]        },        reporters: [&#39;mocha&#39;],        client: {            mocha: {                timeout: &#39;5000&#39;            }        },        webpack: webpackConfig,        webpackServer: {            noInfo: true        }    })}**/app/tests/app.test.jsvar expect = require(&#39;expect&#39;)describe(&#39;App&#39;, () =&amp;gt; {    it(&#39;should properly run tests...&#39;, () =&amp;gt; {        expect(1).toBe(1)    })})/package.json*...  &quot;scripts&quot;: {    &quot;test&quot;: &quot;karma start&quot;,    &quot;start&quot;: &quot;node server.js&quot;  },...example project",
      "url": " /2017/react-installing-test-suit-karma-mocha-and-expect/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2017-react-main-input-output-conponents": {
      "title": "React - Main, Input, output conponents",
      "content"	 : "Main.jsxvar React = require(&#39;react&#39;),    Input = require(&#39;Input&#39;),    Output = require(&#39;Output&#39;),    api = require(&#39;Api&#39;)var Main  = React.createClass({    getInitialState: function () {        return{            isLoading: false        }    },    handleSearch: function (location) {        var that = this        that.setState({            isLoading: true        })        api.getTemp(location).then(function (temp) {            that.setState({                location: location,                temp: temp,                isLoading: false            })        }, function (errMessage) {            alert(errMessage)            that.setState({                isLoading: false            })        })    },    render: function () {        var {isLoading, temp, location} = this.state        function renderMessage () {            if (isLoading) {                return &amp;lt;h3&amp;gt;Fetching weather...&amp;lt;/h3&amp;gt;            } else if (temp &amp;amp;&amp;amp; location) {                return &amp;lt;Output temp={temp} location={location}/&amp;gt;            }        }        return (            &amp;lt;div className=&quot;component page&quot; id=&quot;index&quot; style=&amp;gt;                &amp;lt;span&amp;gt;Home&amp;lt;/span&amp;gt;                &amp;lt;Input onSearch={this.handleSearch}/&amp;gt;                {renderMessage()}            &amp;lt;/div&amp;gt;        )    }})module.exports = MainInput.jsxvar React = require(&#39;react&#39;)var Input = (props)=&amp;gt;{    onFormSubmit: function (e) {        e.preventDefault()        var location = this.refs.location.value        if (location.length &amp;gt; 0) {            this.refs.location.value = &quot;&quot;            this.props.onSearch(location)        }    },    render: function () {        return(            &amp;lt;div className=&quot;component&quot; id=&quot;home-input&quot;&amp;gt;                &amp;lt;form onSubmit={this.onFormSubmit}&amp;gt;                    &amp;lt;input type=&quot;text&quot; ref=&quot;location&quot;/&amp;gt;                    &amp;lt;button&amp;gt;Get Input&amp;lt;/button&amp;gt;                &amp;lt;/form&amp;gt;            &amp;lt;/div&amp;gt;        )    }}module.exports = InputOutput.jsxvar React = require(&#39;react&#39;)var Output = ({temp, location}) =&amp;gt; {    return (        &amp;lt;div className=&quot;component&quot; id=&quot;home-output&quot; &amp;gt;            &amp;lt;span&amp;gt;It is {temp} in {location}&amp;lt;/span&amp;gt;        &amp;lt;/div&amp;gt;    )}module.exports = Output",
      "url": " /2017/react-main-input-output-conponents/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2017-react-install-scss": {
      "title": "React - Install SCSS",
      "content"	 : "npm install sass-loader@3.1.2 node-sass@3.4.2 --save-dev",
      "url": " /2017/react-install-scss/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2017-foundation-installment": {
      "title": "Foundation - Installment",
      "content"	 : "npm install webpack@1.12.13 css-loader@0.23.1 script-loader@0.6.1 style-loader@0.13.0 jquery@2.2.1 foundation-sites@6.2.0 --save-devwebpack.config.jsvar webpack = require(&#39;webpack&#39;)module.exports = {    entry: [        &#39;script!jquery/dist/jquery.min.js&#39;,        &#39;script!foundation-sites/dist/foundation.min.js&#39;,        &#39;./app/entry.jsx&#39;    ],    externals: {        jquery: &#39;jQuery&#39;    },    plugins: [        new webpack.ProvidePlugin({            &#39;$&#39;: &#39;jquery&#39;,            &#39;jQuery&#39;: &#39;jquery&#39;        })    ],    ...entry.jsx// Load foundationrequire(&#39;style!css!foundation-sites/dist/foundation.min.css&#39;)$(document).foundation()",
      "url": " /2017/foundation-installment/",
      "author": "",
      "categories": "CSS"
    }
    ,
  

    "2017-automatic-deployment-with-git-with-a-vps": {
      "title": "Automatic Deployment with Git to a VPS ",
      "content"	 : "Create a repo on your VPS.Git repositories have a folder called ‘hooks’. This folder contains some sample files for possible actions that you can hook and perform custom actions set by you.Git documentation define three possible server hooks: ‘pre-receive’, ‘post-receive’ and ‘update’.‘Pre-receive’ is executed as soon as the server receives a ‘push’, ‘update’ is similar but it executes once for each branch, and ‘post-receive’ is executed when a ‘push’ is completely finished and it’s the one we are interested in.In your repository: cd hookscreate the file ‘post-receive’:cat &amp;gt; post-receiveWhen you execute this command, you will have a blank line indicating that everything you type will be saved to this file:#!/bin/shGIT_WORK_TREE=/home/path/to/your/wwwexport GIT_WORK_TREEgit checkout -fset the proper permissions using:chmod +x post-receiveIn order for this to work with changes to your server you need to run your server with Node-Supervisor.sudo npm install supervisor -gsupervisor /home/path/to/your/www/server.js",
      "url": " /2017/automatic-deployment-with-git-with-a-vps/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2017-ssh-add-key-to-use-at-specific-server": {
      "title": "SSH - add key to use at specific server",
      "content"	 : "~/.ssh/confighost github.com HostName github.com IdentityFile ~/.ssh/id_rsa_github User git",
      "url": " /2017/ssh-add-key-to-use-at-specific-server/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2017-git-server": {
      "title": "Linux - Setting up a Git Server",
      "content"	 : "First, you create a git user and a .ssh directory for that user:$ sudo adduser git$ su git$ cd$ mkdir .ssh &amp;amp;&amp;amp; chmod 700 .ssh$ touch .ssh/authorized_keys &amp;amp;&amp;amp; chmod 600 .ssh/authorized_keysCopy the ouput of your ssh key:$ cat /etc/key.pubto the git user’s authorized_keys:$ vim ~/.ssh/authorized_keysNow, you can set up an empty repository for them on the server by running git init with the –bare option, which initializes the repository without a working directory:$ cd /srv/git$ mkdir project.git$ cd project.git$ git init --bare --shared(OPTIONAL)Add your key to ssh server conf file.Edit:$ vim ~/.ssh/configand add your server, key and user inputs.host example.com HostName example.com IdentityFile ~/.ssh/key User gitThen, you can push the first version of their project into that repository by adding it as a remote and pushing up a branch.Let’s use gitserver as the hostname of the server on which you’ve set up your git user and repository. If you’re running it internally, and you set up DNS for gitserver to point to that server, then you can use the commands pretty much as is (assuming that myproject is an existing project with files in it):$ cd myproject$ git init$ git add .$ git commit -m &#39;initial commit&#39;$ git remote add origin git@gitserver:/srv/git/project.git$ git push -u origin master",
      "url": " /2017/git-server/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2017-github-add-and-push-a-new-project": {
      "title": "Github - add and push a new project",
      "content"	 : "Go to Github and add a new project.Initgit initAddgit add .commitgit commit -m &#39;init&#39;remotegit remote add github {urltoyourproject}pushgit push -u github masterNow you can push simply by:git push githuband if you dont add new files, you can commit and add in one command.git commit -a -m &#39;comment&#39;You can check remotes:git remote -vand branchgit branch",
      "url": " /2017/github-add-and-push-a-new-project/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2017-linux-redirect": {
      "title": "Linux - Redirect ",
      "content"	 : "Redirect port 80 to port 3000 with this command:sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000You should also edit your /etc/rc.local file and add that line minus the sudo. That will add the redirect when the machine boots up. You don’t need sudo in /etc/rc.local because the commands there are run as root when the system boots.",
      "url": " /2017/linux-redirect/",
      "author": "",
      "categories": "Linux"
    }
    ,
  

    "2017-generating-a-new-ssh-key-pair-for-google-console": {
      "title": "SSH key-pair for Google Console",
      "content"	 : "ssh-keygen -t rsa -f ~/.ssh/my-ssh-key -C [USERNAME]chmod 400 ~/.ssh/my-ssh-keyGo to the metadata page for your project.Click SSH Keys to show a list of project-wide public SSH keys.Click the Edit button so that you can modify the public SSH keys in your project.Obtain the contents of the ~/.ssh/my-ssh-key.pub public key file with the cat command.cat ~/.ssh/my-ssh-key.pubCopy the output from the cat command and paste it as a new item in the list of SSH keys.At the bottom of the SSH Keys page, click Save to save your new project-wide SSH key.The public key is now set to work across all of the instances in your project. Use the ssh command to connect to your instances.In the console, find the external IP for the instance that you want to connect to. Go to the list of your instances.Use the ssh command to connect to your instance. Specify your username and the external IP address for the instance that you want to connect to. Your username is the Google username that you use to access your project. For this example, the private key is at ~/.ssh/my-ssh-key.ssh -i ~/.ssh/my-ssh-key [USERNAME]@[IP_ADDRESS]",
      "url": " /2017/generating-a-new-ssh-key-pair-for-google-console/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2017-git-add-ssh-key-for-github": {
      "title": "Git - Add SSH key for Github",
      "content"	 : "Open a terminal shell and type:ssh-keygen -t rsa -b 4096 -C &#39;{youremail}&#39;add the new key (use your filename):ssh-add ~/.ssh/id_rsacopy the content prited by the morecommand:more ~/.ssh/id_rsa.pubGo to settings at github and past the content.Go back to your terminal shell and authenticatessh -T git@github.com",
      "url": " /2017/git-add-ssh-key-for-github/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2017-git-gitignore-example": {
      "title": "Git - .gitignore example",
      "content"	 : "# Compiled source ####################*.com*.class*.dll*.exe*.o*.so# Packages ############## it&#39;s better to unpack these files and commit the raw source# git has its own built in compression methods*.7z*.dmg*.gz*.iso*.jar*.rar*.tar*.zip# Logs and databases #######################*.log*.sql*.sqlite# OS generated files #######################.DS_Store.DS_Store?._*.Spotlight-V100.Trashesehthumbs.dbThumbs.db# Packages #######################node_modules",
      "url": " /2017/git-gitignore-example/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2017-javascript-audio-events": {
      "title": "JavaScript - Audio Events",
      "content"	 : "audio.addEventListener(&#39;abort&#39;, function(e) { console.log(&#39;abort&#39;) }, false)audio.addEventListener(&#39;canplay&#39;, function(e) { console.log(&#39;canplay&#39;) }, false)audio.addEventListener(&#39;canplaythrough&#39;, function(e) { console.log(&#39;canplaythrough&#39;) }, false)audio.addEventListener(&#39;durationchange&#39;, function(e) { console.log(&#39;durationchange&#39;) }, false)audio.addEventListener(&#39;emptied&#39;, function(e) { console.log(&#39;emptied&#39;) }, false)audio.addEventListener(&#39;ended&#39;, function(e) { console.log(&#39;ended&#39;) }, false)audio.addEventListener(&#39;error&#39;, function(e) { console.log(&#39;error&#39;) }, false)audio.addEventListener(&#39;loadeddata&#39;, function(e) { console.log(&#39;loadeddata&#39;) }, false)audio.addEventListener(&#39;loadedmetadata&#39;, function(e) { console.log(&#39;loadedmetadata&#39;) }, false)audio.addEventListener(&#39;loadstart&#39;, function(e) { console.log(&#39;loadstart&#39;) }, false)audio.addEventListener(&#39;pause&#39;, function(e) { console.log(&#39;pause&#39;) }, false)audio.addEventListener(&#39;play&#39;, function(e) { console.log(&#39;play&#39;) }, false)audio.addEventListener(&#39;playing&#39;, function(e) { console.log(&#39;playing&#39;) }, false)audio.addEventListener(&#39;progress&#39;, function(e) { console.log(&#39;progress&#39;) }, false)audio.addEventListener(&#39;ratechange&#39;, function(e) { console.log(&#39;ratechange&#39;) }, false)audio.addEventListener(&#39;seeked&#39;, function(e) { console.log(&#39;seeked&#39;) }, false)audio.addEventListener(&#39;seeking&#39;, function(e) { console.log(&#39;seeking&#39;) }, false)audio.addEventListener(&#39;stalled&#39;, function(e) { console.log(&#39;stalled&#39;) }, false)audio.addEventListener(&#39;suspend&#39;, function(e) { console.log(&#39;suspend&#39;) }, false)audio.addEventListener(&#39;timeupdate&#39;, function(e) { console.log(&#39;timeupdate&#39;) }, false)audio.addEventListener(&#39;volumechange&#39;, function(e) { console.log(&#39;volumechange&#39;) }, false)audio.addEventListener(&#39;waiting&#39;, function(e) { console.log(&#39;waiting&#39;) }, false)",
      "url": " /2017/javascript-audio-events/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-your-filename": {
      "title": "JavaScript - Get Locale",
      "content"	 : "var getLang = function() {        if (navigator.languages != undefined) return navigator.languages[0]        else return navigator.language}",
      "url": " /2017/your-filename/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-react-clock-component": {
      "title": "React - Clock Component",
      "content"	 : "var React = require(&#39;react&#39;)var Clock = React.createClass({    getInitialState: function () {        var date = new Date()        return {            time: date.toLocaleTimeString(&#39;sv-SE&#39;)        }    },    myTimer: function () {      var date = new Date()      this.setState({               time: date.toLocaleTimeString(&#39;sv-SE&#39;)      })    },    componentWillMount: function () {        setInterval(()=&amp;gt;{ this.myTimer() }, 1000)    },    render: function () {        return (            &amp;lt;div className=&quot;component&quot; id=&quot;clock&quot; style={{border: &#39;1px solid red&#39;,background:&#39;rgba(255,0,0,0.5)&#39;}}&amp;gt;                &amp;lt;span&amp;gt;{this.state.time}&amp;lt;/span&amp;gt;            &amp;lt;/div&amp;gt;        )    }})",
      "url": " /2017/react-clock-component/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2017-react-routing-boilerplate": {
      "title": "React - Complete Boilerplate with Routing ",
      "content"	 : "/public/index.html&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;    &amp;lt;meta charset=utf-8&amp;gt;    &amp;lt;link rel=stylesheet media=all href=setup.css&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;    &amp;lt;div id=app&amp;gt;&amp;lt;/div&amp;gt;    &amp;lt;script src=bundle.js&amp;gt;&amp;lt;/script&amp;gt;/public/setup.csshtml, body, div, span, applet, object, iframe,h1, h2, h3, h4, h5, h6, p, blockquote, pre,a, abbr, acronym, address, big, cite, code,del, dfn, em, img, ins, kbd, q, s, samp,small, strike, strong, sub, sup, tt, var,b, u, i, center,dl, dt, dd, ol, ul, li,fieldset, form, label, legend,table, caption, tbody, tfoot, thead, tr, th, td,article, aside, canvas, details, embed,figure, figcaption, footer, header, hgroup,menu, nav, output, ruby, section, summary,time, mark, audio, video {margin: 0;padding: 0;border: 0;font-size: 100%;font: inherit;vertical-align: baseline;}/* HTML5 display-role reset for older browsers */article, aside, details, figcaption, figure,footer, header, hgroup, menu, nav, section {display: block;}body {line-height: 1;}ol, ul {list-style: none;}blockquote, q {quotes: none;}blockquote:before, blockquote:after,q:before, q:after {content: &#39;&#39;;content: none;}table {border-collapse: collapse;border-spacing: 0;}*, *:before, *:after { box-sizing: border-box;}html,body,#app,#main{height: 100%;width: 100%;}html {  box-sizing: border-box;}#nav{height: 10%;}.component{padding: 15px;}#main{margin: 0;padding: 0;}a{margin-right: 5px;}.page{height: 90%;}/package.json{  &quot;name&quot;: &quot;react-routing-boilerplate&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;main&quot;: &quot;index.js&quot;,  &quot;scripts&quot;: {    &quot;test&quot;: &quot;echo &quot;Error: no test specified&quot; &amp;amp;&amp;amp; exit 1&quot;  },  &quot;author&quot;: &quot;Andree DevelDoe Ray&quot;,  &quot;license&quot;: &quot;ISC&quot;,  &quot;dependencies&quot;: {    &quot;axios&quot;: &quot;^0.15.3&quot;,    &quot;express&quot;: &quot;^4.14.1&quot;,    &quot;react&quot;: &quot;^0.14.7&quot;,    &quot;react-dom&quot;: &quot;^0.14.7&quot;,    &quot;react-router&quot;: &quot;^3.0.2&quot;  },  &quot;devDependencies&quot;: {    &quot;babel-core&quot;: &quot;^6.5.1&quot;,    &quot;babel-loader&quot;: &quot;^6.2.2&quot;,    &quot;babel-preset-es2015&quot;: &quot;^6.5.0&quot;,    &quot;babel-preset-react&quot;: &quot;^6.5.0&quot;,    &quot;babel-preset-stage-0&quot;: &quot;^6.22.0&quot;  }}/server.jsvar express = require(&#39;express&#39;),    app     = express()app.use(express.static(&#39;public&#39;))app.listen(4000, function(){    console.log(&#39;Express server is up on port: 4000&#39;)})webpack.config.jsmodule.exports = {    entry: &#39;./app/entry.jsx&#39;,    output: {        path: __dirname,        filename: &#39;./public/bundle.js&#39;    },    resolve: {        root: __dirname,        alias: {            Main:   &#39;app/components/Main&#39;,            Nav:    &#39;app/components/Nav&#39;,            Home:   &#39;app/components/home/Home&#39;,            Input:  &#39;app/components/home/Input&#39;,            Output: &#39;app/components/home/Output&#39;,            about:  &#39;app/components/about/About&#39;,            Api:    &#39;app/api/Api&#39;        },        extensions: [&#39;&#39;,&#39;.js&#39;,&#39;.jsx&#39;]    },    module: {        loaders: [            {                loader: &#39;babel-loader&#39;,                query: {                    presets: [&#39;react&#39;,&#39;es2015&#39;,&#39;stage-0&#39;]                },                test: /.jsx?$/,                exclude: /(node_modules|bower_components)/            }        ]    },    devtool: &#39;cheep-module-eval-source-map&#39;}/app/Entry.jsxvar React = require(&#39;react&#39;),    ReactDOM = require(&#39;react-dom&#39;),    Main  = require(&#39;Main&#39;),    Home = require(&#39;Home&#39;),    About = require(&#39;About&#39;),    {Route, Router, IndexRoute, hashHistory} = require(&#39;react-router&#39;)ReactDOM.render(    &amp;lt;Router history={hashHistory}&amp;gt;        &amp;lt;Route path=&quot;/&quot; component={Main}&amp;gt;            &amp;lt;IndexRoute component={Home}/&amp;gt;            &amp;lt;Route path=&quot;about&quot; component={About}/&amp;gt;        &amp;lt;/Route&amp;gt;    &amp;lt;/Router&amp;gt;,    document.getElementById(&#39;app&#39;)/app/components/Main.jsxvar React = require(&#39;react&#39;),    Nav = require(&#39;Nav&#39;)var Main = (props) =&amp;gt; {    return (        &amp;lt;div className=&quot;component&quot; id=&quot;main&quot; style={{border: &#39;2px solid red&#39;}}&amp;gt;            &amp;lt;Nav/&amp;gt;            {props.children}        &amp;lt;/div&amp;gt;    )}module.exports = Main/app/components/Nav.jsxvar React = require(&#39;react&#39;),    {Link, IndexLink} = require(&#39;react-router&#39;)var Nav  = (props) =&amp;gt; {    return (        &amp;lt;div className=&quot;component&quot; id=&quot;nav&quot; style={{border: &#39;4px solid green&#39;,background:&#39;rgba(0,255,0,0.1)&#39;}}&amp;gt;            &amp;lt;IndexLink activeClassName=&quot;active&quot; activeStyle={{fontWeight:&#39;bold&#39;}} to=&quot;/&quot;&amp;gt;Home&amp;lt;/IndexLink&amp;gt;            &amp;lt;Link activeClassName=&quot;active&quot; activeStyle={{fontWeight:&#39;bold&#39;}} to=&quot;/about&quot;&amp;gt;About&amp;lt;/Link&amp;gt;        &amp;lt;/div&amp;gt;    )}module.exports = Nav/app/components/home/Home.jsxvar React = require(&#39;react&#39;),    Input = require(&#39;Input&#39;),    Output = require(&#39;Output&#39;),    api = require(&#39;Api&#39;)var Home  = React.createClass({    getInitialState: function () {        return{            isLoading: false        }    },    handleSearch: function (location) {        var that = this        that.setState({            isLoading: true        })        api.getTemp(location).then(function (temp) {            that.setState({                location: location,                temp: temp,                isLoading: false            })        }, function (errMessage) {            alert(errMessage)            that.setState({                isLoading: false            })        })    },    render: function () {        var {isLoading, temp, location} = this.state        function renderMessage () {            if (isLoading) {                return &amp;lt;h3&amp;gt;Fetching weather...&amp;lt;/h3&amp;gt;            } else if (temp &amp;amp;&amp;amp; location) {                return &amp;lt;Output temp={temp} location={location}/&amp;gt;            }        }        return (            &amp;lt;div className=&quot;component page&quot; id=&quot;index&quot; style=&amp;gt;                &amp;lt;span&amp;gt;Home&amp;lt;/span&amp;gt;                &amp;lt;Input onSearch={this.handleSearch}/&amp;gt;                {renderMessage()}            &amp;lt;/div&amp;gt;        )    }})module.exports = Home**/app/components/home/Input.jsxvar React = require(&#39;react&#39;)var Input = (props)=&amp;gt;{    onFormSubmit: function (e) {        e.preventDefault()        var location = this.refs.location.value        if (location.length &amp;gt; 0) {            this.refs.location.value = &quot;&quot;            this.props.onSearch(location)        }    },    render: function () {        return(            &amp;lt;div className=&quot;component&quot; id=&quot;home-input&quot;&amp;gt;                &amp;lt;form onSubmit={this.onFormSubmit}&amp;gt;                    &amp;lt;input type=&quot;text&quot; ref=&quot;location&quot;/&amp;gt;                    &amp;lt;button&amp;gt;Get Input&amp;lt;/button&amp;gt;                &amp;lt;/form&amp;gt;            &amp;lt;/div&amp;gt;        )    }}module.exports = Input/app/components/home/Output.jsxvar React = require(&#39;react&#39;)var Output = ({temp, location}) =&amp;gt; {    return (        &amp;lt;div className=&quot;component&quot; id=&quot;home-output&quot; &amp;gt;            &amp;lt;span&amp;gt;It is {temp} in {location}&amp;lt;/span&amp;gt;        &amp;lt;/div&amp;gt;    )}module.exports = Output/app/components/about/About.jsxvar React = require(&#39;react&#39;)var About = (props) =&amp;gt; {    return (        &amp;lt;div className=&quot;component page&quot; id=&quot;about&quot; style=&amp;gt;            &amp;lt;span&amp;gt;About&amp;lt;/span&amp;gt;        &amp;lt;/div&amp;gt;    )}module.exports = AboutFinally The API, this examples API goes to open weather and lets you check for temperatures in different cities./api/api/Api.jsxvar axios = require(&#39;axios&#39;)const API_URL = &#39;http://api.openweathermap.org/data/2.5/weather?units=metric&amp;amp;appid=48ba5cd6c56d934ef8fa607ba4339f45&#39;module.exports = {    getTemp: function (location) {        var encodedLocation = encodeURIComponent(location)        var requestUrl = `${API_URL}&amp;amp;q=${encodedLocation}`        return axios.get(requestUrl).then(function (res) {            if (res.data.cod &amp;amp;&amp;amp; res.data.message) {                throw new Error(res.data.message)            } else {                return res.data.main.temp            }        }, function (res) {            throw new Error(res.data.message)        })    }}",
      "url": " /2017/react-routing-boilerplate/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2017-react-stateless-functional-components": {
      "title": "React - Stateless Functional Components",
      "content"	 : "Old syntaxvar Text = React.createClass({  render: function () {    return &amp;lt;p&amp;gt;{this.props.children}&amp;lt;/p&amp;gt;;  }});React.render(&amp;lt;Text&amp;gt;Hello World&amp;lt;/Text&amp;gt;, document.body);ES2015class Text extends React.Component {  render() {    return &amp;lt;p&amp;gt;{this.props.children}&amp;lt;/p&amp;gt;;  }}React.render(&amp;lt;Text&amp;gt;Hello World&amp;lt;/Text&amp;gt;, document.body);Statlessconst Text = (props) =&amp;gt;  &amp;lt;p&amp;gt;{props.children}&amp;lt;/p&amp;gt;;// ReactDOM is part of the introduction of React 0.14ReactDOM.render(  &amp;lt;Text&amp;gt;Hello World&amp;lt;/Text&amp;gt;,   document.querySelector(&#39;#root&#39;));",
      "url": " /2017/react-stateless-functional-components/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2017-javascript-scope": {
      "title": "JavaScript - Scope",
      "content"	 : "TODOhttp://www.digital-web.com/articles/scope_in_javascript/",
      "url": " /2017/javascript-scope/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-javascript-this": {
      "title": "JavaScript - this",
      "content"	 : "TODO",
      "url": " /2017/javascript-this/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-javascript-using-the-bind-method": {
      "title": "JavaScript - Using the bind method ",
      "content"	 : "The JavaScript bind method has several uses.Typically, it is used to preserve execution context for a function that executes in another context. bind creates a new function that has the same body as the original function.The first argument passed to bind specifies the value of the this keyword in the bound function. You can also pass additional, optional arguments to bind, however this is out of the scope of this article.Preserving the execution context using bindThe bind function is often used when adding event listeners.In the following code example, bind is used to preserve the context of the current object (DataObject).The data object is passed to bind by using the this keyword, which provides access to data object properties and functions when the event handler (dataReadyHandler) runs.To illustrate how bind works, this code creates a custom event:var data;var dataReadyEvent = document.createEvent(&quot;Event&quot;);dataReadyEvent.initEvent(&quot;dataReady&quot;, true, false);function DataObject() {    this.name = &quot;Data Object&quot;;    this.data = function () {        return data;    }    this.onDataCompleted = dataReadyHandler;    document.addEventListener(&#39;dataReady&#39;, this.onDataCompleted.bind(this));    // To see the result of not using bind, comment out the preceding line,     // and uncomment the following line of code.    // document.addEventListener(&#39;dataReady&#39;, this.onDataCompleted);}function dataReadyHandler() {    if (console &amp;amp;&amp;amp; console.log) {        console.log(&quot;Data object property value: &quot; + this.name);        console.log(&quot;Data object property value: &quot; + this.data());    }}setTimeout(function () {    data = [0, 1, 2, 3];    document.dispatchEvent(dataReadyEvent);    }, 5000);}var dataObj = new DataObject();// Output:// Data Object// 0,1,2,3If you comment out the line of code that uses bind, uncomment the line of code that calls addEventListener without bind, and then rerun the code, the dataReadyHandler function will fail.",
      "url": " /2017/javascript-using-the-bind-method/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-javascript-arrow-functions": {
      "title": "JavaScript - Shorter Arrow Functions &amp; this keyword",
      "content"	 : "Normal functionvar names = [&quot;andree&quot;,&quot;ilona&quot;,&quot;benedetta&quot;]names.foreach(function (name) {    console.log(&#39;foreach &#39;name)})statements arrow functionvar names = [&quot;andree&quot;,&quot;ilona&quot;,&quot;benedetta&quot;]names.foreach((name) =&amp;gt; {    console.log(&#39;foreach &#39;name)})expression arrow functionvar names = [&quot;andree&quot;,&quot;ilona&quot;,&quot;benedetta&quot;]names.foreach((name) =&amp;gt;  console.log(&#39;foreach &#39;name))More…This touches the concept of scopes and the use of this binging. You can read more about these subject at JavaScript - this &amp;amp; JavaScript - Using the bind method articles.There is a differance in bindings with normal and arrow functions. Arrow functions take on thier parents “this” binding.Take a look at the code bellow:var person = {    name: &#39;Andree&#39;,    greet: function(){        names.foreach(function(name){            console.log(this.name + &#39; says hit to &#39; + name)        })    }}You might think that “this” keyword refers to the “person” object, however, it does not. You can fix this with anonymous functions:var person = {    name: &#39;Andree&#39;,    greet: function(){        names.foreach((name)=&amp;gt;{            console.log(this.name + &#39; says hit to &#39; + name)        })    }}This workes becouse Arrow functions does not update the “this” keyword.",
      "url": " /2017/javascript-arrow-functions/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-javascript-source-maps-webpack": {
      "title": "JavaScript - Source Maps &amp; webpack",
      "content"	 : "Keep your client-side code readable and more importantly debuggable even after you’ve combined and minified it.To use source map with Webpack add the following line to your webpack config, devtool: &#39;cheep-module-eval-source-map&#39;, so that your configuration file looks something like this:module.exports = {    entry: &#39;./app/entry.jsx&#39;,    output: {        path: __dirname,        filename: &#39;./public/bundle.js&#39;    },    resolve: {        root: __dirname,        alias: {            Main:     &#39;app/components/Main&#39;,            Nav:      &#39;app/components/Nav&#39;,            Weather:    &#39;app/components/Weather&#39;,            About:    &#39;app/components/About&#39;,            Examples: &#39;app/components/Examples&#39;,            WeatherForm: &#39;app/components/WeatherForm&#39;,            WeatherMessage: &#39;app/components/WeatherMessage&#39;,            openweathermap: &#39;app/api/openweathermap&#39;        },        extensions: [&#39;&#39;,&#39;.js&#39;,&#39;.jsx&#39;]    },    module: {        loaders: [            {                loader: &#39;babel-loader&#39;,                query: {                    presets: [&#39;react&#39;,&#39;es2015&#39;,&#39;stage-0&#39;]                },                test: /.jsx?$/,                exclude: /(node_modules|bower_components)/            }        ]    },    devtool: &#39;cheep-module-eval-source-map&#39;}For development, use cheap-module-eval-source-map. For production, use cheap-module-source-map.",
      "url": " /2017/javascript-source-maps-webpack/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2017-react-setup-css-file": {
      "title": "CSS - setup css file for react projects",
      "content"	 : "I use this file to bootstrap my react projects.Its simply a css reset with some initial rendering defaults for things like components. This goes well with the setup I use when I use React Routinghtml, body, div, span, applet, object, iframe,h1, h2, h3, h4, h5, h6, p, blockquote, pre,a, abbr, acronym, address, big, cite, code,del, dfn, em, img, ins, kbd, q, s, samp,small, strike, strong, sub, sup, tt, var,b, u, i, center,dl, dt, dd, ol, ul, li,fieldset, form, label, legend,table, caption, tbody, tfoot, thead, tr, th, td,article, aside, canvas, details, embed,figure, figcaption, footer, header, hgroup,menu, nav, output, ruby, section, summary,time, mark, audio, video {margin: 0;padding: 0;border: 0;font-size: 100%;font: inherit;vertical-align: baseline;}/* HTML5 display-role reset for older browsers */article, aside, details, figcaption, figure,footer, header, hgroup, menu, nav, section {display: block;}body {line-height: 1;}ol, ul {list-style: none;}blockquote, q {quotes: none;}blockquote:before, blockquote:after,q:before, q:after {content: &#39;&#39;;content: none;}table {border-collapse: collapse;border-spacing: 0;}*, *:before, *:after { box-sizing: border-box;}html,body,#app,#main{height: 100%;width: 100%;}html {  box-sizing: border-box;}#nav{height: 10%;}.component{padding: 15px;}#main{margin: 0;padding: 0;}a{margin-right: 5px;}.page{height: 90%;}",
      "url": " /2017/react-setup-css-file/",
      "author": "",
      "categories": "CSS"
    }
    ,
  

    "2017-react-nested-component": {
      "title": "React - nested component",
      "content"	 : "var Output = React.createClass({    getDefaultProps: function () {        return {            input: &#39;defaultProp&#39;        }    },    render: function () {        return (            &amp;lt;div&amp;gt;                &amp;lt;span&amp;gt;{this.props.state}&amp;lt;/span&amp;gt;            &amp;lt;/div&amp;gt;        )    }})var Input = React.createClass({    onSubmit: function (e) {        e.preventDefault()        var inputValue = this.refs.input.value        if (typeof inputValue === &#39;string&#39; &amp;amp;&amp;amp; inputValue.length &amp;gt; 0) {            this.refs.input.value = &quot;&quot;            this.props.onNewInput(inputValue)        }    },    render: function () {        return (            &amp;lt;form onSubmit={this.onSubmit}&amp;gt;                &amp;lt;input type=&quot;text&quot; ref=&quot;input&quot; /&amp;gt;                &amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;            &amp;lt;/form&amp;gt;        )    }})var MainComponent = React.createClass({    getInitialState: function () {        return {            state: &quot;initState&quot;        }    },    handleNewInput: function (input) {        this.setState({            state: input        })    },    render: function() {        return (            &amp;lt;div&amp;gt;                &amp;lt;Output state={this.state.state}/&amp;gt;                &amp;lt;Input onNewInput={this.handleNewInput}/&amp;gt;            &amp;lt;/div&amp;gt;        )    }})ReactDOM.render(&amp;lt;MainComponent /&amp;gt;, document.getElementById(&quot;app&quot;))",
      "url": " /2017/react-nested-component/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2017-react-state": {
      "title": "React - State",
      "content"	 : "There are two types of data that get passed into a component, there are props and there is state. Props get passed in as you initialize a component, while a state is internally maintained and updated.var StateTest = React.createClass({    getDefaultProps: function () {        return {            name: &#39;defaultNameProp&#39;        }    },    getInitialState: function () {        return {            name: this.props.name        }    },    handleSubmit: function (e) {        e.preventDefault()        var inputValue = this.refs.input.value        if (typeof inputValue === &#39;string&#39; &amp;amp;&amp;amp; inputValue.length &amp;gt; 0){            this.setState({                name: inputValue            })            this.refs.input.value = &quot;&quot;        }    },    render: function() {        return (            &amp;lt;div&amp;gt;                &amp;lt;span&amp;gt;{this.state.name}&amp;lt;/span&amp;gt;                &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;                    &amp;lt;input type=&quot;text&quot; ref=&quot;input&quot; /&amp;gt;                    &amp;lt;button&amp;gt;Set Name&amp;lt;/button&amp;gt;                &amp;lt;/form&amp;gt;            &amp;lt;/div&amp;gt;        )    }})var aVar = &quot;aVar&quot;ReactDOM.render(&amp;lt;StateTest name={aVar}  /&amp;gt;, document.getElementById(&quot;app&quot;))",
      "url": " /2017/react-state/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2017-react-user-event-callbacks": {
      "title": "React - User Event Callbacks",
      "content"	 : "var Greeter = React.createClass({    handleSubmit: function (e) {        e.preventDefault()        console.log(this.refs.input.value)    },    render: function() {        return (            &amp;lt;div&amp;gt;                &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;                    &amp;lt;input type=&quot;text&quot; ref=&quot;input&quot; /&amp;gt;                    &amp;lt;button&amp;gt;Set Name&amp;lt;/button&amp;gt;                &amp;lt;/form&amp;gt;            &amp;lt;/div&amp;gt;        )    }})ReactDOM.render(&amp;lt;Greeter /&amp;gt;, document.getElementById(&quot;app&quot;))",
      "url": " /2017/react-user-event-callbacks/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2017-react-props": {
      "title": "React - Props",
      "content"	 : "There are two types of data that get passed into a component, there are props and there is state. Props get passed in as you initialize a component, while a state is internally maintained and updated.var Greeter = React.createClass({    getDefaultProps: function () {        return {            name:    &#39;defaultNameProp&#39;,            message: &#39;defaultMessageProp&#39;        }    },    render: function() {        return (            &amp;lt;div&amp;gt;                &amp;lt;h1&amp;gt;{this.props.name}&amp;lt;/h1&amp;gt;                &amp;lt;p&amp;gt;{this.props.message}&amp;lt;/p&amp;gt;            &amp;lt;/div&amp;gt;        )    }})var lname = &quot;Ray&quot;ReactDOM.render(&amp;lt;Greeter name={lname}  /&amp;gt;, document.getElementById(&quot;app&quot;))Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.A component, it must never modify its own props. Consider this sum function:function sum(a, b) {  return a + b;}Such functions are called “pure” because they do not attempt to change their inputs, and always return the same result for the same inputs.In contrast, this function is impure because it changes its own input:function withdraw(account, amount) {  account.total -= amount;}React is pretty flexible but it has a single strict rule: All React components must act like pure functions with respect to their props.",
      "url": " /2017/react-props/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2016-node-write-file": {
      "title": "Node - Write File",
      "content"	 : "var fs = require(&#39;fs&#39;);fs.writeFile(&quot;/tmp/test&quot;, &quot;Hey there!&quot;, function(err) {    if(err) {        return console.log(err);    }    console.log(&quot;The file was saved!&quot;);}); ",
      "url": " /2016/node-write-file/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-node-file-uploader": {
      "title": "Node -  File Uploader",
      "content"	 : "upload.html&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;  &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;  &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&amp;gt;  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;  &amp;lt;title&amp;gt;File Uploader - coligo.io&amp;lt;/title&amp;gt;  &amp;lt;link href=&#39;https://fonts.googleapis.com/css?family=Raleway&#39; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&amp;gt;  &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css&quot;&amp;gt;  &amp;lt;link href=&quot;css/styles.css&quot; rel=&quot;stylesheet&quot;&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;  &amp;lt;div class=&quot;container&quot;&amp;gt;    &amp;lt;div class=&quot;row&quot;&amp;gt;      &amp;lt;div class=&quot;col-xs-12&quot;&amp;gt;        &amp;lt;div class=&quot;panel panel-default&quot;&amp;gt;          &amp;lt;div class=&quot;panel-body&quot;&amp;gt;            &amp;lt;span class=&quot;glyphicon glyphicon-cloud-upload&quot;&amp;gt;&amp;lt;/span&amp;gt;            &amp;lt;h2&amp;gt;File Uploader&amp;lt;/h2&amp;gt;            &amp;lt;h4&amp;gt;coligo.io&amp;lt;/h4&amp;gt;            &amp;lt;div class=&quot;progress&quot;&amp;gt;              &amp;lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot;&amp;gt;&amp;lt;/div&amp;gt;            &amp;lt;/div&amp;gt;            &amp;lt;button class=&quot;btn btn-lg upload-btn&quot; type=&quot;button&quot;&amp;gt;Upload File&amp;lt;/button&amp;gt;          &amp;lt;/div&amp;gt;        &amp;lt;/div&amp;gt;      &amp;lt;/div&amp;gt;    &amp;lt;/div&amp;gt;  &amp;lt;/div&amp;gt;  &amp;lt;input id=&quot;upload-input&quot; type=&quot;file&quot; name=&quot;uploads[]&quot; multiple=&quot;multiple&quot;&amp;gt;&amp;lt;/br&amp;gt;  &amp;lt;script src=&quot;https://code.jquery.com/jquery-2.2.0.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;  &amp;lt;script src=&quot;javascripts/upload.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;upload.css.btn:focus, .upload-btn:focus{  outline: 0 !important;}html,body {  height: 100%;  background-color: #4791D2;}body {  text-align: center;  font-family: &#39;Raleway&#39;, sans-serif;}.row {  margin-top: 80px;}.upload-btn {  color: #ffffff;  background-color: #F89406;  border: none;}.upload-btn:hover,.upload-btn:focus,.upload-btn:active,.upload-btn.active {  color: #ffffff;  background-color: #FA8900;  border: none;}h4 {  padding-bottom: 30px;  color: #B8BDC1;}.glyphicon {  font-size: 5em;  color: #9CA3A9;}h2 {  margin-top: 15px;  color: #68757E;}.panel {  padding-top: 20px;  padding-bottom: 20px;}#upload-input {  display: none;}@media (min-width: 768px) {  .main-container {    width: 100%;  }}@media (min-width: 992px) {  .container {    width: 450px;  }}upload.js$(&#39;.upload-btn&#39;).on(&#39;click&#39;, function (){    $(&#39;#upload-input&#39;).click();    $(&#39;.progress-bar&#39;).text(&#39;0%&#39;);    $(&#39;.progress-bar&#39;).width(&#39;0%&#39;);});$(&#39;#upload-input&#39;).on(&#39;change&#39;, function(){  var files = $(this).get(0).files;  if (files.length &amp;gt; 0){    // create a FormData object which will be sent as the data payload in the    // AJAX request    var formData = new FormData();    // loop through all the selected files and add them to the formData object    for (var i = 0; i &amp;lt; files.length; i++) {      var file = files[i];      // add the files to formData object for the data payload      formData.append(&#39;uploads[]&#39;, file, file.name);    }    $.ajax({      url: &#39;/upload&#39;,      type: &#39;POST&#39;,      data: formData,      processData: false,      contentType: false,      success: function(data){          console.log(&#39;upload successful!n&#39; + data);      },      xhr: function() {        // create an XMLHttpRequest        var xhr = new XMLHttpRequest();        // listen to the &#39;progress&#39; event        xhr.upload.addEventListener(&#39;progress&#39;, function(evt) {          if (evt.lengthComputable) {            // calculate the percentage of upload completed            var percentComplete = evt.loaded / evt.total;            percentComplete = parseInt(percentComplete * 100);            // update the Bootstrap progress bar with the new percentage            $(&#39;.progress-bar&#39;).text(percentComplete + &#39;%&#39;);            $(&#39;.progress-bar&#39;).width(percentComplete + &#39;%&#39;);            // once the upload reaches 100%, set the progress bar text to done            if (percentComplete === 100) {              $(&#39;.progress-bar&#39;).html(&#39;Done&#39;);            }          }        }, false);        return xhr;      }    });  }});server.jsvar express = require(&#39;express&#39;);var app = express();var path = require(&#39;path&#39;);var formidable = require(&#39;formidable&#39;);var fs = require(&#39;fs&#39;);app.use(express.static(path.join(__dirname, &#39;public&#39;)));app.get(&#39;/&#39;, function(req, res){  res.sendFile(path.join(__dirname, &#39;views/index.html&#39;));});app.post(&#39;/upload&#39;, function(req, res){  // create an incoming form object  var form = new formidable.IncomingForm();  // specify that we want to allow the user to upload multiple files in a single request  form.multiples = true;  // store all uploads in the /uploads directory  form.uploadDir = path.join(__dirname, &#39;/uploads&#39;);  // every time a file has been uploaded successfully,  // rename it to it&#39;s orignal name  form.on(&#39;file&#39;, function(field, file) {    fs.rename(file.path, path.join(form.uploadDir, file.name));  });  // log any errors that occur  form.on(&#39;error&#39;, function(err) {    console.log(&#39;An error has occured: n&#39; + err);  });  // once all the files have been uploaded, send a response to the client  form.on(&#39;end&#39;, function() {    res.end(&#39;success&#39;);  });  // parse the incoming request containing the form data  form.parse(req);});var server = app.listen(3000, function(){  console.log(&#39;Server listening on port 3000&#39;);});",
      "url": " /2016/node-file-uploader/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-javascript-creating-custom-events": {
      "title": "JavaScript - Creating custom events",
      "content"	 : "var event = new Event(&#39;build&#39;);// Listen for the event.elem.addEventListener(&#39;build&#39;, function (e) { ... }, false);// Dispatch the event.elem.dispatchEvent(event);",
      "url": " /2016/javascript-creating-custom-events/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-javascript-promises": {
      "title": "JavaScript - Promises",
      "content"	 : "function addPromise(a,b){    return new Promise(function(resolve,reject){        if(typeof a === &#39;number&#39; &amp;amp;&amp;amp; typeof b === &#39;number&#39;){            resolve(a+b)        } else {            reject(&quot;these are not two numbers&quot;)        }    })}addPromise(2,2).then(function(response){    console.log(&#39;promise success: &#39;, response)}, function(response){    console.log(&#39;promise error&#39;, response)})addPromise(&quot;ray&quot;,2).then(function(response){    console.log(&#39;promise success: &#39;, response)}, function(response){    console.log(&#39;promise error&#39;, response)})",
      "url": " /2016/javascript-promises/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-react-routing": {
      "title": "React - Routing",
      "content"	 : "prerequisite: basic react appnpm install --save react-router./webpack.config.jsmodule.exports = {    entry: &#39;./app/entry.jsx&#39;,    output: {        path: __dirname,        filename: &#39;./public/bundle.js&#39;    },    resolve: {        root: __dirname,        alias: {            Main:     &#39;app/components/Main.jsx&#39;,            Nav:      &#39;app/components/Nav.jsx&#39;,            Index:    &#39;app/components/Index.jsx&#39;,            About:    &#39;app/components/About.jsx&#39;,            Examples: &#39;app/components/Examples.jsx&#39;        },        extensions: [&#39;&#39;,&#39;.js&#39;,&#39;.jsx&#39;]    },    module: {        loaders: [            {                loader: &#39;babel-loader&#39;,                query: {                    presets: [&#39;react&#39;,&#39;es2015&#39;,&#39;stage-0&#39;]                },                test: /.jsx?$/,                exclude: /(node_modules|bower_components)/            }        ]    }}entry.jsvar React = require(&#39;react&#39;), ReactDOM = require(&#39;react-dom&#39;),    Main  = require(&#39;Main&#39;), Index = require(&#39;Index&#39;), About = require(&#39;About&#39;), Examples = require(&#39;Examples&#39;),    {Route, Router, IndexRoute, hashHistory} = require(&#39;react-router&#39;)ReactDOM.render(    &amp;lt;Router history={hashHistory}&amp;gt;        &amp;lt;Route path=&quot;/&quot; component={Main}&amp;gt;            &amp;lt;IndexRoute component={Index}/&amp;gt;            &amp;lt;Route path=&quot;about&quot; component={About}/&amp;gt;            &amp;lt;Route path=&quot;examples&quot; component={Examples}/&amp;gt;        &amp;lt;/Route&amp;gt;    &amp;lt;/Router&amp;gt;,    document.getElementById(&#39;app&#39;))Main.jsxvar React = require(&#39;react&#39;), Nav = require(&#39;Nav&#39;)module.exports  = React.createClass({    render: function () {        return (            &amp;lt;div className=&quot;component&quot; id=&quot;main&quot; style=&amp;gt;                &amp;lt;Nav/&amp;gt;                {this.props.children}            &amp;lt;/div&amp;gt;        )    }})Nav.jsxvar React = require(&#39;react&#39;), {Link, IndexLink} = require(&#39;react-router&#39;)module.exports  = React.createClass({    render: function () {        return (            &amp;lt;div className=&quot;component&quot; id=&quot;nav&quot; style=&amp;gt;                &amp;lt;IndexLink activeClassName=&quot;active&quot; activeStyle= to=&quot;/&quot;&amp;gt;Get Weather&amp;lt;/IndexLink&amp;gt;                &amp;lt;Link activeClassName=&quot;active&quot; activeStyle= to=&quot;/about&quot;&amp;gt;About&amp;lt;/Link&amp;gt;                &amp;lt;Link activeClassName=&quot;active&quot; activeStyle= to=&quot;/examples&quot;&amp;gt;Examples&amp;lt;/Link&amp;gt;            &amp;lt;/div&amp;gt;        )    }})index.jsxvar React = require(&#39;react&#39;)module.exports  = React.createClass({    render: function () {        return (            &amp;lt;div className=&quot;component page&quot; id=&quot;index&quot; style=&amp;gt;                &amp;lt;span&amp;gt;index component&amp;lt;/span&amp;gt;            &amp;lt;/div&amp;gt;        )    }})about.jsxvar React = require(&#39;react&#39;)module.exports  = React.createClass({    render: function () {        return (            &amp;lt;div className=&quot;component page&quot; id=&quot;about&quot; style=&amp;gt;                &amp;lt;span&amp;gt;about component&amp;lt;/span&amp;gt;            &amp;lt;/div&amp;gt;        )    }})",
      "url": " /2016/react-routing/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2016-simple-linux-script": {
      "title": "Simple Linux Script",
      "content"	 : "vim {name}.sh{name}.sh#!/bin/bashecho &quot;Hello $USER.&quot;echo &quot;Today is $(date)&quot;echo &quot;Current working directory : $(pwd)&quot;Permissionschmod +x hello.shRun./hello.sh",
      "url": " /2016/simple-linux-script/",
      "author": "",
      "categories": "Linux"
    }
    ,
  

    "2016-restart-program-bash-script": {
      "title": "Restart Program Bash Script",
      "content"	 : "vim launch.sh#!/bin/shps auxw | grep icecast2 | grep -v grep &amp;gt; /dev/nullif [ $? != 0 ]then        /etc/init.d/icecast2 start &amp;gt; /dev/nullfichmod 0755 launch.shThe cron utility allows us to schedule at what intervals the script should execute.crontab -eThe most often that the script can run in cron is every minute.* * * * * {path}/launch.shEvery five minutes would be set up like this:*/5 * * * * {path}/launch.sh",
      "url": " /2016/restart-program-bash-script/",
      "author": "",
      "categories": "Linux"
    }
    ,
  

    "2016-node-env-port": {
      "title": "Node - env PORT",
      "content"	 : "Port$ PORT=80 node app.jsMore permanently$ export PORT=80$ node app.jsIn Windowsset PORT=80In Windows PowerShell$env:PORT = 80",
      "url": " /2016/node-env-port/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-osx-homebrew": {
      "title": "OSX - Homebrew",
      "content"	 : "Install/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;",
      "url": " /2016/osx-homebrew/",
      "author": "",
      "categories": "OSX"
    }
    ,
  

    "2016-osx-mongo-db": {
      "title": "OSX - Mongo DB",
      "content"	 : "First you need to install HomebrewUpdate brewbrew updateInstallBinariesbrew install mongodbTLS/SSLbrew install mongodb --with-opensslData Dirmkdir -p /data/dbPermissionssudo chown -R `id -u` /data/dbRunmongod",
      "url": " /2016/osx-mongo-db/",
      "author": "",
      "categories": "OSX"
    }
    ,
  

    "2016-ubuntu-mongo-db-ce": {
      "title": "Ubuntu - Mongo DB CE ",
      "content"	 : "keysudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6Create a list fileUbuntu 12.04echo &quot;deb http://repo.mongodb.org/apt/ubuntu precise/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.listUbuntu 14.04echo &quot;deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.listUbuntu 16.04echo &quot;deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.listReload local packagessudo apt-get updateInstallsudo apt-get install -y mongodb-orgStart, Stop, Restartsudo service mongod startsudo service mongod stopsudo service mongod restartVerifyvim /var/log/mongodb/mongod.log",
      "url": " /2016/ubuntu-mongo-db-ce/",
      "author": "",
      "categories": "Linux"
    }
    ,
  

    "2016-node-kill-process": {
      "title": "Node - kill process",
      "content"	 : "findps -e|grep nodekillkill -9 XXXX",
      "url": " /2016/node-kill-process/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-node-restful-api-with-express-4": {
      "title": "Node - Restful API with Express 4",
      "content"	 : "PrequsiteYou must have mongo installed:  Ubuntu - Install and start Monddb  OSX - Install and start Monddbpackage.json{  &quot;name&quot;: &quot;node-api&quot;,  &quot;main&quot;: &quot;server.js&quot;,  &quot;dependencies&quot;: {    &quot;body-parser&quot;: &quot;~1.0.1&quot;,    &quot;express&quot;: &quot;~4.0.0&quot;,    &quot;mongoose&quot;: &quot;^4.9.2&quot;  },  &quot;scripts&quot;: {    &quot;start&quot;: &quot;supervisor server.js&quot;  }}server.js// SETUP// ===============================================var express     = require(&#39;express&#39;)var app         = express()var bodyParser  = require(&#39;body-parser&#39;)var mongoose    = require(&#39;mongoose&#39;)var User        = require(&#39;./app/models/user&#39;);// configure bodyParser()// this will let us get the data from a POSTapp.use(bodyParser.urlencoded({ extended: true }))app.use(bodyParser.json())var port = process.env.PORT || 4000// databasemongoose.connect(&#39;mongodb://localhost:27017/restapi&#39;);// ROUTES// ================================================var router = express.Router()// /apirouter.get(&#39;/&#39;, function (req,res){    res.json({message: &#39;welcome to the api!&#39;})})// /restapi/users// ------------------------------------------------router.route(&#39;/users&#39;)    .post(function(req, res) {        var user = new User()        user.name       = req.body.name        user.email      = req.body.email        user.password   = req.body.password        user.save(function(err) {            if (err) throw err;            res.json({message:&#39;User saved successfully!&#39;});        });    })    // get all the bears (accessed at GET http://localhost:8080/api/bears)    .get(function(req, res) {        User.find(function(err, users) {            if (err) res.send(err);            res.json(users);        });    })// /restapi/users/:user_id// -----------------------------------------------router.route(&#39;/users/:user_id&#39;)    .get(function (req,res) {        User.findById(req.params.user_id, function (err, user) {            if (err) res.send(err)            res.json(user)        })    })    .put(function (req,res) {        User.findById(req.params.user_id, function (err, user) {            if (err) res.send(err)            user.name       = req.body.name            user.email      = req.body.email            user.password   = req.body.password            user.save(function (err) {                if (err) res.send(err)                res.json({message: &#39;user updated&#39;})            })        })    })    .delete(function (req, res) {        User.remove({            _id: req.params.user_id        }, function (err, user) {            if (err) res.send(err)            res.json({message: &#39;Successfully deleted user&#39;})        })    })//  REGISER//  ===============================================// prefix /apiapp.use(&#39;/restapi&#39;, router)// START// ================================================app.listen(port)console.log(&#39;Server upp on port&#39;, port)modules/user.js // grab the things we need var mongoose = require(&#39;mongoose&#39;); // create a schema var userSchema = new mongoose.Schema({   name: String,   email: { type: String, required: true, unique: true },   password: { type: String, required: true },   admin: Boolean,   location: String,   meta: {     age: Number,     website: String   },   created_at: Date,   updated_at: Date }); // make this available to our users in our Node applications module.exports = mongoose.model(&#39;User&#39;, userSchema);",
      "url": " /2016/node-restful-api-with-express-4/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-screen": {
      "title": "Screen",
      "content"	 : "Installsudo apt-get updatesudo apt-get install screenCreatescreen -S &quot;{name}&quot;Listscreen –rDetachCtrl + A then DRe-attachscreen -r &quot;{name}&quot;KillexitWhen on screen,or when not on screen:screen -X -S [session # you want to kill] quit",
      "url": " /2016/screen/",
      "author": "",
      "categories": "Linux"
    }
    ,
  

    "2016-stream-internet-radio-station": {
      "title": "Stream Internet Radio Station",
      "content"	 : "This article covers the steps in setting up an internet radio station on a debian system.apt-get updateapt-get upgradeapt-get install apt-get install vim gcc make zip build-essential pkg-config libxml2-dev icecast2 ezstreamsudo suwget http://downloads.xiph.org/releases/ogg/libogg-1.3.1.tar.gztar xf libogg-1.3.1.tar.gzcd libogg-1.3.1/./configuremake &amp;amp;&amp;amp; make installwget http://download.xiph.org/releases/vorbis/libvorbis-1.3.3.tar.gztar xf libvorbis-1.3.3.tar.gzcd libvorbis-1.3.3./configuremake &amp;amp;&amp;amp; make installwget http://downloads.xiph.org/releases/libshout/libshout-2.3.1.tar.gztar xf libshout-2.3.1.tar.gzcd libshout-2.3.1./configuremake &amp;amp;&amp;amp; make installwget http://downloads.xiph.org/releases/ezstream/ezstream-0.5.6.tar.gztar xf ezstream-0.5.6.tar.gzcd ezstream-0.5.6./configuremake &amp;amp;&amp;amp; make installmkdir ~/mp3cd mp3vim playlist.m3u // add files with pathsudo cp /usr/share/doc/ezstream/examples/ezstream_mp3.xml ~/mp3/ezstream_mp3.xmlsudo vim /root/ezstream_mp3.xml // edit the xml file for your purpssudo chmod 644 ezstream_mp3.xmlsudo screen -S &quot;stream&quot;ezstream -c ezstream_mp3.xml",
      "url": " /2016/stream-internet-radio-station/",
      "author": "",
      "categories": "Linux"
    }
    ,
  

    "2016-html-to-pdf-from-external-source": {
      "title": "HTML to PDF from external source",
      "content"	 : "Install$ npm install i -S html-pdf requestifyScriptvar pdf         = require(&#39;html-pdf&#39;),    requestify = require(&#39;requestify&#39;),    externalURL = {external URL}requestify.get(externalURL).then(function(res) {    console.log(&#39;generating...&#39;)    pdf.create(res.body, {format: &#39;letter&#39;, &#39;base&#39;:&#39;http://pathtoCSS&#39;} ).toFile(&#39;./gens/generated.pdf&#39;,function (err, res) {        if (err) return console.log(err)        console.log(&#39;done!&#39;)    })})Run$ node Script.js",
      "url": " /2016/html-to-pdf-from-external-source/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-react-boilerplate": {
      "title": "React - Boilerplate",
      "content"	 : "In this article we are going to explore how to setup a React environment with Webpack and Reload.This improves resource management compared to the vary basic approach discussed in Simple Code Example.Make$ mkdir react-boilerplate$ cd react-boilerplateModules$ npm init$ npm install -g webpack@1.12.13$ npm install --save react@0.14.7 react-dom@0.14.7 express$ npm install --save-dev babel-core@6.5.1 babel-loader@6.2.2 babel-preset-es2015@6.5.0 babel-preset-react@6.5.0 babel-preset-stage-0@6.22.0Files$ mkdir public app app/components$ touch public/index.html app/entry.jsx webpack.config.js server.js./server.jsvar express = require(&#39;express&#39;),    app     = express()app.use(express.static(&#39;public&#39;))app.listen(4000, function(){    console.log(&#39;Express server is up on port: 4000&#39;)})./webpack.config.jsmodule.exports = {    entry: &#39;./app/entry.jsx&#39;,    output: {        path: __dirname,        filename: &#39;./public/bundle.js&#39;    },    resolve: {        root: __dirname,        alias: {        },        extensions: [&#39;&#39;,&#39;.js&#39;,&#39;.jsx&#39;]    },    module: {        loaders: [            {                loader: &#39;babel-loader&#39;,                query: {                    presets: [&#39;react&#39;,&#39;es2015&#39;,&#39;stage-0&#39;]                },                test: /.jsx?$/,                exclude: /(node_modules|bower_components)/            }        ]    }}./public/index.html&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;meta charset=utf-8&amp;gt; &amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;    &amp;lt;div id=app&amp;gt;&amp;lt;/div&amp;gt;    &amp;lt;script src=/js/bundle.js&amp;gt;&amp;lt;/script&amp;gt;./app/entry.jsxvar React       = require(&#39;react&#39;),    ReactDOM    = require(&#39;react-dom&#39;)ReactDOM.render(    &amp;lt;h1&amp;gt;React - Boilerpate&amp;lt;/h1&amp;gt;,        document.getElementById(&#39;app&#39;))Run:webpack -wnew terminal window:node server.js",
      "url": " /2016/react-boilerplate/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2016-react-delayed-rendering-of-component": {
      "title": "React- Delayed rendering of component",
      "content"	 : "By giving the children a “wait” prop, the component if hidden for the duration that was passed down from the parent.By setting the default state to hidden, React will render the component, but it won’t be visible.Then, you can set up componentWillMount to call a function to show it after the duration that was passed via props.The component:var Hidden = React.createClass({    getInitialState : function () {        return({hidden : &quot;hidden&quot;});    },    componentWillMount : function () {        var that = this;        setTimeout(function() {            that.show();        }, that.props.wait);    },    show : function () {        this.setState({hidden : &quot;&quot;});    },    render : function () {        return (            &amp;lt;div className={this.state.hidden}&amp;gt;                &amp;lt;p&amp;gt;Hidden&amp;lt;/p&amp;gt;            &amp;lt;/div&amp;gt;        )    }});The Parent:var Parent = React.createClass({    render : function () {        return (            &amp;lt;div className=&quot;parent&quot;&amp;gt;                &amp;lt;p&amp;gt;Parent&amp;lt;/p&amp;gt;                &amp;lt;div className=&quot;child-list&quot;&amp;gt;                    &amp;lt;Child wait={1000} /&amp;gt;                    &amp;lt;Child wait={3000} /&amp;gt;                    &amp;lt;Child wait={5000} /&amp;gt;                &amp;lt;/div&amp;gt;            &amp;lt;/div&amp;gt;        )    }});",
      "url": " /2016/react-delayed-rendering-of-component/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2016-react-simple-code-example": {
      "title": "React - Simple Code Example",
      "content"	 : "This article shows you the source code needed to create your vary first, basic, react app.Note: that this project is only good for you to try and use to understand a little about react. You should head over to React - Boilerplate for a real world application.html:&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=en&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=utf-8&amp;gt;&amp;lt;link rel=stylesheet href=cli.css&amp;gt;&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react-dom.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div id=app&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;script type=text/babel src=app.jsx&amp;gt;&amp;lt;/script&amp;gt;app.jsx:var Output = React.createClass({    render: function(){        return (            &amp;lt;section&amp;gt;                &amp;lt;span&amp;gt;{this.props.output}&amp;lt;/span&amp;gt;            &amp;lt;/section&amp;gt;        )    }})var Input = React.createClass({    submit: function(e){        e.preventDefault()        var state = {}        if (this.refs.input.value.length &amp;gt; 0) {            state.output  = this.refs.input.value            this.refs.input.value = &#39;&#39;        }        this.props.updateState(state)    },    render: function(){        return (            &amp;lt;section&amp;gt;                &amp;lt;form onSubmit={this.submit}&amp;gt; &amp;lt;input type=&quot;text&quot; ref=&quot;input&quot; autoFocus /&amp;gt; &amp;lt;/form&amp;gt;            &amp;lt;/section&amp;gt;        )    }})var CLI = React.createClass({    getDefaultProps: function(){        return {            output: &#39;&#39;,        }    },    getInitialState: function(){        return {            output: this.props.output        }    },    updateState : function(updates) {        this.setState(updates)    },    render: function() {        return (            &amp;lt;div&amp;gt;                &amp;lt;Output output={this.state.output}/&amp;gt;                &amp;lt;Input updateState={this.updateState}/&amp;gt;            &amp;lt;/div&amp;gt;        )    }})ReactDOM.render(&amp;lt;CLI/&amp;gt;,document.getElementById(&#39;app&#39;))server.js:var express = require(&#39;express&#39;),    app     = express()app.use(express.static(&#39;public&#39;))app.listen(4000, function(){    console.log(&#39;Express server is up on port: 4000&#39;)})",
      "url": " /2016/react-simple-code-example/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2016-javascript-get-images-programmatically": {
      "title": "JavaScript - Get images programmatically",
      "content"	 : "var img = new Image();img.onload = function() {  alert(this.width + &#39;x&#39; + this.height);}img.src = &#39;{path to image}&#39;;",
      "url": " /2016/javascript-get-images-programmatically/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-jekyll-integrating-webpack-react": {
      "title": "Jekyll - Integrating Webpack &amp; React",
      "content"	 : "This article guides you on the steps to create a basic jekyll-webpack integration that you can use to get React working with Jekyll.EnvironmentNode:$ sudo install npm -gWebpack:$ npm install webpack -gJekyll:$ gem install jekyll -gStructureOriginal:.├── _config.yml├── _includes│ ├── …├── _layouts│ ├── default.html│ ├── page.html│ └── post.html├── _posts│ ├── …├── _sass│ ├── _base.scss│ ├── _layout.scss│ └── _syntax-highlighting.scss├── about.md├── css│ └── main.scss├── feed.xml└── index.htmlNew.├── _config.yml├── package.json├── public│ ├── …├── source│ ├── _includes│ │ ├── …│ ├── _layouts│ │ ├── default.html│ │ ├── page.html│ │ └── post.html│ ├── _posts│ │ ├── …│ ├── _sass│ │ ├── …│ ├── about.md│ ├── assets│ │ ├── css│ │ ├── images│ │ └── javascripts│ │ └── bundle.js│ ├── feed.xml│ └── index.html├── webpack│ ├── entry.js│ └── components│ └── …└── webpack.config.jsConfiguration_config.yml:destination: publicsource: sourcePackagesInit:$ npm init in the rootWebpackCreate a webpack directory in the root project with an entry.js file, and, remove any Jekyll javascript files from your assets directory.Create a webpack.config.js in the root:module.exports = {  // webpack folder’s entry js — excluded from jekll’s build process.  entry: &#39;./webpack/entry.js&#39;,  output: {    // we’re going to put the generated file in the assets folder so jekyll will grab it.    path: &#39;src/assets/javascripts/&#39;,    filename: &#39;bundle.js&#39;  },  module: {  loaders: [    {      test: /.jsx?$/,      exclude: /(node_modules)/,      loader: &#39;babel&#39;, // ‘babel-loader’ is also a legal name to reference      query: {        presets: [&#39;react&#39;, &#39;es2015&#39;]      }    }    ]  }};IgnoreYou need to tell both Github and Jekyll to ignore node_modules/..gitignore:.sass-cache.jekyll-metadatapublicsrc/assets/bundle.jsnode_modules_config.yml:exclude: [&#39;node_modules&#39;]Include_layouts/default.html:&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt; … &amp;lt;body&amp;gt; …&amp;lt;script type=&quot;text/javascript&quot; src=&quot;/assets/javascripts/bundle.js&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;Dependencies$ npm install webpack --save-dev$ npm install babel-core --save-dev$ npm install babel-loader --save-dev$ npm install babel-preset-es2015 --save-dev$ npm install babel-preset-react --save-dev$ npm install react --save-dev$ npm install react-addons-update --save-dev$ npm install react-dom --save-devComponentHello.js:import React, { Component } from &#39;react&#39;;class Hello extends Component { render() { return ( &amp;lt;div&amp;gt;Hey, y’all!!&amp;lt;/div&amp;gt; ) }}export default Helloentry.jsimport React, { Component } from &#39;react&#39;;import {render} from &#39;react-dom&#39;;import Hello from &#39;./components/Hello&#39;;class App extends Component { render() { return ( &amp;lt;Hello /&amp;gt; ) }}Run$ webpack$ jekyll serve",
      "url": " /2016/jekyll-integrating-webpack-react/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-javascript-integer-literals": {
      "title": "Javascript - Integer Literals",
      "content"	 : "A literal in programming is simply values you find in source code.Integers can be expressed in:  decimal (base 10)  hexadecimal (base 16)  octal (base 8)  binary (base 2).Decimal integer literal consists of a sequence of digits without a leading 0 (zero).031000000Octal is indicated by leading 0 (zero) on an integer literal, or leading 0o (or 0O). Octal integers can include only the digits 0-7.0377// 3*64 + 7*8 + 7 = 255 (base-10)Hexadecimal is indicated by leading 0x (or 0X). Hexadecimal integers can include digits (0-9) and the letters a-f and A-F.0xff  // 15*16 + 15 = 255 (base-10)Leading 0b (or 0B) indicates binary. Binary integers can include digits only 0 and 1.Since somer implementation support octal literals and some do not, you should never write an integer literal with a leading 0. In EXMAScript 5, octals are explicitly forbidden.",
      "url": " /2016/javascript-integer-literals/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-javascript-numbers": {
      "title": "Javascript - Numbers",
      "content"	 : "Unlike many languages, JS does not make an distinction between integer values and floating point values.When a number appear directly in a JS program, it is called a numeric literal. JS supports numeric literals in several formats. Numeric literal can be proceded by a minus sign to make it negative. Technically, however - is the unary negation operator and is not part of the numeric syntax.All numbers are represented as floating-point values. JS represents numbers using the 64-bit floating-point format, the same format as “double” in many other languages. This format allows you to represent all integers between -9007199254740992(-2^53) and 9007199354740992(2^53), if you use integers bigger than this you might loos presicion in the trailing digits.Watch out for things like:0.1 + 0.2 == 0.30000000000000004In practice, integer values are treated as 32-bit ints, and some implementations even store it that way until they are asked to perform an instruction that’s valid on a Number but not on a 32-bit integer.This can be important for bit-wise operations and array indexing, since thay are performed with 32-bit integers.The standard arithmetic operators are supported, including addition, subtraction, modulus (or remainder) arithmetic, and so forth. There’s also a built-in object called Math that provides advanced mathematical functions and constants:Math.sin(3.5);var circumference = Math.PI * (r + r);You can convert a string to an integer using the built-in parseInt() function. This takes the base for the conversion as an optional second argument, which you should always provide:parseInt(&quot;123&quot;, 10); // 123parseInt(&quot;010&quot;, 10); // 10In older browsers, strings beginning with a “0” are assumed to be in octal (radix 8), but this hasn’t been the case since 2013 or so. Unless you’re certain of your string format, you can get surprising results on those older browsers:parseInt(&quot;010&quot;);  //  8parseInt(&quot;0x10&quot;); // 16Here, we see the parseInt() function treat the first string as octal due to the leading 0, and the second string as hexadecimal due to the leading “0x”. The hexadecimal notation is still in place; only octal has been removed.If you want to convert a binary number to an integer, just change the base:parseInt(&quot;11&quot;, 2); // 3Similarly, you can parse floating point numbers using the built-in parseFloat() function. Unlike its parseInt() cousin, parseFloat() always uses base 10.You can also use the unary + operator to convert values to numbers:+ &quot;42&quot;;   // 42+ &quot;010&quot;;  // 10+ &quot;0x10&quot;; // 16A special value called NaN (short for “Not a Number”) is returned if the string is non-numeric:parseInt(&quot;hello&quot;, 10); // NaNNaN is toxic: if you provide it as an input to any mathematical operation the result will also be NaN:NaN + 5; // NaNYou can test for NaN using the built-in isNaN() function:isNaN(NaN); // trueJavaScript also has the special values Infinity and -Infinity:1 / 0; //  Infinity-1 / 0; // -InfinityYou can test for Infinity, -Infinity and NaN values using the built-in isFinite() function:isFinite(1/0); // falseisFinite(-Infinity); // falseisFinite(NaN); // falseThe parseInt() and parseFloat() functions parse a string until they reach a character that isn’t valid for the specified number format, then return the number parsed up to that point. However the “+” operator simply converts the string to NaN if there is an invalid character contained within it. Just try parsing the string “10.2abc” with each method by yourself in the console and you’ll understand the differences better.",
      "url": " /2016/javascript-numbers/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-react-jsx": {
      "title": "React - JavaScriptX introduction",
      "content"	 : "JSX is an XML like syntax extension but without any defined semantics. it has a familiar syntax for designers and non-programmers, and it can be used directly from a JS file.var App = React.createClass({  render: function(){    return (        &amp;lt;div&amp;gt;Hello JSX&amp;lt;/div&amp;gt;    )  }})In order for this to work you must make use of th JSX transformer library.",
      "url": " /2016/react-jsx/",
      "author": "",
      "categories": ""
    }
    ,
  

    "2016-react-first-component": {
      "title": "React - First Component",
      "content"	 : "The entry point to the ReactJS library is the React object and is made available to us in the global JavaScript namespace.  Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. React.Component is provided by React.(facebook.github.io, 2016)var App = React.createClass({    render:function(){        return(            React.createElement(&#39;div&#39;,null,&#39;First Component&#39;)        )    }})React.render(React.createElement(App), document.body)React.createClass creates a component with the given specification. The component must implement the render method that returns a single child element.React will take care of calling the render method of the component to generate the HTML.Even if the render method needs to return a single child, that single child can have an arbitrarily deep structure to contain full-fledged HTML page parts.Here, we are making use of React.createElement to create our content.It’s a singleton method that allows us to create a div element with the content.React.createElement creates a ReactElement, which is an internal representation of the DOM element used by React.We are passing null as the second argument. This is used to pass and specify attributes for the element. Right now, we are leaving it as blank to create a simple div.The type of ReactElement can be either a valid HTML tag name like span, h1, pand so on. Or, it can be component created by React.createClass itself.Once done creating the component, it can be displayed using the React.render method. Here a new ReactElemtn is created for the App component that we have created and it is rendered into the HTML element body.This is called the mountNode, or mount point for our component and acts as the root node. Instead of passing document.body directly as a container for the component, any other DOM element can be passed.While constructing the first conponent, we also got an overview of React’stop-level API, that is, making use of React.createClass, React.createElement and React.render.",
      "url": " /2016/react-first-component/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2016-react": {
      "title": "React - Introduction",
      "content"	 : "  React is an open-source JavaScript library providing a view for data rendered as HTML. (Wikipedia, 2016)ReactJS can very well be de defined and used as the view in any of the MVC frameworks. It’s not opinionated about how it should be used. It creates abstract representations of views. It breaks down parts of the view in the Components.These components encompass both the logic to handle the display of view and the view itself. It can contain data that it uses to render the state of the app.To avoid complexity of interactions and subsequent render processing required, React does a full render of the application. It maintains a simple flow of work.React is founded on the idea that DOM manipulation is an expensive operation and should be minimized. It also recognizes that optimizing DOM manipulation by hand will result in a lot of boilerplate code, which is error-prone, boring, and repetitive.React solves this by giving the developer a virtual DOM to render to instead of the actual DOM. It  finds difference between the real DOM and virtual DOM and conducts the minimum number of DOM operations required to achieve the new state.React is also declarative. When the data changes, React conceptually hits the refresh button and knows to only update the changed parts.This simple flow of data, coupled with dead simple display logic, makes development with ReactJS straightforward and simple to understand.In its first-ever conference, React also announced the development of React Native. React Native allows the development of mobile applications using React. It transpiles React code to the native application code, such as Objective-C for iOS applications.",
      "url": " /2016/react/",
      "author": "",
      "categories": "React"
    }
    ,
  

    "2016-node-restful-api": {
      "title": "Node - REST API Mockup",
      "content"	 : "In this article we’ll build an REST API mock to use in development. It’s going to be  a step by step guide and I am not going to ramble on about the specifics. Instead its a short and to the point guide on how to get an API backend to use while working on your front-end code of choise.Create a directory:$ mkdir mock_apiNavigate to it:$ cd mock_apiRun npm init to setup our package.json (You can leave all the default settings, or change them as you see fit.)$npm initRun:$ npm install express  --saveCreata a server file server.jsvar express         = require(&quot;express&quot;),    app             = express()app.get(&#39;/movies&#39;,(req,res)=&amp;gt;{    var movies = [        {title : &#39;Suicide Squad&#39;, release: &#39;2016&#39;, score: 8, reviewer: &#39;Robert Smith&#39;, publication : &#39;The Daily Reviewer&#39;},        {title : &#39;Batman vs. Superman&#39;, release : &#39;2016&#39;, score: 6, reviewer: &#39;Chris Harris&#39;, publication : &#39;International Movie Critic&#39;},        {title : &#39;Captain America: Civil War&#39;, release: &#39;2016&#39;, score: 9, reviewer: &#39;Janet Garcia&#39;, publication : &#39;MoviesNow&#39;},        {title : &#39;Deadpool&#39;, release: &#39;2016&#39;, score: 9, reviewer: &#39;Andrew West&#39;, publication : &#39;MyNextReview&#39;},        {title : &#39;Avengers: Age of Ultron&#39;, release : &#39;2015&#39;, score: 7, reviewer: &#39;Mindy Lee&#39;, publication: &#39;Movies n&#39; Games&#39;},        {title : &#39;Ant-Man&#39;, release: &#39;2015&#39;, score: 8, reviewer: &#39;Martin Thomas&#39;, publication : &#39;TheOne&#39;},        {title : &#39;Guardians of the Galaxy&#39;, release : &#39;2014&#39;, score: 10, reviewer: &#39;Anthony Miller&#39;, publication : &#39;ComicBookHero.com&#39;},    ]    res.json(movies)})app.get(&#39;/reviewers&#39;,(req,res)=&amp;gt;{    var authors = [        {name : &#39;Robert Smith&#39;, publication : &#39;The Daily Reviewer&#39;, avatar: &#39;https://s3.amazonaws.com/uifaces/faces/twitter/angelcolberg/128.jpg&#39;},        {name: &#39;Chris Harris&#39;, publication : &#39;International Movie Critic&#39;, avatar: &#39;https://s3.amazonaws.com/uifaces/faces/twitter/bungiwan/128.jpg&#39;},        {name: &#39;Janet Garcia&#39;, publication : &#39;MoviesNow&#39;, avatar: &#39;https://s3.amazonaws.com/uifaces/faces/twitter/grrr_nl/128.jpg&#39;},        {name: &#39;Andrew West&#39;, publication : &#39;MyNextReview&#39;, avatar: &#39;https://s3.amazonaws.com/uifaces/faces/twitter/d00maz/128.jpg&#39;},        {name: &#39;Mindy Lee&#39;, publication: &#39;Movies n&#39; Games&#39;, avatar: &#39;https://s3.amazonaws.com/uifaces/faces/twitter/laurengray/128.jpg&#39;},        {name: &#39;Martin Thomas&#39;, publication : &#39;TheOne&#39;, avatar : &#39;https://s3.amazonaws.com/uifaces/faces/twitter/karsh/128.jpg&#39;},        {name: &#39;Anthony Miller&#39;, publication : &#39;ComicBookHero.com&#39;, avatar : &#39;https://s3.amazonaws.com/uifaces/faces/twitter/9lessons/128.jpg&#39;}    ]    res.json(authors)})app.get(&#39;/publications&#39;,(req,res)=&amp;gt;{    var publications = [        {name : &#39;The Daily Reviewer&#39;, avatar: &#39;glyphicon-eye-open&#39;},        {name : &#39;International Movie Critic&#39;, avatar: &#39;glyphicon-fire&#39;},        {name : &#39;MoviesNow&#39;, avatar: &#39;glyphicon-time&#39;},        {name : &#39;MyNextReview&#39;, avatar: &#39;glyphicon-record&#39;},        {name : &#39;Movies n&#39; Games&#39;, avatar: &#39;glyphicon-heart-empty&#39;},        {name : &#39;TheOne&#39;, avatar : &#39;glyphicon-globe&#39;},        {name : &#39;ComicBookHero.com&#39;, avatar : &#39;glyphicon-flash&#39;}    ];    res.json(publications)})app.get(&#39;/pending&#39;,(req,res)=&amp;gt;{    var pending = [        {title : &#39;Superman: Homecoming&#39;, release: &#39;2017&#39;, score: 10, reviewer: &#39;Chris Harris&#39;, publication: &#39;International Movie Critic&#39;},        {title : &#39;Wonder Woman&#39;, release: &#39;2017&#39;, score: 8, reviewer: &#39;Martin Thomas&#39;, publication : &#39;TheOne&#39;},        {title : &#39;Doctor Strange&#39;, release : &#39;2016&#39;, score: 7, reviewer: &#39;Anthony Miller&#39;, publication : &#39;ComicBookHero.com&#39;}    ]    res.json(pending)})app.listen(8080)Run:node serverNavigating:localhost:8080/*",
      "url": " /2016/node-restful-api/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-node-js-blocking-vs-non-blocking": {
      "title": "Node.js - Blocking vs Non-Blocking",
      "content"	 : "This article covers the difference between blocking and non-blocking calls in Node.js. The original article can be found at https://github.com/nodejs/node/blob/master/doc/topics/blocking-vs-non-blocking.md. Here I am attempting to mimplify and clarify the article.BlockingBlocking is when the execution of additional JavaScript in the Node.js process must wait until a non-JavaScript operation completes, this happens because the event loop is unable to continue running JavaScript while a blocking operation is occurring.In Node.js, JavaScript that exhibits poor performance due to being CPU intensive, rather than waiting on a non-JavaScript operation, such as I/O, isn’t typically referred to as blocking.Synchronous methods in the Node.js standard library that use libuv are the most commonly used blocking operations. Native modules may also have blocking methods.All of the I/O methods in the Node.js standard library provide asynchronous versions, which are non-blocking, and accept callback functions. Some methods also have blocking counterparts, which have names that end with Sync.Comparing CodeBlocking methods execute synchronously and non-blocking methods execute asynchronously.Using the File System module as an example, this is a synchronous file read:const fs = require(&#39;fs&#39;);const data = fs.readFileSync(&#39;/file.md&#39;); // blocks here until file is readAnd here is an equivalent asynchronous example:const fs = require(&#39;fs&#39;);fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {  if (err) throw err;});The first example appears simpler than the second but has the disadvantage of the second line blocking the execution of any additional JavaScript until the entire file is read. Note that in the synchronous version if an error is thrown it will need to be caught or the process will crash. In the asynchronous version, it is up to the author to decide whether an error should throw as shown.Let’s expand our example a little bit:const fs = require(&#39;fs&#39;);const data = fs.readFileSync(&#39;/file.md&#39;); // blocks here until file is readconsole.log(data);// moreWork(); will run after console.logAnd here is a similar, but not equivalent asynchronous example:const fs = require(&#39;fs&#39;);fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {  if (err) throw err;  console.log(data);});// moreWork(); will run before console.logIn the first example above, console.log will be called before moreWork(). In the second example fs.readFile() is non-blocking so JavaScript execution can continue and moreWork() will be called first. The ability to run moreWork() without waiting for the file read to complete is a key design choice that allows for higher throughput.Concurrency and ThroughputJavaScript execution in Node.js is single threaded, so concurrency refers to the event loop’s capacity to execute JavaScript callback functions after completing other work. Any code that is expected to run in a concurrent manner must allow the event loop to continue running as non-JavaScript operations, like I/O, are occurring.As an example, let’s consider a case where each request to a web server takes 50ms to complete and 45ms of that 50ms is database I/O that can be done asynchronously. Choosing non-blocking asynchronous operations frees up that 45ms per request to handle other requests. This is a significant difference in capacity just by choosing to use non-blocking methods instead of blocking methods.The event loop is different than models in many other languages where additional threads may be created to handle concurrent work.Dangers of Mixing Blocking and Non-Blocking CodeThere are some patterns that should be avoided when dealing with I/O. Let’s look at an example:const fs = require(&#39;fs&#39;);fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {  if (err) throw err;  console.log(data);});fs.unlinkSync(&#39;/file.md&#39;);In the above example, fs.unlinkSync() is likely to be run before fs.readFile(), which would delete file.md before it is actually read. A better way to write this that is completely non-blocking and guaranteed to execute in the correct order is:const fs = require(&#39;fs&#39;);fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {  if (err) throw err;  console.log(data);  fs.unlink(&#39;/file.md&#39;, (err) =&amp;gt; {    if (err) throw err;  });});The above places a non-blocking call to fs.unlink() within the callback of fs.readFile() which guarantees the correct order of operations.",
      "url": " /2016/node-js-blocking-vs-non-blocking/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-node-js-npm": {
      "title": "Node.js - NPM",
      "content"	 : "npm is the default package manager for the JavaScript runtime environment Node.js and it comes bundle with Node.js.It provides two main functionalities:  Online repositories for node.js packages/modules  Command line utility to install Node.js packages, do version management and dependency management of Node.js packages.NPM installs any dependency in node_modules directory lying in the folder where you execute the command. Locally deployed packages are accessible via require() method. For example, when we installed a module, it createa node_modules directory in the current directory where it installed the  module.Globally installed packages/dependencies are stored in system directory. Such dependencies can be used in CLI (Command Line Interface) function of any node.js but cannot be imported using require() in Node application directly.Verify version:$ npm --versionUpdate:$ sudo npm install npm -gInstalling Modules:$ npm install &amp;lt;Module Name&amp;gt;Uninstall:$ npm uninstall moduleUpdate:$ npm update moduleList all locally installed modules:$ npm lsList all globally installed modules:$ npm ls -gSearch:$ npm search modulepackage.jsonThe best way to manage locally installed npm packages is to create a package.json file. These files is automatic created and populated when you install packages. However you can also manually re-configure them.A package.json file affords you a lot of great things:  It serves as documentation for what packages your project depends on.  It allows you to specify the versions of a package that your project can use using semantic versioning rules.  Makes your build reproducable which means that its way easier to share with other developers.As a bare minimum, a package.json must have:  “name”: all lowercase, one word, no spaces, dashes and underscores allowed  “version”: in the form of x.x.x  follows (semver spec)[https://docs.npmjs.com/getting-started/semantic-versioning]{  &quot;name&quot;: &quot;my-awesome-package&quot;,  &quot;version&quot;: &quot;1.0.0&quot;}Create a ModuleCreating a module requires package.json to be generated.$ npm initYou will need to provide all the required information about your module. You can take help from the above-mentioned package.json file to understand the meanings of various information demanded. Once package.json is generated, use the following command to register yourself with NPM repository site using a valid email address:$ npm adduserPublish:npm publish",
      "url": " /2016/node-js-npm/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-javascript-optional-semicolons": {
      "title": "JavaScript - Optional Semicolons",
      "content"	 : "Like many programming languages, JS uses semicolon to separate statements.In JS you can usually omitt the semicolon between two statements if those are written in separate lines. You can also omitt at the end of a program or if the next token in the program is a closing curly brace. Many programmers always emitt the semicolan, but some omitts them when ever posible.In general, if a statement begings with (, [, /, +, or -, there is a chance that if could be interpreted as a continuation of the statent.Statements that begin with /,+ and - are quite rare in practice, but ( and [ are not uncommon. Some programmers like put protective semicolons in front of these statements.Consider the following code. Since the two statment apear on separate lines, the first semicolon could be omitted:a = 3;b = 4;Written as followed, you must however have the first semicolon.a = 3; b = 4;JS does not treat every line break as a semicolon: it usually treats line breaks as semicolon only if it can’t parse the code without the semicolons.JS threats a line break as a semicolon if the next monospace character cannot be interpreted as a continuation of the current statement. Consider the following:var a a=3console.log(a)JS interprets this code like this:var a; a = 3; console.log(a);JS does treat the first line break as a semicolon as it cannot pase the code “var a” without a semicolon.The second a could stand alone as the statement a; but it can continue parsing the longer statement “a = 3”. These statment terminating can leed to some suprising cases. This code looks like two separate statements separated with a new line.var y = x + f(a+b).toString()but the paranteses on the second line of code can be interpreted as a function invocation of f.var y = x + f(a+b).toString();There are two exceptins to the genereal rule that JS interprets line breaks as semicolons when it cannot parse the secont line as a continuation of the statement on the first line. The first involves return, break and continue statements. These statement often stand alone, but thay are sometimes followed by an identifier or expression. If a line break appears efter any of these words, JS will always interpret that line break as a semicolon:returntrue;JS will assume you mean:return; true;However you probably mean:return true;This means you must not insert a line break between return, break or continue and the expression that follows the keyword.The second exception involves the ++ and – operators. These operators can be prefixed operators that appear before an expression or postfix that appear after an expression.If you want to use these operators, you must insert them on the same line as the expression, otherwise the line break will be treated as a semicolon. They will otherwise be treated as a prefix:x++yIs parsed as:x;++Y;and not as:x++; y;",
      "url": " /2016/javascript-optional-semicolons/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-javascript-reserved-words": {
      "title": "Javascript - Reserved Words",
      "content"	 : "JS reservs a number of identifiers as the keyword of the language itself.You cannot use these words as identifierss in your programsKeep in mind that JS implementation may define other global variable and functions, and each specific JS embedding (client-side, server-side, etc) will have its own list of global properties.                                                                  break      delete      function      return      typeof                     case      do      if      switch      var                     catch      else      in      this      var                     continue      false      instansof      throw      while                     debugger      finally      new      true      with                     default      for      null      try                    JS also reserves certain keywords that are not currently used by the language but wich might be used in future versions. ECMAScrips 5 reservs the following:                                                                  class      const      enum      export      extends                     inport      super                                  In addition, these words, wich are legal in ordanary JS, are reserved in strict mode:                                                                  implements      let      private      public      yield                     interface      package      protected      static                    Srict mode also imposes restriction on the ose of these identifiers.Thay are not reserved, but that are not allowed as variables, functinos, or parameter names:                                                                  arguments      eval                                  ECMAScript 3 reservs all the keywords of the java language, and although this has been relaxed in ECMAScript 5, you should still avoid them if you plan to use ECMA3:                                                           abstract      double      goto      native      static              boolean      enum      implements      package      super              byte      export      import      private      synchronized              char      extends      int      protected      throuws              class      final      interface      public      transient              const      float      lang      short      volatile      JS predefines a number of global variables and functions, and you should avoid using their names for your variables and functions:                                                           rguments      encodeURI      Infinify      number      regEx              Array      encodeURIComponent      ifFinite      object      String              Boolean      Error      isNaN      parseFlot      SyntaxError              Date      eval      JSON      parsInt      TypeError              decodeURI      EvalError      Math      RangeError      undefined              decodeURIComponent      Function      NaN      ReferenceError      URIErrori      ",
      "url": " /2016/javascript-reserved-words/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-javascript-identifiers-and-reserved-words": {
      "title": "JavaScript - Identifiers and Reserved Words",
      "content"	 : "Identifiers are used to name variables and functions and to provide labels for certain loops.An identifier can consist of a letter, underscore, number or a $ sign. Numbers are not allowed as the first character so that JS can easily distinguish them from numbers.For poprtablility and ease of editing, it is common to use only ASCII letters and digits in identifiers.JS allows identifiers to contain letters and digits from the entire Unicode char set. This allows programmers to use variable names from non-English language and also to use matimatical symbols.",
      "url": " /2016/javascript-identifiers-and-reserved-words/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-javascript-literals": {
      "title": "JavaScript - Literals",
      "content"	 : "A literal is a data value that appears directly in a program.12// The number twelve1.2// The number one point two&quot;Hello World&quot;// A string of text&#39;Hi&#39;// Another stringtrue// A Boolean valuefalse// the other Boolean value/javascript/gi// A &quot;regular expression literal (for pattern matching)null// Absence of an object// Complete details on numeric and strings literals appears in chap 3. // regular expressions in chap 10// More complex can serve as array and object literals{x:1,y:2}// An object initializer[1,2,3,4]// an array initializer",
      "url": " /2016/javascript-literals/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-javascript-comments": {
      "title": "JavaScript - Comments",
      "content"	 : "JS Supports two styles of comments.Any text between a // and the end of a line is treated as a comment and is ignored.Any text between /* */ is also treated as a comment; these comments may span multiple lines, but may not be nested.// This is a single line comment/* this  * is a  * multiline comment area. */",
      "url": " /2016/javascript-comments/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-javascript-normalization": {
      "title": "JavaScript - Normalization",
      "content"	 : "Unicode allows more than one way of encoding the same character.The string “é” can be encoded as tht single Unicode character u0oE9 or as the regular ASCII e followed by the accent mark u0301.The two encoding may look exactly the same in a text editor, but thay have different binary encoding and are considered different by the computer. Unicode standard defines the prefered encoding for all characters and specifies a normalization procedure to convert text to a cronical form suitable for comparison.JS assumes that the source code it interpreting has already been normalized and makes no attempt to normalize identifiers, strings, or regular expressions itself.",
      "url": " /2016/javascript-normalization/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-javascript-unicode-escape-sequences": {
      "title": "JavaScript - Unicode Escape Sequences",
      "content"	 : "Some computer hardware and software can not display or input the full set of Unicode.To support programmers using this older technology, JS defines special sequence of six ASCII characters to represent any 16 bit Unicode codepoint. These Unicode escapes begin with u and are followed by exactly four hexadecimal digits.Unicode escapes may appear in JS string literals, regular expressions literals, and in identifiers (but not in language keywords).&quot;cafe&quot; === &quot;cafu00e9&quot;// =&amp;gt; true",
      "url": " /2016/javascript-unicode-escape-sequences/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-javascript-whitespace-line-breaks-and-format-control-characters": {
      "title": "JavaScript - Whitespace Line breaks and Format control characters",
      "content"	 : "JS ignores spaces that appear between tokens in programs. For the most part JS also ignores line breaks.In addition to the regular space character (u0020) JS also recognizes tab (u0009), and any other Unicode cat Zs as whitespace. JS recognizes the following characters as line terminators:  line feed (u000A)  carriage return (u000D)  line separator (u2028)  paragraph separator (u2029)A Carrage return and line feed sequence is treated as a single line terminator. Unicode format control (cat Cf e.g. RIGHT-TO-LEFT) control the visual presentation of the text thay occur in.Thay are important for the proper display of some non-English languages and are allowed in JS comments, string literals, and regular expressions literals, but not in the identifiers.Special case for ZERO WIDTH JOINER and ZERO WIDTH NON-JOINERS are allowed for identifiers, but not as the first character.",
      "url": " /2016/JavaScript-Whitespace-Line-breaks-and-Format-control-characters/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-node-js-repl-read-eval-print-loop": {
      "title": "Node.js REPL (Read–eval–print loop)",
      "content"	 : "A read–eval–print loop (REPL), also known as an interactive toplevel or language shell, is a simple, interactive computer programming environment that takes single user inputs (i.e. single expressions), evaluates them, and returns the result to the user.A program written in a REPL environment is executed piecewise. The term is most usually used to refer to programming interfaces similar to the classic Lisp machine interactive environment. Common examples include command line shells and similar environments for programming languages, and is particularly characteristic of scripting languages.Node.js or Node comes bundled with a REPL environment. It performs the following tasks:  Read: Reads user’s input, parses the input into JavaScript data-structure, and stores in memory.  Eval: Takes and evaluates the data structure.  Print: Prints the result.  Loop: Loops the above command until the user presses ctrl-c twice.The REPL feature of Node is very useful in experimenting with Node.js codes and to debug JavaScript codes.REPL can be started by simply running node on shell/console without any arguments as follows:$ nodeYou will see the REPL Command prompt &amp;gt; where you can type any Node.js command:$ node&amp;gt;Let’s try a simple mathematics at the Node.js REPL command prompt:$ node&amp;gt; 1 + 34&amp;gt; 1 + ( 2 * 3 ) - 43&amp;gt;You can make use variables to store values and print later like any conventional script. If var keyword is not used, then the value is stored in the variable and printed. Whereas if var keyword is used, then the value is stored but not printed. You can print variables using console.log():$ node&amp;gt; x = 1010&amp;gt; var y = 10undefined&amp;gt; x + y20&amp;gt; console.log(&quot;Hello World&quot;)Hello WorkdundefinedNode REPL supports multiline expression similar to JavaScript. Let’s check the following do-while loop in action:$ node&amp;gt; var x = 0undefined&amp;gt; do {... x++;... console.log(&quot;x: &quot; + x);... } while ( x &amp;lt; 5 );x: 1x: 2x: 3x: 4x: 5undefined&amp;gt;… comes automatically when you press Enter after the opening bracket. Node automatically checks the continuity of expressions.You can use underscore (_) to get the last result:$ node&amp;gt; var x = 10undefined&amp;gt; var y = 20undefined&amp;gt; x + y30&amp;gt; var sum = _undefined&amp;gt; console.log(sum)30undefined&amp;gt;REPL Commands:  ctrl + c: terminate the current command.  ctrl + c twice: terminate the Node REPL.  ctrl + d: terminate the Node REPL.  Up/Down Keys: see command history and modify previous commands.  tab Keys: list of current commands.  .help: list of all commands.  .break: exit from multiline expression.  .clear: exit from multiline expression.  .save filename: save the current Node REPL session to a file.  .load filename: load file content in current Node REPL session.",
      "url": " /2016/node-js-repl-read-eval-print-loop/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-node-version-manager": {
      "title": "Node Version Manager ",
      "content"	 : "InstallationFirst you’ll need to make sure your system has a c++ compiler. For OS X, Xcode will work, for Ubuntu, the build-essential and libssl-dev packages work.On OS X, if you have/had a “system” node installed and want to install modules globally, keep in mind that:  When using nvm you do not need sudo to globally install a module with npm -g, so instead of doing sudo npm install -g grunt, do instead npm install -g grunt  If you have an ~/.npmrc file, make sure it does not contain any prefix settings.  Do not keep your previous “system” node install. This might cause version mismatches.To install or update nvm:curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bashThe script clones the nvm repository to ~/.nvm and adds the source line to your profile (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc).Note: On OS X, if you get nvm: command not found after running the install script, your system may not have a [.bash_profile file] where the command is set up. Simply create one with touch ~/.bash_profile and run the install script again.To verify that nvm has been installed, do:command -v nvmUsageInstall the latest release of node:nvm install nodeUse the installed version:nvm use nodeOr run it:nvm run node --versionOr, you can run any arbitrary command in a subshell with the desired version of node:nvm exec 4.2 node --versionGet the path to the executable to where it was installed:nvm which 5.0In place of a version pointer like “0.10” or “5.0” or “4.2.1”, you can use the following special default aliases with nvm install, nvm use, nvm run, nvm exec, nvm which, etc:  node: this installs the latest version of node  iojs: this installs the latest version of io.js  stable: this alias is deprecated, and only truly applies to node v0.12 and earlier. Currently, this is an alias for node.  unstable: this alias points to node v0.11 - the last “unstable” node release, since post-1.0, all node versions are stable. (in semver, versions communicate breakage, not stability).If you want to use the system-installed version of node, you can use the special default alias “system”:nvm use systemnvm run system --versionListing versions:nvm lsIf you want to see what versions are available to install:nvm ls-remoteTo restore your PATH, you can deactivate it:nvm deactivateTo set a default Node version to be used in any new shell, use the alias ‘default’:nvm alias default nodenvm use will not, by default, create a “current” symlink. Set $NVM_SYMLINK_CURRENT to “true” to enable this behavior, which is sometimes useful for IDEs. Note that using nvm in multiple shell tabs with this environment variable enabled can cause race conditions.",
      "url": " /2016/node-version-manager/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-node-js-hello-world-first-app": {
      "title": "Node.js - Hello World first app",
      "content"	 : "A Node.js application consists of the following three vital components:  Import required modules − Require directive to load Node modules.  Create server − A server which listen to client’s requests.  Read request and response − The server will read the HTTP request by a client.Import ModuleWe use the require directive to load the http module and store the returned HTTP instance into an http variable:const http = require(&quot;http&quot;);Create ServerWe call createServer() method to create a server instance. Pass it a anonymous function with request and response params and write a implementation that always return “Hello World”.Last we bind the server instans to a port using the listen() method.const    http = require(&quot;http&quot;),    hostname = &#39;127.0.0.1&#39;,    port = 3000,    server = http.createServer(function(req,res){        res.statusCode = 200        res.setHeader(&#39;Content-Type&#39;,&#39;text/plain&#39;)        res.end(&#39;Hello Worldn&#39;)    })server.listen(port, hostname, function(){    console.log(&#39;Sever running at http://&#39;+hostname+&#39;:&#39;+port)})Save the file as app.js and then execute the main.js to start the server as follows:$ node app.jsMake a request at http://127.0.0.1:8081/ in any browser.",
      "url": " /2016/node-js-hello-world-first-app/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-node-introduction": {
      "title": "Node Introduction",
      "content"	 : "Node.js is an open source, cross-platform runtime environment for developing server-side and networking applications.Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in Web applications with many input/output operations, as well as for real-time Web applicationsAalthough Node.js is not a JavaScript framework, many of its basic modules are written in JavaScript, and developers can write new modules in JavaScript. The runtime environment interprets JavaScript using Google’s V8 JavaScript engine.OverviewNode.js allows the creation of Web servers and networking tools using JavaScript.Node.js also have a collection of “modules” that handle various core functionality. Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams and other core functions. Node.js’s modules use an API designed to reduce the complexity of writing server applications.Node.js is primarily used to build network programs such as Web servers. The biggest difference between Node.js and other technologies is that most functions in other technologies block until completion (commands execute only after previous commands have completed), while functions in Node.js are designed to be non-blocking (commands execute in parallel, and use callbacks to signal completion or failure).Platform architectureNode.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task. Node.js was created because concurrency is difficult in many server-side programming languages, and often leads to poor performance. Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.Node.js was built on the Google V8 JavaScript engine since it was open-source under the BSD license, extremely fast, and proficient with internet fundamentals like HTTP, DNS, TCP. Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.Industry supportProgrammers have built thousands of open-source libraries for Node.js - most of them hosted on the npm website.The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There is an annual Node.js developer conference, called NodeConf. The open-source community has developed server frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails, Meteor, Derby, and many others.Modern desktop IDEs provide editing and debugging features specifically for Node.js applications.Technical detailsNode.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.ThreadingNode.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.The design of sharing a single thread between all the requests that uses the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. In order to accommodate the single-threaded event loop, Node.js utilizes the libuv library that in turn uses a fixed-sized threadpool that is responsible for some of the non-blocking asynchronous I/O operations.A downside of this single-threaded approach is that Node.js doesn’t allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster, StrongLoop Process Manager or pm2. However, developers can increase the default number of threads in the libuv threadpool; these threads are likely to be distributed across multiple cores by the server operating system.Execution of parallel tasks in Node.js is handled by a thread pool. The main thread-call, post tasks to the shared task queue, that then threads in the thread pool and executes.Inherently non-blocking system functions, like networking, translates to kernel-side non-blocking sockets.While inherently blocking system functions like file I/O run in a blocking way on its own thread.When a thread in the thread pool completes a task, it informs the main thread of this that in turn wakes up and execute the registered callback. Since callbacks are handled in serial on the main thread, long lasting computations and other CPU-bound tasks will freeze the entire event-loop until completion.V8V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008.Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems like Linux, Mac OS X, OSS on NonStop and Unix.The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.Package managementnpm is the pre-installed package manager for the Node.js server platform.It is used to install Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. npm is not to be confused with the CommonJS require() statement. It is not used to load code; instead, it is used to install code and manage code dependencies from the command line.Unified APINode.js can be combined with a browser, a document database (such as MongoDB or CouchDB) and JSON for a unified JavaScript development stack.With the adaptation of what were essentially server-side development patterns like MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.Event loopNode.js registers itself with the operating system so that it is notified when a connection is made, and the operating system will issue a callback.Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.In contrast to other event-driven servers, Node.js’s event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.",
      "url": " /2016/node-introduction/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-developing-a-rest-api-with-node-js": {
      "title": "Developing A REST API with Node.js",
      "content"	 : "This article will cover the directory structure, through the small design decisions made during development, and finally to the code itself.This article will display the entire source code for the example API shown in the article Planning a REST API.We’ll go over the relevant parts. Sadly, some bits and pieces are just plain boring (like the JSON Schema definitions and the simpler models), so I’ll skip it. These things should be pretty self-explanatory to developers anyway, no matter the level of expertise. I’ll cover the development stage as follows:  Minor simplifications/design decisions made during development.  Folder structure, it’s important to understand where everything is and why.  The code itself, file by file, including explanation when needed.Minor ChangesWe spent two whole articles going over different modules and planning the entire process to develop the API, and yet the plan changes.There is no escape from minor changes at this stage, unless you spend a lot more time in your design phase.We’ll just keep the employees’ records unaware of their assigned store, simplifying the store employee relationship and We’ll work under the premise that we’re not really making a public API.That means that we will not require every client to request an access token. Instead, we share a secret passphrase; so clients will always send the MAC code encrypted using this passphrase, and the API will rehash each request to make sure both results match. This way we’re still validating the requests and we remain true to REST.We’ll Add Swagger UI to test our API. You need download it from and add it into your project. Because the Swagger UI has no de facto support for our authentication scheme. We can send a fixed api_key parameter, but we would have to change the code of the client to get it to use the same algorithm we’re using. This is why we’ve added a small backdoor in our code to let the Swagger UI go by without needing to authenticate each request.The hack is very simple. Since the UI can send a fixed api_key, we’ll let all requests that have an api_key equal to 777 pass, automatically trusting them. This backdoor will need to be removed when going into production.We’ll use the MVC pattern, this means we’ll be having the following elements in out project:  Controllers: Handles requests and calls upon the models for further action.  Models: Holds the main logic of the API. Since in our simple case that logic is basically querying the database, these will be the models used by Mongoose. This will simplify our architecture. Also, Mongoose provides different mechanisms to add extra behaviors to our models (things like setting instance methods or post-action hooks).  View: The view will be embedded inside the model’s code in the form of a method that translates the specifics of one model into a HAL + JSON that can be returned back to the client.Folder Structure  controllers: This folder contains the code for our controllers. It also has an index.js file to handle exporting the contents of the rest of them. There is also a base controller here, which contains all the generic methods that all controllers should have; so every new controller can extend this and inherit said methods.  lib: This folder contains the miscellaneous code not big enough to have its own folder, but required across several different places in our project; for instance, database access, helper functions, the config files, and so forth.  models: Inside this folder are the model files. Normally when working with Mongoose, a model’s file has the schema definition, and you return the instantiation of that schema as your model. In our case, the actual definition is somewhere else, so this code handles loading that external definition, adding the extra behavior specific to each model, and then returning it.  request_schemas: Inside this folder are the JSON Schemas used to validate the different requests.  schemas: These are the JSON Schemas of the models, used for the Swagger module to define the UI for testing and for the Mongoose model’s definition. We will have to add some code to translate from the first one to the latter, since they don’t use the same format.  swagger-ui: This folder contains the contents of the Swagger UI project. We’ll need to do some minor adjustments to the index.html file to make it work as we expect it.Source CodeHere I’ll list the entire code for the project, including some basic description of the code if required. I’ll go folder by folder.controllers/controllers/index.jsmodule.exports = {           BookSales: require(&quot;./booksales&quot;),           Stores: require(&quot;./stores&quot;),           Employees: require(&quot;./employees&quot;),           ClientReviews: require(&quot;./clientreviews&quot;),           Clients: require(&quot;./clients&quot;),           Books: require(&quot;./books&quot;),           Authors: require(&quot;./authors&quot;)}This file is used to export each controller. Using this technique lets us import the entire folder as a module: var controllers = require(&quot;/controllers&quot;)/controllers/basecontroller.jsvar    _ =         require(&quot;underscore&quot;),    restify =   require(&quot;restify&quot;),    colors =    require(&quot;colors&quot;),    halson =    require(&quot;halson&quot;)function BaseController(){    this.actions = []    this.server = null}BaseController.prototype.setUpActions = function(app,sw){    this.server = app    _.each(this.actions, function(act){        var method = act[&#39;spec&#39;][&#39;method&#39;]        console.log(&quot;setting up auto-doc for (&quot;, method, &quot;) - &quot;, act[&#39;spec&#39;][&#39;nickname&#39;])        sw[&#39;add&#39; + method](act)        app[method.toLowerCase()](act[&#39;spec&#39;][&#39;path&#39;], act[&#39;action&#39;])    })}BaseController.prototype.addAction = function(spec, fn){    var newAct = {        &#39;spec&#39;: spec,        action: fn    }    this.actions.push(newAct)}BaseController.prototype.RESTError = function(type, msg){    if(restify[type]){        return new restify[type](msg.toString())    } else {        console.log(&quot;Type &quot; + type + &quot; of error not found&quot;.red)    }}// Takes care of calling the &quot;toHAL&quot; method on every resource before writing it// back to the clientsBaseController.prototype.writeHAL = function(res, obj){    if(Array.isArray(obj)){        var newArr = []        _.each(obj, function(item, k){            item = item.toHAL()            newArr.push(item)        })        obj = halson (newArr)    } else {        if(obj &amp;amp;&amp;amp; obj.toHAL) obj = obj.toHAL()        if(!obj)obj = {}        res.json(obj)    }}module.exports = BaseControllerEvery controller extends this object, gaining access to the methods shown earlier. We’ll use basic prototypical inheritance, as you’ll see in a bit when we start listing the other controllers’ code. As for this one, let’s quickly go over the methods it exposes:  setUpActions: This method is called upon instantiation of the controller; it is meant to add the actual routes to the HTTP server. This method is called during the initialization sequence for all controllers exported by the index.js file.  addAction: This method defines an action, which consists of the specs for that action and the actual function code. The specs are used by Swagger to create the documentation, but they’re also used by our code to set up the route; so there are bits inside the JSON spec that are also meant for the server, such as the path and method attributes.  RESTError: This is a simple wrapper method around all the error methods provided by Restify. It provides the benefit of cleaner code.  writeHAL: Every model defined (as you’ll see next) has a toHAL method, and the writeHAL methods take care of calling it for every model we’re trying to render. It basically centralizes the logic that deals with collections or simple objects, depending on what we’re trying to render./controllers/books.jsvar    BaseController = require(&quot;./basecontroller&quot;),    _ = require(&quot;underscore&quot;),    swagger = require(&quot;swagger-node-restify&quot;)function Books(){}Books.prototype = new BaseController()module.exports = function(lib){    var controller = new Books()    // Helper function for the POST action    function mergeStores(list1, list2){        var stores1 = {}        var stores2 = {}        _.each(list1, function(st){ if(st.store) stores1[st.store] = st.copies })        _.each(list2, function(st){ if(st.store) stores2[st.store] = st.copies })        var stores = _.extend(stores1, stores2)        return _.map(stores, function(v,k){ return {store: k, copies: v} })    }    controller.addAction({        &#39;path&#39;: &#39;/books&#39;,        &#39;method&#39;: &#39;GET&#39;,        &#39;summary&#39;: &#39;Returns the list of books&#39;,        &#39;params&#39;: [                    swagger.queryParam(&#39;q&#39;,&#39;Search term&#39;,&#39;string&#39;),                    swagger.queryParam(&#39;genre&#39;,&#39;Filter by genre&#39;,&#39;string&#39;)],        &#39;responseClass&#39;:&#39;Book&#39;,        &#39;nickname&#39;:&#39;getBooks&#39;    }, function(req,res,next){        var criteria = {}        if(req.params.q){            var expr = new RegExp(&#39;.*&#39; + req.param.q + &#39;.*&#39;)            criteria.$or = [                {title:expr},                {isbn_code:expr},                {description:expr}            ]        }        if(req.params.genre){            criteria.genre = req.params.genre        }        lib.db.model(&#39;Book&#39;)            .find(criteria)            .populate(&#39;stores.store&#39;)            .exec(function(err,books){                if(err) return next(err)                controller.writeHAL(res, books)            })    })    controller.addAction({        &#39;path&#39;: &#39;/books/{id}&#39;,        &#39;method&#39;: &#39;GET&#39;,        &#39;params&#39;: [swagger.pathParam(&#39;id&#39;,&#39;The id of the book&#39;,&#39;int&#39;)],        &#39;summary&#39;: &#39;Returns the full data of a book&#39;,        &#39;nickname&#39;: &#39;getBook&#39;,    }, function(req,res,next){        var id = req.params.id        if(id){            lib.db.model(&quot;Book&quot;)                .findOne({id:id})                .populate(&#39;authors&#39;)                .populate(&#39;stores&#39;)                .populate(&#39;reviews&#39;)                .exec(function(err, book){                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                    if(!book) return next(controller.RESTError(&#39;ResourceNotFoundError&#39;, &#39;Book not found&#39;))                    controller.writeHAL(res,book)                })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Missing book id&#39;)) }    })    controller.addAction({        &#39;path&#39;: &#39;/books&#39;,        &#39;method&#39;: &#39;POST&#39;,        &#39;params&#39;: [swagger.bodyParam(&#39;book&#39;,&#39;JSON representation of the new book&#39;,&#39;string&#39;)],        &#39;summary&#39;: &#39;Adds a new book into the collection&#39;,        &#39;nickname&#39;: &#39;newBook&#39;    }, function(res,req,next){        var bookData = req.body        if(bookData){            isbn = bookData.isbn_code            lib.db.model(&quot;Book&quot;)                .findOne({isbn_code:isbn})                .exec(function(err, bookModel){                    if(!bookModel) = lib.db.model(&quot;Book&quot;)(bookData)                    else bookModel.stores = mergeStores(bookModel.stores,bookData.stores)                    bookModel.save(function(err,book){                        if(err) return next(controller.RESTError(&#39;InternalServerError&#39;,err))                        controller.writeHAL(res,book)                    })                })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;,&#39;Missing content of book&#39;)) }    })    controller.addAction({        &#39;path&#39;: &#39;/books/{id}/authors&#39;,        &#39;method&#39;: &#39;GET&#39;,        &#39;params&#39;: [swagger.pathParam(&#39;id&#39;,&#39;The ID of the book&#39;,&#39;int&#39;)],        &#39;summary&#39;: &#39;Returns the list of authors of one specific book&#39;,        &#39;nickname&#39;: &#39;getAuthors&#39;    }, function(req,res,next){        var id = req.params.id        if(id){            lib.db.model(&quot;Book&quot;)                .findOne({_id:id})                .populate(&#39;authors&#39;)                .exec(function(err,book){                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;,err))                    if(!book) return next(controller.RESTError(&#39;ResourceNotFoundError&#39;,&#39;Book not found&#39;))                    controller.writeHAL(res,book.authors)                })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Missing book id&#39;)) }    })    controller.addAction({        &#39;path&#39;: &#39;/books/{id}/reviews&#39;,        &#39;method&#39;:&#39;GET&#39;,        &#39;params&#39;: [ swagger.pathParam(&#39;id&#39;, &#39;The Id of the book&#39;,&#39;int&#39;) ],        &#39;summary&#39;: &#39;Returns the list of reviews of one specific book&#39;,        &#39;nickname&#39;: &#39;getBooksReviews&#39;    }, function(req,res,next){        var id = req.params.id        if(id){            lib.db.model(&quot;Book&quot;)                .findOne({_id: id})                .populate(&#39;reviews&#39;)                .exec(function(err, book) {                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                    if(!book) return next(controller.RESTError(&#39;ResourceNotFoundError&#39;, &#39;Book not found&#39;))                    controller.writeHAL(res, book.reviews)                })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Missing book id&#39;)) }    })    controller.addAction({        &#39;path&#39;: &#39;/books/{id}&#39;,        &#39;method&#39;: &#39;PUT&#39;,        &#39;params&#39;: [                    swagger.pathParam(&#39;id&#39;, &#39;The Id of the book to update&#39;,&#39;string&#39;),                    swagger.bodyParam(&#39;book&#39;, &#39;The data to change on the book&#39;,&#39;string&#39;)        ],        &#39;summary&#39;: &#39;Updates the information of one specific book&#39;,        &#39;nickname&#39;: &#39;updateBook&#39;    }, function(req,res,next){        var data = req.body        var id = req.params.id        if(id) {            lib.db.model(&quot;Book&quot;)            .findOne({_id: id})            .exec(function(err, book) {                if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                if(!book) return next(controller.RESTError(&#39;ResourceNotFoundError&#39;,&#39;Book not found&#39;))                book = _.extend(book, data)                book.save(function(err, data) {                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                    controller.writeHAL(res, data.toJSON())                })            })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Invalid id received&#39;)) }    })    return controller}The code for this controller are the basic mechanics defined for this particular project on how to declare a controller and its actions.We also have a special case for the POST action, which checks the ISBN of a new book to see if it is in stock at another store. If an ISBN already exists, the book is merged to all relevant stores; otherwise, a new record is created.In theory, we’re creating a new function that inherits from the BaseController, which gives us the ability to add custom behavior on a specific controller. Reality is going to prove that we don’t really need such liberties, however. And we could very well do the same by instantiating the BaseController directly on every other controller file.The controller files are required during initialization of the API, and when that happens, the lib object is passed to them, like so:var controller = require(&quot;/controllers/books.js&quot;)(lib)This means that the lib object is received by the export function, which is in charge of instantiating the new controller and adding actions to it to return it to the required code.Here are some other interesting bits from the code:  The getBooks action shows how to do simple regular expression–based filtering with Mongoose.  The update action is not actually using the update method from Mongoose, but instead loads the model using the extend method from the underscore, and finally calls the save method on the model. This is done for one simple reason: the update method doesn’t trigger any post hooks on the models, but the save method does, so if we wanted to add behavior to react to an update on the model, this would be the way to go about it./controllers/stores.jsvar    BaseController = require(&quot;./basecontroller&quot;),    _ = require(&quot;underscore&quot;),    swagger = require(&quot;swagger-node-restify&quot;)function Stores(){}Stores.prototype = new BaseController()module.exports = function(lib){    var controller = new Stores()    controller.addAction({        &#39;path&#39;:&#39;/stores&#39;,        &#39;method&#39;:&#39;GET&#39;,        &#39;summary&#39;:&#39;Returns the list of stores&#39;,        &#39;params&#39;: [swagger.queryParam(&#39;state&#39;,&#39;Filter the list of stores by state&#39;,&#39;string&#39;)],        &#39;responseClass&#39;:&#39;Store&#39;,        &#39;nickname&#39;:&#39;getStores&#39;,    }, (req,res,next) =&amp;gt; {        var criteria = {}        if(req.params.state) criteria.state = new RegExp(req.params.state, &#39;i&#39;)        lib.db.model(&#39;Store&#39;)            .find(criteria)            .exec((err,list)=&amp;gt;{                if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                controller.writeHAL(res, list)            })    })    controller.addAction({        &#39;path&#39;: &#39;/stores/{id}&#39;,        &#39;method&#39;: &#39;GET&#39;,        &#39;summary&#39;:&#39;Returns the data of a store&#39;,        &#39;params&#39;: [swagger.queryParam(&#39;id&#39;,&#39;The id of the store&#39;,&#39;string&#39;)],        &#39;responseClass&#39;:&#39;Store&#39;,        &#39;nickname&#39;:&#39;getStore&#39;,    }, (req,res,next) =&amp;gt; {        var id = req.params.id        if(id){            lib.db.model(&#39;Store&#39;)                .findOne({_id:id})                .populate(&#39;employees&#39;)                .exec((err,data) =&amp;gt; {                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;,err))                    if(!data) return next(controller.RESTError(&#39;ResourceNotFoundError&#39;,&#39;Store not found&#39;))                    controller.writeHAL(res,data)                })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;,&#39;Invalid id&#39;)) }    })    controller.addAction({        &#39;path&#39;: &#39;/stores/{id}/books&#39;,        &#39;method&#39;: &#39;GET&#39;,        &#39;summary&#39;:&#39;Returns the list of books of a store&#39;,        &#39;params&#39;: [            swagger.queryParam(&#39;id&#39;,&#39;The id of the store&#39;,&#39;string&#39;),            swagger.queryParam(&#39;q&#39;, &#39;Search parameter for the books&#39;,&#39;string&#39;),            swagger.queryParam(&#39;genre&#39;,&#39;Filter results by genre&#39;,&#39;string&#39;)        ],        &#39;responseClass&#39;:&#39;Book&#39;,        &#39;nickname&#39;:&#39;getStoreBooks&#39;,    }, (req,res,next) =&amp;gt; {        var id = req.params.id        if(id){            var criteria = {stores:id}            if(req.params.q){                var expr = new RegExp(&#39;.*&#39;+req.params.q+&#39;.*&#39;,&#39;i&#39;)                criteria.$or = [                    {title:expr},                    {isbn_code:expr},                    {description:expr}                ]            }            if(req.params.genre) criteria.genre = req.params.genre            lib.db.model(&#39;Book&#39;)                .find(criteria)                .populate(&#39;authors&#39;)                .exec((err,data) =&amp;gt; {                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;,err))                    controller.writeHAL(res,data)                })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;,&#39;Invalid id&#39;))}    })    controller.addAction({        &#39;path&#39;:&#39;/stores/{id}/employees&#39;,        &#39;method&#39;: &#39;GET&#39;,        &#39;summary&#39;:&#39;Returns the list of employees working on a store&#39;,        &#39;params&#39;: [swagger.queryParam(&#39;id&#39;,&#39;The id of the store&#39;,&#39;string&#39;)],        &#39;responseClass&#39;:&#39;Employee&#39;,        &#39;nickname&#39;:&#39;getStoreEmployees&#39;,    }, (req,res,next) =&amp;gt; {        var id = req.params.id        if(id){            lib.db.model(&#39;Store&#39;)                .findOne({_id:id})                .populate(&#39;employees&#39;)                .exec((err,data) =&amp;gt; {                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;,err))                    if(!data) return next(controller.RESTError(&#39;ResourceNotFoundError&#39;,&#39;Store not found&#39;))                    console.log(data)                    controller.writeHAL(res,data.employees)                })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;,&#39;Invalid id&#39;))}    })    controller.addAction({        &#39;path&#39;: &#39;/stores/{id}/booksales&#39;,        &#39;method&#39;:&#39;GET&#39;,        &#39;summary&#39;:&#39;Returns the list of booksales done on a store&#39;        &#39;params&#39;: [swagger.queryParam(&#39;id&#39;,&#39;The id of the store&#39;,&#39;string&#39;)],        &#39;responseClass&#39;:&#39;BookSale&#39;,        &#39;nickname&#39;:&#39;getStoresBookSales&#39;,    }, (req,res,next) =&amp;gt; {        var id = req.params.id        if(id){            lib.db.model(&#39;Booksale&#39;)                .find({store:id})                .populate(&#39;client&#39;)                .populate(&#39;employee&#39;)                .populate(&#39;books&#39;)                .exec((err,data) =&amp;gt; {                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;,err))                    controller.writeHAL(res,data)                })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;,&#39;Invalid id&#39;))}    })    controller.addAction({        &#39;path&#39;:&#39;/stores&#39;,        &#39;method&#39;:&#39;POST&#39;,        &#39;summary&#39;: &#39;Adds a new store to the list&#39;,        &#39;params&#39;: [swagger.queryParam(&#39;store&#39;,&#39;The JSON data of the store&#39;,&#39;string&#39;)],        &#39;responseClass&#39;:&#39;Store&#39;,        &#39;nickname&#39;:&#39;newStore&#39;,    }, (req,res,next) =&amp;gt; {        var data = req.body        if(data){            var newStore = lib.db.model(&#39;Store&#39;)(data)            newStore.save(function(err,store){                if(err) return next(controller.RESTError(&#39;InternalServerError&#39;,err))                res.json(controller.toHAL(store))            })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;,&#39;No data received&#39;))}    })    controller.addAction({        &#39;path&#39;:&#39;/stores/{id}&#39;,        &#39;method&#39;:&#39;PUT&#39;,        &#39;summary&#39;:&quot;Updates a store&#39;s information&quot;,        &#39;params&#39;: [            swagger.queryParam(&#39;id&#39;,&#39;The id of the store&#39;,&#39;string&#39;),            swagger.queryParam(&#39;store&#39;,&#39;The new information to update&#39;,&#39;string&#39;)        ],        &#39;responseClass&#39;:&#39;Store&#39;,        &#39;nickname&#39;:&#39;updateStore&#39;,    }, (req,res,next) =&amp;gt; {        var data = req.body        var id = req.params.id        if(id){            lib.db.model(&#39;Store&#39;)                .findOne({_id:id})                .exec((err,store)=&amp;gt;{                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;,err))                    if(!store) return next(controller.RESTError(&#39;ResourceNotFoundError&#39;,&#39;Store not found&#39;))                    store = _.extend(store,data)                    store.save((err,data)=&amp;gt;{                        if(err) return next(controller.RESTError(&#39;InternalServerError&#39;,err))                        res.json(controller.toHAL(data))                    })                })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;,&#39;Invalid id&#39;))}    })    return controller}The code for the Stores controller is very similar to that of the Books controller.It does, however, have something of notice: the getStoresBookSales action clearly shows what happens when we don’t use a Hierarchical MVC model. I said that this is not a common case, so it would be fine for the purpose of this book, but it shows how separation of concerns is broken in the strictest of senses by acting over the model of another controller, instead of going through that other controller.Given the added complexity that mechanism would imply to our code, we’re better off looking the other way for the time being.Here are the remaining controllers. They don’t particularly show anything new compared to theprevious ones, so just look at the code and the occasional code comment./controllers/authors.jsvar    BaseController = require(&#39;./basecontroller&#39;),    swagger = require(&#39;swagger-node-restify&#39;)function BookSales(){}BookSales.prototype = new BaseController()module.exports = function(lib){    var controller = new BookSales()    controller.addAction({        &#39;path&#39;:&#39;/authors&#39;,        &#39;method&#39;:&#39;GET&#39;,        &#39;summary&#39;:&#39;Returns the list of authors across all sites&#39;,        &#39;responsClass&#39;:&#39;Author&#39;,        &#39;nickname&#39;:&#39;getAuthors&#39;,        &#39;params&#39;:[swagger.queryParam(&#39;q&#39;,&#39;Search parameter&#39;,&#39;string&#39;)]    },(req,res,next)=&amp;gt;{        var criteria = {},            filterByGenre = false || req.params.genre        if(req.params.q){            var expr = new RegExp(&#39;.*&#39;+req.params.q+&#39;.*&#39;,&#39;i&#39;)            criteria.$or = [                {name:expr},                {description:expr}            ]        }        if(filterByGenre){            lib.db.model(&#39;Book&#39;)                .find({genre:filterByGenre})                .exec((err,books)=&amp;gt;{                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;,err))                    findAuthors(_.pluck(books,&#39;_id&#39;))                })        } else { findAuthors() }        function findAuthors(bookIds){            if(bookIds) criteria.books = {$in:bookIds}            lib.db.model(&#39;Author&#39;)                .find(criteria)                .exec(function(err, authors) {                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;,err))                    controller.writeHAL(res, authors)                }        }    })    controller.addAction({        &#39;path&#39;:&#39;/authors/{id}&#39;,        &#39;method&#39;:&#39;GET&#39;,        &#39;summary&#39;:&#39;Returns all the data from one specific author&#39;,        &#39;responsClass&#39;:&#39;Author&#39;,        &#39;nickname&#39;:&#39;getAuthor&#39;    },(req,res,next)=&amp;gt;{        var id = req.params.id        if(id){            lib.db.model(&#39;Author&#39;)                .findOne({_id: id})                .exec(function(err, author) {                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;,err))                    if(!author) return next(controller.RESTError(&#39;ResourceNotFoundError&#39;, &#39;Author not found&#39;))                    controller.writeHAL(res, author)                })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Missing author id&#39;)) }    })    controller.addAction({        &#39;path&#39;:&#39;/authors&#39;,        &#39;method&#39;:&#39;POST&#39;,        &#39;summary&#39;:&#39;Adds a new author&#39;,        &#39;responsClass&#39;:&#39;Author&#39;,        &#39;nickname&#39;:&#39;addAuthor&#39;,        &#39;params&#39;:[swagger.bodyParam(&#39;author&#39;,&#39;JSON representation of the data&#39;,&#39;string&#39;)]    },(req,res,next)=&amp;gt;{        var body = req.body        if(body){            var newAuthor = lib.db.model(&#39;Author&#39;)(body)            newAuthor.save((err, author)=&amp;gt;{                if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                controller.writeHAL(res, author)            })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Missing author id&#39;)) }    })    controller.addAction({        &#39;path&#39;:&#39;/authors/{id}&#39;,        &#39;method&#39;:&#39;PUT&#39;,        &#39;summary&#39;:&quot;UPDATES an author&#39;s information&quot;,        &#39;responsClass&#39;:&#39;Author&#39;,        &#39;nickname&#39;:&#39;updateAuthor&#39;,        &#39;params&#39;:[            swagger.pathParam(&#39;id&#39;,&#39;The id of the author&#39;,&#39;string&#39;),            swagger.pathParam(&#39;author&#39;,&#39;The new information to update&#39;,&#39;string&#39;)        ]    }, (req,res,next)=&amp;gt;{        var data = req.body,            id = req.params.id        if(id){            lib.db.model(&quot;Author&quot;)                .findOne({_id: id})                .exec((err, author)=&amp;gt;{                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                    if(!author) return next(controller.RESTError(&#39;ResourceNotFoundError&#39;,&#39;Author not found&#39;))                    author = _.extend(author, data)                    author.save((err, data)=&amp;gt;{                        if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                        res.json(controller.toHAL(data))                    })                })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Invalid id received&#39;)) }    })    controller.addAction({        &#39;path&#39;:&#39;/authors/{id}/books&#39;,        &#39;method&#39;:&#39;GET&#39;,        &#39;summary&#39;:&#39;Returns the data from all the books of one specific author&#39;,        &#39;responsClass&#39;:&#39;Book&#39;,        &#39;nickname&#39;:&#39;getAuthorsBook&#39;,        &#39;params&#39;:[swagger.pathParam(&#39;id&#39;,&#39;The id of the author&#39;,&#39;string&#39;)]    }, (req,res,next)=&amp;gt;{        var id = req.params.id        if(id){            lib.db.model(&#39;Author&#39;)                .findOne({_id: id})                .populate(&#39;books&#39;)                .exec((err, author) =&amp;gt; {                    if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                    if(!author) return next(controller.RESTError(&#39;ResourceNotFoundError&#39;, &#39;Author not found&#39;))                    controller.writeHAL(res, author.books)                })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Missing author id&#39;)) }    })    return controller}/controllers/booksales.js var BaseController = require(&quot;./basecontroller&quot;),     swagger = require(&quot;swagger-node-restify&quot;)function BookSales() {}BookSales.prototype = new BaseController()module.exports = function(lib) {    var controller = new BookSales();    controller.addAction({           &#39;path&#39;: &#39;/booksales&#39;,           &#39;method&#39;: &#39;GET&#39;,           &#39;summary&#39;: &#39;Returns the list of book sales&#39;,           &#39;responseClass&#39;: &#39;BookSale&#39;,           &#39;nickname&#39;: &#39;getBookSales&#39;,           &#39;params&#39;: [               swagger.queryParam(&#39;start_date&#39;, &#39;Filter sales done after (or on) this date&#39;, &#39;string&#39;),               swagger.queryParam(&#39;end_date&#39;, &#39;Filter sales done on or before this date&#39;, &#39;string&#39;),               swagger.queryParam(&#39;store_id&#39;, &#39;Filter sales done  on this store&#39;, &#39;string&#39;)            ]    }, function(req, res, next) {        console.log(req)        var criteria = {}        if(req.params.start_date) criteria.date = {$gte: req.params.start_date}        if(req.params.end_date) criteria.date = {$lte: req.params.end_date}        if(req.params.store_id) criteria.store = req.params.store_id        lib.db.model(&quot;Booksale&quot;)            .find(criteria)            .populate(&#39;books&#39;)            .populate(&#39;client&#39;)            .populate(&#39;employee&#39;)            .populate(&#39;store&#39;)            .exec(function(err, sales) {                if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                controller.writeHAL(res, sales)            })    })    controller.addAction({        &#39;path&#39;: &#39;/booksales&#39;,        &#39;method&#39;: &#39;POST&#39;,        &#39;params&#39;: [ swagger.bodyParam(&#39;booksale&#39;, &#39;JSON representation of the new booksale&#39;,&#39;string&#39;) ],        &#39;summary&#39;: &#39;Records a new booksale&#39;,        &#39;nickname&#39;: &#39;newBookSale&#39;    }, function(req, res, next) {        var body = req.body        if(body) {            var newSale = lib.db.model(&quot;Booksale&quot;)(body)            newSale.save(function(err, sale) {                if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                controller.writeHAL(res, sale)            })        } else { next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Missing json data&#39;))}    })    return controller}/controllers/clientreviews.js var    BaseController = require(&quot;./basecontroller&quot;),    _ = require(&quot;underscore&quot;),    swagger = require(&quot;swagger-node-restify&quot;) function ClientReviews() {} ClientReviews.prototype = new BaseController() module.exports = function(lib) {     var controller = new ClientReviews();     controller.addAction({         &#39;path&#39;: &#39;/clientreviews&#39;,         &#39;method&#39;: &#39;POST&#39;,         &#39;summary&#39;: &#39;Adds a new client review to a book&#39;,         &#39;params&#39;: [swagger.bodyParam(&#39;review&#39;, &#39;The JSON representation of the review&#39;,  &#39;string&#39;)],         &#39;responseClass&#39;: &#39;ClientReview&#39;,         &#39;nickname&#39;: &#39;addClientReview&#39;     }, function(req, res, next) {         var body = req.body         if(body) {             var newReview = lib.db.model(&#39;ClientReview&#39;)(body)             newReview.save(function (err, rev) {                 if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                 controller.writeHAL(res, rev)             })         }     })     return controller }/controllers/clients.jsvar BaseController = require(&quot;./basecontroller&quot;),    _ = require(&quot;underscore&quot;),    swagger = require(&quot;swagger-node-restify&quot;)function Clients() {}Clients.prototype = new BaseController()module.exports = function(lib) {    var controller = new Clients();    controller.addAction({        &#39;path&#39;: &#39;/clients&#39;,        &#39;method&#39;: &#39;GET&#39;,        &#39;summary&#39;: &#39;Returns the list of clients ordered by name&#39;,        &#39;responsClass&#39;: &#39;Client&#39;,        &#39;nickname&#39;: &#39;getClients&#39;    }, function(req, res, next) {        lib.db.model(&#39;Client&#39;)            .find()            .sort(&#39;name&#39;)            .exec(function(err, clients) {                if (err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                controller.writeHAL(res, clients)            })    })    controller.addAction({        &#39;path&#39;: &#39;/clients&#39;,        &#39;method&#39;: &#39;POST&#39;,        &#39;params&#39;: [swagger.bodyParam(&#39;client&#39;, &#39;The JSON representation of the client&#39;, &#39;string&#39;)],        &#39;summary&#39;: &#39;Adds a new client to the database&#39;,        &#39;responsClass&#39;: &#39;Client&#39;,        &#39;nickname&#39;: &#39;addClient&#39;    }, function(req, res, next) {        var newClient = req.body        var newClientModel = lib.db.model(&#39;Client&#39;)(newClient)        newClientModel.save(function(err, client) {            if (err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))            controller.writeHAL(res, client)        })    })    controller.addAction({        &#39;path&#39;: &#39;/clients/{id}&#39;,        &#39;method&#39;: &#39;GET&#39;,        &#39;params&#39;: [swagger.pathParam(&#39;id&#39;, &#39;The id of the client&#39;, &#39;string&#39;)],        &#39;summary&#39;: &#39;Returns the data of one client&#39;,        &#39;responsClass&#39;: &#39;Client&#39;,        &#39;nickname&#39;: &#39;getClient&#39;    }, function(req, res, next) {        var id = req.params.id        if (id != null) {            lib.db.model(&#39;Client&#39;)                .findOne({                    _id: id                })                .exec(function(err, client) {                    if (err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                    if (!client) return next(controller.RESTError(&#39;ResourceNotFoundError&#39;, &#39;The client id cannot be found&#39;))                    controller.writeHAL(res, client)                })        } else {            next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Invalid client id&#39;))        }    })    controller.addAction({        &#39;path&#39;: &#39;/clients/{id}&#39;,        &#39;method&#39;: &#39;PUT&#39;,        &#39;params&#39;: [            swagger.pathParam(&#39;id&#39;, &#39;The id of the client&#39;, &#39;string&#39;),            swagger.bodyParam(&#39;client&#39;, &#39;The content to overwrite&#39;, &#39;string&#39;)        ],        &#39;summary&#39;: &#39;Updates the data of one client&#39;,        &#39;responsClass&#39;: &#39;Client&#39;,        &#39;nickname&#39;: &#39;updateClient&#39;    }, function(req, res, next) {        var id = req.params.id        if (!id) return next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Invalid id&#39;))        else {            var model = lib.db.model(&#39;Client&#39;)            model.findOne({                _id: id            })            model.exec(function(err, client) {                if (err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                client = _.extend(client, req.body)                client.save(function(err, newClient) {                    if (err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                    controller.writeHAL(res, newClient)                })            })        }    })    return controller}/controllers/employees.jsvar    BaseController = require(&quot;./basecontroller&quot;),    _ = require(&quot;underscore&quot;),    swagger = require(&quot;swagger-node-restify&quot;)function Employees() {}Employees.prototype = new BaseController()module.exports = function(lib) {    var controller = new Employees();    controller.addAction({        &#39;path&#39;: &#39;/employees&#39;,        &#39;method&#39;: &#39;GET&#39;,        &#39;summary&#39;: &#39;Returns the list of employees across all stores&#39;,        &#39;responseClass&#39;: &#39;Employee&#39;,        &#39;nickname&#39;: &#39;getEmployees&#39;    }, function(req, res, next) {        lib.db.model(&#39;Employee&#39;).find().exec(function(err, list) {            if (err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))            controller.writeHAL(res, list)        })    })    controller.addAction({        &#39;path&#39;: &#39;/employees/{id}&#39;,        &#39;method&#39;: &#39;GET&#39;,        &#39;params&#39;: [swagger.pathParam(&#39;id&#39;,&#39;The id of the employee&#39;,&#39;string&#39;)],        &#39;summary&#39;: &#39;Returns the data of an employee&#39;,        &#39;responseClass&#39;: &#39;Employee&#39;,        &#39;nickname&#39;: &#39;getEmployee&#39;  }, function(req, res, next) {      var id = req.params.id      if(!id) next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Invalid id&#39;))      else {          lib.db.model(&#39;Employee&#39;).findOne({_id: id}).exec(function(err, empl) {              if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))              if(!empl) return next(controller.RESTError(&#39;ResourceNotFoundError&#39;, &#39;Not found&#39;))              controller.writeHAL(res, empl)          })      }  })  controller.addAction({      &#39;path&#39;: &#39;/employees&#39;,      &#39;method&#39;: &#39;POST&#39;,      &#39;params&#39;: [swagger.bodyParam(&#39;employee&#39;, &#39;The JSON data of the employee&#39;,      &#39;string&#39;)],      &#39;summary&#39;: &#39;Adds a new employee to the list&#39;,      &#39;responseClass&#39;: &#39;Employee&#39;,      &#39;nickname&#39;: &#39;newEmployee&#39;  }, function(req, res, next) {      var data = req.body      if(!data) next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;No data received&#39;))      else {          var newEmployee = lib.db.model(&#39;Employee&#39;)(data)          newEmployee.save(function(err, emp) {              if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))              controller.writeHAL(res, emp)          }      }  })  controller.addAction({        &#39;path&#39;: &#39;/employees/{id}&#39;,        &#39;method&#39;: &#39;PUT&#39;,        &#39;summary&#39;: &quot;UPDATES an employee&#39;s information&quot;,        &#39;params&#39;: [                swagger.pathParam(&#39;id&#39;,&#39;The id of the employee&#39;,&#39;string&#39;),                swagger.bodyParam(&#39;employee&#39;, &#39;The new information to update&#39;, &#39;string&#39;)],        &#39;responseClass&#39;: &#39;Employee&#39;,        &#39;nickname&#39;: &#39;updateEmployee&#39;  }, function(req, res, next) {      var data = req.body      var id = req.params.id      if(!id) next(controller.RESTError(&#39;InvalidArgumentError&#39;, &#39;Invalid id&#39;))      else {          lib.db.model(&quot;Employee&quot;).findOne({_id: id}).exec(function(err, emp) {              if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))              emp = _.extend(emp, data)              emp.save(function(err, employee) {                  if(err) return next(controller.RESTError(&#39;InternalServerError&#39;, err))                  controller.writeHAL(res, employee)              })          })      }  })  return controller}libThe lib folder contains all sorts of helper functions and utilities that were just too small to be put into a separate folder, but important and generic enough to be used in several places of the code./lib/index.jsvar lib = {    helpers:            require(&quot;./helpers&quot;),    config:             require(&quot;./config&quot;),    controllers:        require(&quot;../controllers&quot;),    schemas:            require(&quot;../schemas&quot;),    schemaValidator:    require(&quot;./schemaValidator&quot;),    db:                 require(&quot;./db&quot;)}module.exports = libThis file is supposed to act as the single point of contact between the outside world (the rest of the project) and the inside world (all of the mini-modules grouped within this folder). There is nothing special about it. It just requires everything and exports using predefined keys./lib/helpers.jsvar halson = require(&quot;halson&quot;),    _ = require(&quot;underscore&quot;)module.exports = {    makeHAL:        makeHAL,    setupRoutes:    setupRoutes,    validateKey:    validateKey}function setupRoutes(server,swagger,lib){    for(controller in lib.controllers){        cont = lib.controllers[controller](lib)        cont.setUpActions(server,swagger)    }}// Sign in every request and compare it// against the key sent by the client, this way// we make shure its authenticfunction validateKey(hmacdata,key,lib){    // This is for testing the swagger-ui, should be removed after development    // to avoid possible security problem    if(key == 777) return true    var hmac = require(&quot;crypto&quot;).createHmac(&quot;md5&quot;,lib.config.secretKey).update(hmacdata).digest(&quot;hex&quot;)    console.log(hmac) // remove this line    return hmac == key}function makeHAL(data,links,embed){    var obj = halson(data)    if(links &amp;amp;&amp;amp; links.length &amp;gt; 0) { _.each(links,(lnk)=&amp;gt;{ obj.addLink(lnk.name,{href:lnk.href,title:lnk.title || &#39;&#39;}) }) }    if(embed &amp;amp;&amp;amp; embed.length &amp;gt; 0) { _.each(embed,(item)=&amp;gt;{ obj.addEmbed(item.name,item.data)}) }    return obj}Just as the modules exported by the index.js file are too small to merit their own folder, these functions are too small and particular to merit their own module, so instead they are grouped here, inside the helpers module. The functions are meant to be of use (hence, the name “helpers”) throughout the entire project:      setupRoutes: This function is called from within the project’s main file during boot-up time. It’s meant to initialize all controllers, which in turn adds the actual route’s code to the HTTP server.        validateKey: This function contains the code to validate the request by recalculating the HMAC key. And as mentioned earlier, it contains the exception to the rule, allowing any request to validate if the key sent is 777.        makeHAL: This function turns any type of object into a HAL JSON object ready to be rendered. This particular function is heavily used from within the models’ code.  /lib/schemaValidator.jsvar tv4 = require(&quot;tv4&quot;),    formats = require(&quot;tv4-formats&quot;),    schemas = require(&quot;../request_schemas/&quot;)module.exports = {    validateRequest: validate}function validate (req) {    var res = {valid: true}    tv4.addFormat(formats)    var schemaKey = req.route ? req.route.path.toString().replace(&quot;/&quot;, &quot;&quot;) : &#39;&#39;    var actionKey = req.route.name    if(schemas[schemaKey]){        var mySchema = schemas[schemaKey][actionKey]        var data = null        if(mySchema) {            switch(mySchema.validate) {                case &#39;params&#39;:                    data = req.params                    break            }            res = tv4.validateMultiple(data, mySchema.s        }    }    return res}This file has the code that validates any request against a JSON Schema that we define.The only function of interest is the validate function, which validates the request object. It also counts on a predefined structure inside the request, which is added by Swagger (the route attribute).As you might’ve guessed from the preceding code, the validation of a request is optional; not every request is being validated. And right now, only query parameters are validated, but this can be extended by simply adding a new case to the switch statement.This function works with the premise of “convention over configuration,” which means that if you set up everything “right,” then you don’t have to do much. In our particular case, we’re looking inside the request_ schemas folder to load a set of predefined schemas, which have a very specific format. In that format we find the name of the action (the nickname that we set up) to validate and the portion of the request we want to validate.In our particular function, we’re only validating query parameters for things such as invalid formats and so forth. The only request we have set up to validate right now is the BookSales listing action; but if we wanted to add a new validation, it would just be a matter of adding a new schema—no programming required./lib/db.jsvar    config = require(&quot;./config&quot;),    _ = require(&quot;underscore&quot;),    mongoose = require(&quot;mongoose&quot;),    Schema = mongoose.Schemavar obj = {    cachedModels: {},    getModelFromSchema: getModelFromSchema,    model: function(mname) {        return this.models[mname]    }    connect: function(cb) {        mongoose.connect(config.database.host + &quot;/&quot; + config.database.dbname)        this.connection = mongoose.connection        this.connection.on(&#39;error&#39;, cb)        this.connection.on(&#39;open&#39;, cb)    }}obj.models = require(&quot;../models/&quot;)(obj)module.exports = objfunction translateComplexType(v, strType) {    var tmp = null    var type = strType || v[&#39;type&#39;]    switch (type) {        case &#39;array&#39;:            tmp = []            if (v[&#39;items&#39;][&#39;$ref&#39;] != null) {                tmp.push({                    type: Schema.ObjectId,                    ref: v[&#39;items&#39;][&#39;$ref&#39;]                })            } else {                var originalType = v[&#39;items&#39;][&#39;type&#39;]                v[&#39;items&#39;][&#39;type&#39;] = translateTypeToJs(v[&#39;items&#39;]                    [&#39;type&#39;])                tmp.push(translateComplexType(v[&#39;items&#39;], originalType))            }            break        case &#39;object&#39;:            tmp = {}            var props = v[&#39;properties&#39;]            _.each(props, function(data, k) {                if (data[&#39;$ref&#39;] != null) {                    tmp[k] = {                        type: Schema.ObjectId,                        ref: data[&#39;$ref&#39;]                    }                } else {                    tmp[k] = translateTypeToJs(data[&#39;type&#39;])                }            })            break        default:            tmp = v            tmp[&#39;type&#39;] = translateTypeToJs(type)            break    }    return tmp}// Turns the JSON Schema into a Mongoose schemafunction getModelFromSchema(schema) {    var data = {        name: schema.id,        schema: {}    }    var newSchema = {}    var tmp = null    _.each(schema.properties, function(v, propName) {        if(v[&#39;$ref&#39;] != null) {            tmp = {                type: Schema.ObjectId,                ref: v[&#39;$ref&#39;]            }        } else { tmp = translateComplexType(v) }        newSchema[propName] = tmp    })    data.schema = new Schema(newSchema)    return data}function translateTypeToJs(t) {    if(t.indexOf(&#39;int&#39;) === 0)  t = &quot;number&quot;    return eval(t.charAt(0).toUpperCase() + t.substr(1))}This file contains some interesting functions that are used a lot from the models’ code.The schemas used with Swagger can potentially be reused to do other things, suchas defining the models’ schemas. But to do this, we need a function to translate the standard JSON Schema into the nonstandard JSON format required by Mongoose to define a model. This is where the getModelFromSchema function comes into play; its code is meant to go over the structure of the JSON Schema and create a new, simpler JSON structure to be used as a Mongoose Schema.The other functions are more straightforward:  connect: Connects to the database server and sets up the callbacks for both error and success cases.  model: Accesses the model from outside. We could just directly access the models using the object models, but it’s always a good idea to provide a wrapper in case you ever need to add extra behaviors (such as checking for errors)./lib/config.jsmodule.exports = {    secretKey: &#39;this is a secret key, right here&#39;,    server: {        name: &#39;ComeNRead API&#39;,        version: &#39;1.0.0&#39;,        port: 9000    },    database: {        host: &#39;mongodb://localhost&#39;,        dbname: &#39;comenread&#39;    }}modelsThis folder contains the actual code of each model. The definition of these resources won’t be found in these files because they’re only meant to define behavior. The actual properties are defined in the schemas folder (which, is being used both by the models and Swagger)./models/index.jsmodule.exports = function(db) {    return {        &quot;Book&quot;: require(&quot;./book&quot;)(db),        &quot;Booksale&quot;: require(&quot;./booksale&quot;)(db),        &quot;ClientReview&quot;: require(&quot;./clientreview&quot;)(db),        &quot;Client&quot;: require(&quot;./client&quot;)(db),        &quot;Employee&quot;: require(&quot;./employee&quot;)(db),        &quot;Store&quot;: require(&quot;./store&quot;)(db),        &quot;Author&quot;: require(&quot;./author&quot;)(db)    }}As in the other folders, the index.js file allows us to require every model at once, and treat this folder like a module itself.The other thing of note here is the passing of the db object to every model, so that they can access the getModelFromSchema function./models/author.js var     mongoose = require(&quot;mongoose&quot;),     jsonSelect = require(&#39;mongoose-json-select&#39;),     helpers = require(&quot;../lib/helpers&quot;),     _ = require(&quot;underscore&quot;) module.exports = function(db) {     var schema = require(&quot;../schemas/author.js&quot;)     var modelDef = db.getModelFromSchema(schema)     modelDef.schema.plugin(jsonSelect, &#39;-books&#39;)     modelDef.schema.methods.toHAL = function() {         var halObj = helpers.makeHAL(this.toJSON(), [{             name: &#39;books&#39;,             &#39;href&#39;: &#39;/authors/&#39; + this.id + &#39;/books&#39;,             &#39;title&#39;: &#39;Books&#39;         }])         if (this.books.length &amp;gt; 0) {             if (this.books[0].toString().length != 24) {                 halObj.addEmbed(&#39;books&#39;, _.map(this.books,                     function(e) {                         return e.toHAL()                     }))             }         }         return halObj     }     return mongoose.model(modelDef.name, modelDef.schema) }The code of the Author model shows the basic mechanics of loading the JSON Schema, transforming it into a Mongoose Schema, defining the custom behavior, and finally returning a new model.The following defines the main custom behaviors:  The jsonSelect model allows us to define the attributes to add to or removefrom the object when turning it into a JSON. We want to remove the embedded objects from the JSON representation, because they will be added to the HAL JSON representation as embedded objects, rather than being part of the main object.  The toHAL method takes care of returning the representation of the resource in JSON HAL format.  The links associated to the main object are defined manually. We could improve this by further customizing the code for the loading and transformation of the JSON Schemas of the models.The code below determine if the model has populated a reference, or if it is simply the id of the referenced objectif(this.books[0].toString().length != 24) {  //...}The following is the rest of the code inside the models folder, as you can appreciate, the same mechanics are duplicated on every case./models/book.jsvar mongoose = require(&quot;mongoose&quot;),    jsonSelect = require(&#39;mongoose-json-select&#39;),    helpers = require(&quot;../lib/helpers&quot;),    _ = require(&quot;underscore&quot;)module.exports = function(db) {    var schema = require(&quot;../schemas/book.js&quot;)    var modelDef = db.getModelFromSchema(schema)    modelDef.schema.plugin(jsonSelect, &#39;-stores -authors&#39;)    modelDef.schema.methods.toHAL = function() {        var halObj = helpers.makeHAL(this.toJSON(), [{            name: &#39;reviews&#39;,            href: &#39;/books/&#39; + this.id + &#39;/reviews&#39;,            title: &#39;Reviews&#39;        }])        if(this.stores.length &amp;gt; 0) { if(this.stores[0].store.toString().length != 24) { halObj.addEmbed(&#39;stores&#39;, _.map(this.stores, function(s) { return { store: s.store.toHAL(), copies: s.copies } }))}}        if(this.authors.length &amp;gt; 0) { if(this.authors[0].toString().length != 24) { halObj.addEmbed(&#39;authors&#39;, this.authors) }}        return halObj    }    return mongoose.model(modelDef.name, modelDef.schema)}/models/booksale.jsvar mongoose = require(&quot;mongoose&quot;),    jsonSelect = require(&#39;mongoose-json-select&#39;),    helpers = require(&quot;../lib/helpers&quot;),    _ = require(&quot;underscore&quot;)module.exports = function(db) {    var schema = require(&quot;../schemas/booksale.js&quot;)    var modelDef = db.getModelFromSchema(schema)    modelDef.schema.plugin(jsonSelect, &#39;-store -employee -client -books&#39;)    modelDef.schema.methods.toHAL = function() {        var halObj = helpers.makeHAL(this.toJSON())        if(this.books.length &amp;gt; 0) { if(this.books[0].toString().length != 24) { halObj.addEmbed(&#39;books&#39;, _.map(this.books,function(b) { return b.toHAL() }))}}        if(this.store.toString().length != 24) halObj.addEmbed(&#39;store&#39;, this.store.toHAL())        if(this.employee.toString().length != 24) halObj.addEmbed(&#39;employee&#39;, this.employee.toHAL())        if(this.client.toString().length != 24) halObj.addEmbed(&#39;client&#39;, this.client.toHAL())        return halObj    }    return mongoose.model(modelDef.name, modelDef.schema)}/models/client.jsvar mongoose = require(&quot;mongoose&quot;),    jsonSelect = require(&#39;mongoose-json-select&#39;),    helpers = require(&quot;../lib/helpers&quot;),    _ = require(&quot;underscore&quot;)module.exports = function(db) {    var schema = require(&quot;../schemas/client.js&quot;)    var modelDef = db.getModelFromSchema(schema)    modelDef.schema.methods.toHAL = function() {        var halObj = helpers.makeHAL(this.toJSON())        return halObj    }    return mongoose.model(modelDef.name, modelDef.schema)}/models/clientreview.jsvar mongoose = require(&quot;mongoose&quot;),    jsonSelect = require(&#39;mongoose-json-select&#39;),    helpers = require(&quot;../lib/helpers&quot;),    _ = require(&quot;underscore&quot;)module.exports = function(db) {    var schema = require(&quot;../schemas/clientreview.js&quot;)    var modelDef = db.getModelFromSchema(schema)    modelDef.schema.methods.toHAL = function() {        var halObj = helpers.makeHAL(this.toJSON())        return halObj    }    modelDef.schema.post(&#39;save&#39;, function(doc, next) {        db.model(&#39;Book&#39;).update({_id: doc.book}, {$addToSet: {reviews: this.id}}, function(err) { next(err) })    })    return mongoose.model(modelDef.name, modelDef.schema)}/models/employee.jsvar mongoose = require(&quot;mongoose&quot;),    jsonSelect = require(&#39;mongoose-json-select&#39;),    helpers = require(&quot;../lib/helpers&quot;),    _ = require(&quot;underscore&quot;)module.exports = function(db) {    var schema = require(&quot;../schemas/employee.js&quot;)    var modelDef = db.getModelFromSchema(schema)    modelDef.schema.methods.toHAL = function() {        var halObj = helpers.makeHAL(this.toJSON())        return halObj    }    return mongoose.model(modelDef.name, modelDef.schema)}/models/store.jsvar mongoose = require(&quot;mongoose&quot;),    jsonSelect = require(&quot;mongoose-json-select&quot;),    _ = require(&quot;underscore&quot;),    helpers = require(&quot;../lib/helpers&quot;)module.exports = function(db) {    var schema = require(&quot;../schemas/store.js&quot;)    var modelDef = db.getModelFromSchema(schema)    modelDef.schema.plugin(jsonSelect, &#39;-employees&#39;)    modelDef.schema.methods.toHAL = function() {        var halObj = helpers.makeHAL(this.toJSON(), [{            name: &#39;books&#39;,            href: &#39;/stores/&#39; + this.id + &#39;/books&#39;,            title: &#39;Books&#39;        }, {            name: &#39;booksales&#39;,            href: &#39;/stores/&#39; + this.id + &#39;/booksales&#39;,            title: &#39;Book Sales&#39;        }])        if(this.employees.length &amp;gt; 0) { if(this.employees[0].toString().length != 24) { halObj.addEmbed(&#39;employees&#39;, _.map(this.employees,function(e) { return e.toHAL() }))}}        return halObj    }    var model = mongoose.model(modelDef.name, modelDef.schema)    return model}request_schemasThis folder contains the JSON Schemas that will be used to validate the requests.They need to describe an object and its properties. We should be able to validate against the request object attribute that contains the parameters (normally request.params, but potentially something else, such as request.body).Due to the type of attributes we defined for our endpoints, there is really only one endpoint that we would want to validate: the getBookSales (GET /booksales) endpoint. It receives two date parameters, and we probably want to validate their format to be 100% certain that the dates are valid.Again, to provide the simplicity of usage that “convention over configuration” provides, our schema files must follow a very specific format, which is then used by the validator that we saw earlier:/request_schemas/ [CONTROLLER NAME].js module.exports = {    [ENDPOINT NICKNAME]: {        validate: [TYPE],        schema: [JSON SCHEMA]    }}There are several pieces that need to be explained in the preceding code:  CONTROLLER NAME: This means that the file for the schema needs to have the same name as the controller, all lowercase. And since we already did that for our controllers’ files, this mean the schemas for each controller will have to have the same name as each controller’s file.  ENDPOINT NICKNAME: This should be the nickname given to the action when adding it to the controller (using the addAction method).  TYPE: The type of object to validate. The only value supported right now is params, which references the query and path parameters received. This could be extended to support other objects.  JSON SCHEMA: This is where we add the actual JSON Schema defining the request parameters.Here is the actual code defining the validation for the getBookSales action:/request_schemas/booksales.jsmodule.exports = {    getbooksales: {        validate: &#39;params&#39;,        schema: {            type: &quot;object&quot;,            properties: {                start_date: {                    type: &#39;string&#39;,                    format: &#39;date&#39;                },                end_date: {                    type: &#39;string&#39;,                    format: &#39;date&#39;                },                store_id: {                    type: &#39;string&#39;                }            }        }    }}SchemasThis folder contains the JSON Schema definitions of our resources, which also translate into the Mongoose Schemas when initializing our models.The level of detail provided in these files is very important, because it also translates into the actual Mongoose model. This means that we could define things such as ranges of values and format patterns, which would be validated by Mongoose when creating the new resources.For instance, let’s take a look at ClientReview, a schema that makes use of such capability:/schemas/clientreview.jsmodule.exports = {    &quot;id&quot;: &quot;ClientReview&quot;,    &quot;properties&quot;: {        &quot;client&quot;: {            &quot;$ref&quot;: &quot;Client&quot;,            &quot;description&quot;: &quot;The client who submits the review&quot;        },        &quot;book&quot;: {            &quot;$ref&quot;: &quot;Book&quot;,            &quot;description&quot;: &quot;The book being reviewed&quot;        },        &quot;review_text&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;The actual review text&quot;        },        &quot;stars&quot;: {            &quot;type&quot;: &quot;integer&quot;,            &quot;description&quot;: &quot;The number of stars, from 0 to 5&quot;,            &quot;min&quot;: 0,            &quot;max&quot;: 5        }    }}The stars attribute is clearly setting the maximum and minimum values that we can send when saving a new review. If we tried to send an invalid number, then we would get an error.When defining schemas that reference others, remember to correctly name the reference (the name of each schema is given by the id property). So if you correctly set up the reference, the getModelFromSchema method of the db module will also properly set up the reference in Mongoose (this works both for direct reference and for collections).Here is the main file for this folder; the index.js works like the index files in the other folders:/schemas/index.jsmodule.exports = {    models: {        BookSale: require(&quot;./booksale&quot;),        Book: require(&quot;./book&quot;),        Author: require(&quot;./author&quot;),        Store: require(&quot;./store&quot;),        Employee: require(&quot;./employee&quot;),        Client: require(&quot;./client&quot;),        ClientReview: require(&quot;./clientreview&quot;)    }}The rest of the schemas defined for the project:/schemas/author.jsmodule.exports = {    &quot;id&quot;: &quot;Author&quot;,    &quot;properties&quot;: {        &quot;name&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;The full name of the author&quot;        },        &quot;description&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;A small bio of the author&quot;        },        &quot;books&quot;: {            &quot;type&quot;: &quot;array&quot;,            &quot;description&quot;: &quot;The list of books published on at least one of the stores by this author&quot;,            &quot;items&quot;: {                &quot;$ref&quot;: &quot;Book&quot;            }        },        &quot;website&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;The Website url of the author&quot;        },        &quot;avatar&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;The url for the avatar of this author&quot;        }    }}/schema/book.jsmodule.exports = {    &quot;id&quot;: &quot;Book&quot;,    &quot;properties&quot;: {        &quot;title&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;The title of the book&quot;        },        &quot;authors&quot;: {            &quot;type&quot;:&quot;array&quot;,            &quot;description&quot;:&quot;List of authors of the book&quot;,            &quot;items&quot;: {                &quot;$ref&quot;: &quot;Author&quot;            }        },        &quot;isbn_code&quot;: {            &quot;description&quot;: &quot;Unique identifier code of the book&quot;,            &quot;type&quot;:&quot;string&quot;        },        &quot;stores&quot;: {            &quot;type&quot;: &quot;array&quot;,            &quot;description&quot;: &quot;The stores where clients can buy this book&quot;,            &quot;items&quot;: {                &quot;type&quot;: &quot;object&quot;,                &quot;properties&quot;: {                    &quot;store&quot;: {                        &quot;$ref&quot;: &quot;Store&quot;,                    },                    &quot;copies&quot;: {                        &quot;type&quot;: &quot;integer&quot;                    }                }            }        },        &quot;genre&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;Genre of the book&quot;        },        &quot;description&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;Description of the book&quot;        },        &quot;reviews&quot;: {            &quot;type&quot;: &quot;array&quot;,            &quot;items&quot;: {                &quot;$ref&quot;: &quot;ClientReview&quot;            }        },        &quot;price&quot;: {            &quot;type&quot;: &quot;number&quot;,            &quot;minimun&quot;: 0,            &quot;description&quot;: &quot;The price of this book&quot;        }    }}/schemas/booksales.jsmodule.exports = {    &quot;id&quot;: &quot;BookSale&quot;,    &quot;properties&quot;: {        &quot;date&quot;: {            &quot;type&quot;: &quot;date&quot;,            &quot;description&quot;: &quot;Date of the transaction&quot;        },        &quot;books&quot;: {            &quot;type&quot;: &quot;array&quot;,            &quot;description&quot;: &quot;Books sold&quot;,            &quot;items&quot;: {                &quot;$ref&quot;: &quot;Book&quot;            }        },        &quot;store&quot;: {            &quot;type&quot;: &quot;object&quot;,            &quot;description&quot;: &quot;The store where this sale took place&quot;,            &quot;type&quot;: &quot;object&quot;,            &quot;$ref&quot;: &quot;Store&quot;        },        &quot;employee&quot;: {            &quot;type&quot;: &quot;object&quot;,            &quot;description&quot;: &quot;The employee who makes the sale&quot;,            &quot;$ref&quot;: &quot;Employee&quot;        },        &quot;client&quot;: {            &quot;type&quot;: &quot;object&quot;,            &quot;description&quot;: &quot;The person who gets the books&quot;,            &quot;$ref&quot;: &quot;Client&quot;,        },        &quot;totalAmount&quot;: {            &quot;type&quot;: &quot;integer&quot;        }    }}/schemas/client.jsmodule.exports = {    &quot;id&quot;: &quot;Client&quot;,    &quot;properties&quot;: {        &quot;name&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;Full name of the client&quot;        },        &quot;address&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;Address of residence of this client&quot;        },        &quot;phone_number&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;Contact phone number for the client&quot;        },        &quot;email&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;Email of the client&quot;        }    }}/schemas/employee.jsmodule.exports = {    &quot;id&quot;: &quot;Employee&quot;,    &quot;properties&quot;: {        &quot;first_name&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;First name of the employee&quot;        },        &quot;last_name&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;Last name of the employee&quot;        },        &quot;birthdate&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;Date of birth of this employee&quot;        },        &quot;address&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;Address for the employee&quot;        },        &quot;phone_numbers&quot;: {            &quot;type&quot;: &quot;array&quot;,            &quot;description&quot;: &quot;List of phone numbers of this employee&quot;,            &quot;items&quot;: {                &quot;type&quot;: &quot;string&quot;            }        },        &quot;email&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;Employee&#39;s email&quot;        },        &quot;hire_date&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;Date when this employee was hired&quot;        },        &quot;employee_number&quot;: {            &quot;type&quot;: &quot;number&quot;,            &quot;description&quot;: &quot;Unique identifier of the employee&quot;        }    }}/schemas/store.jsmodule.exports = {    &quot;id&quot;: &quot;Store&quot;,    &quot;properties&quot;: {        &quot;name&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;The actual name of the store&quot;        },        &quot;address&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;The address of the store&quot;        },        &quot;state&quot;: {            &quot;type&quot;: &quot;string&quot;,            &quot;description&quot;: &quot;The state where the store resides&quot;        },        &quot;phone_numbers&quot;: {            &quot;type&quot;: &quot;array&quot;,            &quot;description&quot;: &quot;List of phone numbers for the store&quot;,            &quot;items&quot;: {                &quot;type&quot;: &quot;string&quot;            }        },        &quot;employees&quot;: {            &quot;type&quot;: &quot;array&quot;,            &quot;description&quot;: &quot;List of employees of the store&quot;,            &quot;items&quot;: {                &quot;$ref&quot;: &quot;Employee&quot;            }        }    }}swagger-uiThis folder contains the downloaded Swagger UI project, so we will not go over this particular code; however, I will mention the minor modifications we’ll need to do to the index.html file to get the UI to properly load.  Edit the routes for all the resources loaded (CSS and JS files) to start withswagger-ui/.  Change the URL for the documentation server to http://localhost:9000/api-docs (around line 31).  Uncomment the block of code in line 73. Set the right value to the apiKeyvariable (set it to 777).Root FolderThis is the root of the project. There are only two files here: the main index.js and the package.json file that contains the dependencies and other project attributes./package.json{    &quot;name&quot;: &quot;come_n_read&quot;,    &quot;version&quot;: &quot;1.0.0&quot;,    &quot;description&quot;: &quot;&quot;,    &quot;main&quot;: &quot;index.js&quot;,    &quot;scripts&quot;: {        &quot;test&quot;: &quot;echo &quot;Error: no test specified&quot; &amp;amp;&amp;amp; exit 1&quot;    },    &quot;author&quot;: &quot;&quot;,    &quot;license&quot;: &quot;ISC&quot;,    &quot;dependencies&quot;: {        &quot;colors&quot;: &quot;^1.0.3&quot;,        &quot;halson&quot;: &quot;^2.3.1&quot;,        &quot;mongoose&quot;: &quot;^3.8.23&quot;,        &quot;mongoose-json-select&quot;: &quot;^0.2.1&quot;,        &quot;restify&quot;: &quot;^2.8.5&quot;,        &quot;swagger-node-restify&quot;: &quot;^0.1.2&quot;,        &quot;tv4&quot;: &quot;^1.1.9&quot;,        &quot;tv4-formats&quot;: &quot;^1.0.0&quot;,        &quot;underscore&quot;: &quot;^1.7.0&quot;    }}The most interesting part of this file is the list of dependencies. The rest was autogenerated using the init option of the npm command-line tool./index.jsvar restify = require(&quot;restify&quot;),    colors  = require(&quot;colors&quot;),    swagger = require(&quot;swagger-node-restify&quot;),    config  = lib.configvar server = restify.createServer(lib.config.server)// Middleware setupserver.use(restify.queryParser())server.use(restify.bodyParser())restify.defaultResponseHeaders = function(data){    this.head(&#39;Access-Control-Allow-Origin&#39;,&#39;*&#39;)}// Middleware to check for valid api key sentserver.use((req,res,next)=&amp;gt;{    // Move forward if we&#39;re dealing with the swagger-ui or a valid key    if(req.url.indexOf(&quot;swagger-ui&quot;) !=-1 || lib.helpers.validateKey(req.headers.hmacdata || &#39;&#39;, req.params.api_key, lib)){ next() }    else { req.send(401, {error:true,msg:&#39;Invalid api key sent&#39;}) }})// Vlidate each request, as long as there is a schema for itserver.use((req,res,next)=&amp;gt;{    var results = lib.schemaValidator.validateRequest(req)    if(!result.valid) res.send(400,result)    else next()})// The swagger-ui is inside the &quot;sagger-ui&quot; folderserver.get(/^/swagger-ui(/.*)?/, restify.serveStatic({    directory: __dirname + &#39;/&#39;,    default: &#39;index.html&#39;}))// serup sectionswagger.addModels(lib.schemas)swagger.setAppHandler(server)lib.helpers.setupRoutes(server,swagger,lib)swagger.configureSwaggerPaths(&quot;&quot;,&quot;/api-docs&quot;,&quot;&quot;)  //we remove the {format} part of the paths, toswagger.configure(&#39;http://localhost:9000&#39;, &#39;0.1&#39;)// Start the serverserver.listen(config.server.port, () =&amp;gt; {     console.log(&quot;Server started succesfully...&quot;.green)     lib.db.connect((err) =&amp;gt; {         if(err) console.log(&quot;Error trying to connect to database: &quot;.red,err.red)         else console.log(&quot;Database service successfully started&quot;.green)     })})And finally, the main file, the one that starts it all up, the index.js. There are four distinct sections to this file:  The initial section, which requires all needed modules and instantiates the server.  The middleware setup section, which handles setting up all pieces of middleware (we’ll go over this in a bit).  The setup section, which handles loading models, controllers, setting up routes, and whatnot.  The server start section, which starts the web server and the database client.The initial and final sections of the file don’t really require much explanation since they’re pretty self- explanatory, so let’s go over the other two.Middleware SetupThe middleware setup is potentially the most important part of the file and of the bootstrap process required for the API to start up and function properly.But thanks to the ease of use and simplicity that the middleware mechanics bring to the table, it’s very easy to write and understand. We’re setting up five different middleware here:  The query parser to turn the query parameters into an object so that we can access them easily.  The body parser so that we can access the content of the POST and PUT requests as an object, with the added bonus of autoparsing JSON strings.  The security check, which takes care of rehashing the request every time to make sure that we’re dealing with an authenticated client.  The validate check, which validates the request against any existing JSON Schema.  The static content folder, which is not exactly a middleware, but acts as one for onespecific set of routes, allowing Restify to serve static content.Setup SectionThis last section is also very important; those five lines actually handles instantiating all the models, linking Swagger and the Restify server, setting up all the routes (linking the code of each action to the corresponding path and method defined in the spec section), and finally, setting up the route for the Swagger back-end server.SummaryYou should now have a working version of our API, capable of doing pretty much everything we set up to do in Chapter 6. You should also have a better understanding of how these modules work. Ideally, you’ll consider them for your next project. Of course, there are alternatives like the ones discussed in the article REST API Node Modules.",
      "url": " /2016/developing-a-rest-api-with-node-js/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-planning-a-rest-api": {
      "title": "Planning a REST API",
      "content"	 : "The final result of this article will be all the information you need to start the development process of an REST API. This article is going to use a bookstore API, as an example API.The caseLet’s call our fake bookstore Come&amp;amp;Read and assume that we’ve been asked to create a distributed API that will bring the bookstore into the twenty-first century.Right now, it’s a pretty decent business. The bookstore currently has 10 different points of sale located across the United States. The company leadership is considering expanding into even more states. The current main problem, though, is that all of those stores have barely entered the digital era. The way of working and recordkeeping is very manual and heterogeneous; for instance:  Some of the smaller stores keep records on paper and send a manually typed weekly report to the head store.  While the bigger locations tend to use some sort of CRM software, there is no standard as long as numbers are exported into a common format and sent in a weekly report.  Based on the weekly reports, the head store handles inventory of the chain-wide matters (store-specific stock, global stock, sales both per-store and global, employee records, etc.).  Overall, the bookstore lacks web interaction with its customers, which a twenty-first century business must have. Its web site only lists addresses and phone numbers, and nothing more.All of the secondary stores are connected by a very thin line to the main store.The goal is to grow as a business, by not only opening new stores across the country but by also strengthening the bond between all the stores. And to achieve this, the backbone of everything will be our API. Our system will have to be a decentralized one, meaning that you’ll treat the main store just like any other store, and provide a common set of tools and data sources for every client application that might come in the future, instantly allowing for such things as the following:  Cross-store searches  Automatic control of global stock  Automatic control over sales on a global level  Dynamic data sources for things like web sites and mobile appsThe new system lives in the cloud, with all stores connected directly to it. The bond is stronger now, since everything is done automatically and every piece of information is available to all stores. Also, this new API-based system allows for the easy development of new ways to interact with potential customers, including mobile apps and dynamic web sites.The SpecificationsNow that we know the current situation of the chain and the goal of our system, we need to start writing some hard specs. These will determine the way the system evolves and help with planning the development by giving us a better idea of the size of the project. Specifications also help us spot any design errors before we start with the implementation.We will not spend much time on the process of writing the system’s specs, since that subject is beyond the scope of this book. We’ll just lay down the specs and note anything that might be extremely relevant, the rest will be left to your understanding of this process.To provide everything mentioned, the system needs to have the following features:  Cross-store book search/listing capabilities.  Storage: This code is in charge of providing the information to all other entities, as well as talking directly to the data storage system that you choose.  Sales: This feature is dedicated to allow for both in-store and online sales.  User reviews of books: This will provide a much-needed layer of interaction between the stores and the potential clients.  Authentication: For store employees and for customers.The table belo describes the resources that we’ll be dealing with in this implementation:            Resource      Properties      Description                  Books      Title, Authors, ISBN Code, Stores, Genre, Description, Reviews, Price      This is the main entity; it has all the properties required to identify a book and to locate it in a specific store.              Authors      Name, Description, Books, Website, Image/Avatar      This resource is highly related to a book’s resource because it lists the author of every book in a store.              Stores      Name, Address, State, Phone numbers, Employees      Basic information about each store, including the address, employees, and so forth.              Employees      First name, Last name, Birthdate, Address, Phone numbers, Email, HireDate, EmployeeNumber, Store      Employee information, contact data, and other internal properties that may come in handy for an admin type of user.              Clients      Name, Address, Phone number, Email      Basic contact information about a client.              BookSales      Date, Books, Store, Employee, Client, TotalAmount      The record of a book sale. It can be related to a store sale or an online sale.              ClientReviews      Client, Book, ReviewText, Stars      The resource in which client reviews about a book is saved. The client can enter a short free-text review and a number between 0 and 5 to represent stars.      Even though it’s not listed in the table above, all resources will have some database-related attributes, such as id, created_at, and updated_at, which you’ll use throughout the code.Based on the resources in the table above, let’s create a new table that lists the endpoints needed for each resource. The table below helps define the functionalities that each resource will have associated to it.            Endpoint      Attributes      Method      Description                  /books      q: Optional search term. genre: Optional filtering by book genre. Defaults to “all”.      GET      Lists and searches all books. If the q parameter is present, it’s used as a free-text search; otherwise, the endpoint can be used to return lists of books by genre.              /books             POST      Creates a new book and saves it in the database.              /books/:id             GET      Returns information about a specific book.              /books/:id             PUT      Updates the information on a book.              /books/:id/authors             GET      Returns the author(s) of a specific book.              /books/:id/reviews             GET      Returns user reviews for a specific book.              /authors      genre: Optional; defaults to “all”. q: Optional search term.      GET      Returns a list of authors. If genre is present, it’s used to filter by the type of book published. If q is present, it’s used to do a free- text search on the author’s information.              /authors             POST      Adds a new author.              /authors/:id             PUT      Updates the data on a specific author.              /authors/:id             GET      Returns the data on a specific author.              /authors/:id/books             GET      Returns a list of books written by a specific author.              /stores      state: Optional; filters the list of stores by state name.      GET      Returns the list of stores.              /stores             POST      Adds a new store to the system.              /stores/:id             GET      Returns the data on a specific store.              /stores/:id/books      q: Optional; does a ull-text search of books within a specific store.      GET      Returns a list of books that are in stock at a specific store. If the attribute q is used, it performs a full-text search on those books.              /stores/:id/employees             GET      Returns a list of the employees working at a specific store.              /stores/:id/booksales             GET      Returns a list of the sales at a specific store.              /stores/:id             PUT      Updates the information about a specific store.              /employees             GET      Returns a full list of the employees working across all stores.              /employees             POST      Adds a new employee to the system.              /employees/:id             GET      Returns the data on a specific employee.              /employees/:id             PUT      Updates the data on a specific employee.              /clients             GET      Lists clients ordered alphabetically by name.              /clients             POST      Adds a new client to the system.              /clients/:id             GET      Returns the data on a specific client.              /clients/:id             PUT      Updates the data on a specific client.              /booksales      start_date: Filters records that were created after this date. end_date: Optional; filters records that were created before this date. store_id: Optional; filters records by store.      GET      Returns a list of sales. The results can be filtered by time range or by store.              /booksales             POST      Records a new book sale.              /clientreviews             POST      Saves a new client review of a book.                  *Even though they’re not specified, all endpoints that deal with listing resources will accept the following attributes: page (starting at 0, the page number to return); perpage (the number of items per page to return); and a special attribute called sort, which contains the field name by which to sort the results and the order in the following format: [FIELD_NAME]_[ASC      DESC] (e.g., title_asc).*      The table above gives us a pretty good idea of the size of the project. With it we’re able to estimate the amount of work that we have ahead of us.The authentication scheme will be simple. As discussed in previuos articles, we’ll use the stateless alternative by signing every request with a MAC (message authentication code). The server will re-create that code to verify that the request is actually valid. This means there will not be a signing process embedded into our system, that can be done by the client. No need to worry about that for now.Since it’s not part of the scope of this article, the API will not handle charging for the book sales. This means that we’ll assume that the book sale was done outside of our system, and that another system will post the results into our API to keep a record of it. In a production system, this is a good way to handle this functionality inside the API itself, thus providing a complete solution.Keeping Track of Stock per StoreEvery book tracks which stores it is being sold at. What is not completely clear, however, is what happens if there is more than one copy of the same book per store.To keep track of this number, let’s enhance the relation between the books and the stores models by assigning another element: the number of copies. This is how the system will keep global stock of every book.Choosing a Database Storage SystemLets go over some of the most common choices for a database storage system. I’ll talk a bit about each one and we’ll decide on one of them.The bottom line is that all the solutions are valid, you could very well go with any of them, but we’ll need to choose one in the end, so let’s define what it is needed in the database system:  Speed of development: Because you want the process to go quickly and not have interaction with the database be a bottleneck, you need something that integrates easily.  Easy-to-change schema: With everything predefined, you have a pretty solid idea of what the schema is going to look like, but you might want to adjust things during development. It’s always better if the storage you’re using allows for this without a lot of hustle.  Ability to handle entity relations: This means that key/value stores are out of the question.  Seamless integration between the entities’ code and the database representation of the data.We want something that can be integrated fast, changed easily, and is not key/value. Therefore, the options are as follows:  MySQL: A classic choice when it comes to relational databases.  PostgreSQL: Another great choice when it comes to relational database engines.  MongoDB: A document-based NoSQL database engine.Let’s analyze how well each one of them complies with our requirements.Fast IntegrationIntegration with the system means how easily the modules interact with the specific database engine.With MySQL and PostgreSQL, there is Sequelize, which provides very complete and powerful object-relational mapping (ORM). It lets you focus more on the data model than on the actual engine particularities. Besides, if you use it right, you can potentially switch between both engines with minimum impact on the code.On the other hand, with MongoDB you have Mongoose.js, which allows you to abstract your code from the engine, simplifying your task when it comes to defining the schemas, validations, and so forth.Easy-to-Change SchemasThe fixed structure provided by both MySQL and PostgreSQL makes it harder to maintain dynamic schemas.Every time you make a change, you’ll need to update the schema by running migrations. The lack of structure provided by the NoSQL engines makes MongoDB the perfect choice for our project, because making a change on the schema is as simple as making the changes on the definition code, no migration or anything else required.Ability to Handle Entity RelationsSince we’re leaving out key/value stores like Redis, all of our three options are able to handle entity relations.Both MySQL and PostgreSQL are especially good at this, since they’re both relational database engines. But let’s not rule out MongoDB, it is document-based NoSQL storage, which in turn allows you to have documents (that translate directly into a MySQL record) and subdocuments, which are a special kind of relation that we don’t have with our relational options.Subdocument relations help to simplify both schemas and queries when working with the data. Most of our relations are based on aggregation, so this might be a good way to solve that.Seamless Integration Between Our Models and the Database EntitiesThis is more of a comparison between Sequelize and Mongoose. Since they both abstract the storage layer, you need compare how that abstraction affects this point.Ideally, we want our entities (our resources’ representations in the code) to be passed to our storage layer or to interact with the storage layer.We don’t want to require an extra type of object, usually called a DTO (data transfer object), to transfer the state of our entities between layers. Luckily, the entities provided by Sequelize and by Mongoose fall into this category, so we might as well call it a draw.SummarizeWe need to pick one, so let’s summarize:  Fast integration: Let’s give this one to Sequelize, since it comes with the added bonus of being able to switch engines with minimum impact.  Easy-to-change schemas: MongoDB wins this one, hands down.  Handling of entity relations: I’d like to give this one to MongoDB as well, mainly due to the subdocuments feature.  Seamless integration with our data models: This one is a draw, so we’re not counting it.The final result seems to point toward MongoDB, but it’s a pretty close win, so in the end, personal experience needs to be taken into account as well. MongoDB is very interesting alternative when prototyping and creating something new, something that might change during the development process many times, and this is why we’ll go with it for our development. This way there is the extra insurance that if we need to change something, like adapting our data model to a new structure, we can do so easily and with minor impact. The obvious module choice here is Mongoose, which provides a layer of abstraction over the MongoDB driver.ModulesLets pick the right modules for the job.In the REST API Node Modules, I went over a list of modules that would help us achieve a pretty complete RESTful system; so let’s quickly pick some of them for this development:  Restify will be the basis of everything we do. It’ll provide the structure needed to handle and process the requests and to provide a response to them.  Swagger will be used to create the documentation. In the previous chapter, I talked about swagger-node-express, but just like that, there is one that works with Restify called (unsurprisingly enough) swagger-node-restify. This module was chosen because it integrates into our project, allowing us to autogenerate our documentation based on our original code, instead of having to maintain two different repositories.  Halson will be our module of choice for adding hypermedia to our responses. Mainly chosen because it appears to be more mature than HAL (the other modules examined for this task).  Finally, the validation of our JSONs will be done using TV4, mainly because it allows us to gather all validation errors at once.These are not the only modules that we’ll use; there are other minor auxiliary modules that will help us in different situations, but the ones listed are the ones that will help us achieve a RESTful API.SummaryWe now have all we need to start coding. We know the extent of the API for the bookstore chain that we’ll develop. We have planned the internal architecture of the system and have chosen the main modules that we’ll use.",
      "url": " /2016/planning-a-rest-api/",
      "author": "",
      "categories": "Development, Node"
    }
    ,
  

    "2016-rest-api-node-modules": {
      "title": "REST API Node Modules",
      "content"	 : "Node modules you will need when building a REST API with node:  HTTP request and response handling: This is the most basic feature. As you’re about to see, there are plenty of options out there to pick from.  Routes handling: Aside from the preceding, request handling is one of the most important and crucial parts of our system.  Pre-processing chain (middleware): You can leave out post-processing because it’s a less common feature, but pre-processing (or middleware) is common and very useful.  Up-to-date documentation: It so happens that there is a module that will help here, so you might as well add it.  Hypermedia on the response: Part of a REST, so you’ll add it using the HAL standard.  Response and request format validation: Finally, this will be an added bonus; as a good practice, always validate the format of the requests and responses.Our AlternativesInstead of looking at each point individually, you’ll take a look at each of the modules, and I’ll evaluate them accordingly. Some of them, as you’ll see, handle more than just one thing, which sometimes comes in handy because getting unrelated modules to work together is not always an easy task.Request/Response HandlingRegarding request and response handling, they usually both come in the same module. They are the basics of every HTTP application you intend to make. If you don’t know how to handle the HTTP protocol, you can’t move forward. And because Node.js is such a good fit for HTTP applications, there are quite a few modules that will help you in this task. You need something that can do the following:  Listen on a specific port for HTTP traffic.  Translate the HTTP message into a JavaScript object so that you can read it and use it without having to worry about parsing it or about any of the details of the HTTP protocol.  Write an HTTP response without having to worry about the HTTP message format.Writing code that listens in a specific port for HTTP traffic is simple, actually, Node.js provides all the tools you need, out of the box, to achieve the three preceding points. Then why do we need extra modules if we can easily do it ourselves? That’s a very valid question, and to be honest, it all depends on your needs. If the system you’re building is small enough, then it might be a good idea to build the HTTP server yourself; otherwise, it’s always good to use a well-tested and tried module. They also solve other related issues for you, such as routes handling, so going with a third-party module might be a good choice.Routes HandlingRoutes handling is tightly coupled with request and response handling. It’s the next step in the processing of the request. Once you translate the HTTP message into an actual JavaScript object that you can work with, you need to know which piece of code needs to handle it. This is where routes handling comes in.There are two sides to this part. First, you need to be able to set up the routes in your code, and associate the handler’s code with one or more specific routes. And then the system needs to grab the route of the requested resource and match it to one of yours. That might not be such an easy task. Remember that most routes in any complex system have parameterized parts for things like unique IDs and other parameters. For example, take a look at the table below:            This      needs to match this                  /v1/books/1234412      /v1/books/:id              /v1/authors/jkrowling/books      /v1/:author_name/books      Usually, routing frameworks provide some sort of templating language that allows developers to set up named parameters in the route template. Later the framework will match the requested URLs to the templates, taking into consideration those variable parts added. Different frameworks add different variations of this.MiddlewareThis is the name that the pre-processing chain normally gets in the Node.js world, and that is because the Connect framework (which is the framework most other web frameworks are based on) has this functionality. I already talked about this topic in the previous chapter, so let’s look at some examples of middleware functions that are compatible with Connect-based frameworks://Logs every request into the standard outputfunction logRequests(req, res, next) {   console.log(&quot;[&quot;, req.method, &quot;]&quot;, req.url)   next()}//Makes sure that the body of the request is a valid json object, otherwise,//it throws an errorfunction formatRequestBody(req, res, next)  {    if(typeof req.body == &#39;string&#39;) {      try {        req.body = JSON.parse(req.body)     } catch (ex) {       next(&quot;invalid data format&quot;)     }}next()}Both examples are different, but at the same time they share a common function signature. Every middleware function receives three parameters: the request object, the response object, and the next function.The most interesting bit here is the last parameter, the next function, calling it is mandatory unless you want to end the processing chain right there. It calls the next middleware in the chain, unless you pass in a value, in which case it’ll call the first error handler it finds and it’ll pass it the parameter (normally an error message or object).The use of middleware is very common for things like authentication, logging, session handling, and so forth.Up-to-Date DocumentationKeeping up-to-date documentation of the API’s interface is crucial if you want developers to use your system. I’ll go over some modules that will help in that area. Some of the modules add more overhead than others, but the main goal is to have some sort of system that updates its documentation as automatically as possible.Hypermedia on the ResponseIf you want to follow the REST style to the letter, you need to work this into your system. It is one of the most forgotten features of REST—and a great one, since it allows for self-discovery, another characteristic of a RESTful system.For this particular case, you’ll go with a pre-defined standard called HAL, so you’ll be checking out some modules that allow you to work with this particular format.Response and Request validationI’ll also go over some modules that will let you validate both the response and the request format. Our API will work with JSON alone, but it’s always useful to validate the structure of that JSON in the request due to errors in the client application, and in the response to ensure that there are no errors in the server side after code changes.Adding a validation on every request might be too big of an overhead, so an alternative might be a test suite that takes care of doing the validation when executed. But the request format validation will have to be done on every request to ensure that the execution of your system is not tainted by an invalid request.The List of ModulesNow let’s go over some modules that take care of one or several of the categories mentionedWe won’t compare them because it’s not an easy thing to do considering that some modules only handle one thing, whereas others take care of several things. So after going over then, I’ll propose a combination of these modules, but you will have enough information to pick a different combo if it fits your problem better.HAPIHAPI Module Information:                                      Category      Request/Response handler, Routes handler              Description      HAPI is a configuration-centric web framework designed to create any kind of web application, including APIs. The main goal of HAPI is to allow developers to focus on coding the logic of an application, leaving infrastructure code to the framework.              Home page URL      http://hapijs.com/              Installation      npm install hapi      Code ExamplesAfter installation, the most basic thing you can do to initialize the system:var hapi = require(&quot;hapi&quot;)var server = new hapi.Server()server.connection({ port: 3000 })server.start(function() {  console.log(&quot;Server running at: &quot;, server.info.url)})As you can see, this example is quite basic, but the steps required to initialize the application are there. The server.connection line returns a server object with the new connection selected. That means you could maintain several open connections at the same time, like this:var Hapi = require(&#39;hapi&#39;);var server = new Hapi.Server()// Create the API server with a host and portvar apiServer = server.connection({    host: &#39;localhost&#39;,    port: 8000})//Get list of books for normal client appapiServer.route({    method: &#39;GET&#39;,    path: &#39;/books&#39;,    handler: function(req, reply) {        //... code to handle this route    }})// Create the Admin  server with a portvar adminServer = server.connection({port: 3000 })//Setup route to get full list of users for admin (with with credential information)adminSever.route({    method: &#39;GET&#39;,    path: &#39;/users&#39;,    handler: function(req, reply) {        //check credentials...        //get full list of users...        //reply(list)    }})server.start(function() { console.log(&quot;Server started!&quot;)})This code initializes the application, which in turn sets up two different servers: one for the API itself and another one for an admin system. In this code you can also see how easy it is to set up routes with HAPI. Although the code can clearly be cleaned up and the routes definitions can be taken out to a separate file, this is a great example of how two (or more!) servers with their respective routes can be configured using this framework.Another interesting bit that HAPI provides is the route templates you can use by setting up your own. With it, you can use named parameters, in the following way:var Hapi = require(&#39;hapi&#39;)var server = new Hapi.Server()server.connection({ port: 3000 })var getAuthor = function (request, reply) {        // here the author and book parameters are inside        // request.params}server.route({    path: &#39;/{author}/{book?}&#39;,    method: &#39;GET&#39;,    handler: getAuthor})In the preceding code, when setting up the route, anything that’s inside curly brackets is considered a named parameter. The last one, has an ? added to it, which means it’s optional.Only the last named parameter can be set as optional.*In addition to the ? mark, you can use another special character to tell HAPI the number of segments a named parameter should match. That character is the * and it should be followed by a number greater than 1, or nothing, if you want it to match any number of segments.Just like the ? mark, only the last parameter can be configured to match any number of segments.server.route({    path: &#39;/person/{name*2}&#39;, // Matches &#39;/person/john/doe&#39;    method: &#39;GET&#39;,    handler: getPerson})server.route({    path: &#39;/author/{name*}&#39;, // Matches &#39;/author/j/k/rowling&#39; or &#39;/author/frank/herbert&#39;or /author/    method: &#39;GET&#39;,    handler: getAuthor})function getAuthor(req, reply) {   // The different segments can be obtained like this:  var segments = req.params.name.split(&#39;/&#39;)}Express.js                                      Category      Request/Response handler, Routes handler, Middleware              Description      Express is a full-fledged web framework providing small and robust tools for HTTP servers, making it a great candidate for all kinds of web applications, including RESTful APIs.              Home page URL      http://expressjs.com              Installation      npm install –g express-generator      Code ExamplesExpress.js is sometimes considered the de facto solution when it comes to building a web application in Node.js. That being said, it doesn’t mean Express.js should be the only choice or that it is right choice for every project.In version 4 it provides a generator. To initialize the entire project, you have to use the following line of code:$express ./express-testThe framework generates a lot of folders and files, but in general, it’s the structure for a generic web application, one that has views, styles, JavaScript files, and other web app–related resources. This is not for us since we’re building a RESTful API. You’ll want to remove those folders (views and public, more specifically).To finalize the process, just enter the folder and install the dependencies; this will leave you with a working web application. Check the app.js file if you’re curious about what it takes to initialize the framework.Let’s now take a look at what it takes to set up a route in Express.js://...var app = express()//...app.get(&#39;/&#39;, function(req, res) {  console.log(&quot;Hello world!&quot;)})All that you need to remember when setting up a route is the following: app.VERB(URL-TEMPLATE, HANDLER-FUNCTION). The handler function will receive three parameters: the request object, the response object, and the next function. The last parameter is only useful when you set up more than one handler for the same route and method combination, that way you can chain the methods like they are middleware.Take a look at the following example:app.route(&#39;/users/:id&#39;)   .all(checkAuthentication)   .all(loadUSerData)   .get(returnDataHandler)   .put(updateUserHandler)In the preceding code, there are several interesting things happening:  A named parameter is used for the ID of the user.  Two middleware functions are set up for every verb hitting the ‘/users/:id’ route.  It’s setting up a handler for the GET method hitting the URL, and at the same time, it’s setting up a handler for when the verb is PUT—all in the same line of code.Express provides its own flavor of named parameters, but there are other things you can do. For instance, you can use regular expressions:router.get(/^/commit/(w+)(?:..(w+))?$/, function(req, res){  var from = req.params[0];  var to = req.params[1] || &#39;HEAD&#39;;  res.send(&#39;commit range &#39; + from + &#39;..&#39; + to);});The preceding code matches both ‘/commit/5bc2ab’ and ‘/commit/5bc2ab..57ba31’, and you can see that getting the parameter inside the handler’s code is simple too.You can also set a callback function to do some processing when a specific named parameter is received:var router = express.Router()router.param(&#39;user_id&#39;, function(req, res, next, id) {   loadUser(id, function(err, usr) {      if(err) {         next(new Error(&quot;There was an error loading the user&#39;s information&quot;)) //this willcall erorr handler      } else {         req.user = usr         next()      }  })})//then on the route definitionapp.get(&#39;/users/:user_id&#39;, function(req, res) {    //req.user is already defined and can be used})If there is an error on the user_id callback function, then the route’s handler will never be called, because the first error handler will be called instead.I already covered the basics for this type of function earlier, but you never saw how to use it with Express.js. You can do it in two ways: set up a global middleware or a route-specific one.For a global middleware:app.use(function(req, res, next) {   //your code here will be executed on every request   next() //remember to call next unless you want the chain to end here.})For a route-specific middleware, you do this:app.use(&#39;/books&#39;, function(req, res, next){        //this function will only be called on this path        next() //always important to call next unless you don&#39;t want the process&#39; flow tocontinue.})You can even set up a route-specific stack of middleware, just by doing this:app.use(&#39;/books&#39;, function(req, res, next){//this function will only be called on this pathnext() //always important to call next unless you don&#39;t want the process&#39; flow to continue.}, function(req, res, next) {    //as long as you keep calling next, the framework will keep advancing in the chain untilreaching the actual handler     next()})Restify                                      Category      Request/Response handler, Routes handler, Middleware              Description      Restify is a framework specifically design for building REST APIs. It borrows heavily from Express.js (specifically, versions prior to 4.0) because Express is considered the standard when it comes to building web apps.              Home page URL      http://mcavage.me/node-restify/              Installation      npm install restify      Code ExamplesRestify borrows a lot of its features from Express, so I’ll focus on the things that it adds.Initialization is simpler than with Express. The following code is all you need to start up a server:var restify = require(&#39;restify&#39;);var server = restify.createServer({   name: &#39;MyApp&#39;,});server.listen(8080);The createServer method provides some helpful options that will simplify your job in the future. Table 5-5 lists some of Restify’s options.            Option      Description                  certificate      For building HTTPS servers, pass in the path to the certificate here.              key      For building HTTPS servers, pass in the path to the key file here.              log      Optionally, you can pass in an instance of a logger. It needs to be an instance of node-bunyan.2              name      The name of the API. Used to set the server response header; by default it is “restify”.              version      A default version for all routes.              formatters      A group of content formatters used for content-negotiation.      In the most basic ways, routes are handled just like Express, you can either pass in the path template and the route handler, or you can pass in a regular expression and the handler.In a more advanced way, Restify provides some goodies that Express doesn’t. The following subsections provide some examples.Naming RoutesYou can set up names for specific routes, which will in turn, allow you to jump from one handler to others using that attribute. Let’s look at how to set up the names first:server.get(&#39;/foo/:id&#39;, function (req, res, next) { next(&#39;foo2&#39;);});server.get({    name: &#39;foo2&#39;,    path: &#39;/foo/:id&#39;}, function (req, res, next) {   res.send(200);   next();});This code is setting up two different handlers for the same path, but Restify will only execute the first handler it finds, so the second one will never get executed unless the next statement is called with the name of the second route.Naming is also used to reference routes when rendering the response, which allows for an interesting feature, hypermedia on the response. To be honest, the solution proposed by Restify is a bit basic and it doesn’t really provide a good mechanism for automatically adding hypermedia for self-discovery, but it is more than most other frameworks do. Here is how it works:var restify = require(&quot;restify&quot;)var server = restify.createServer()server.get({    name: &#39;country-cities&#39;,    path: &#39;/country/:id/cities&#39;}, function(req, res, next) {      res.send(&#39;cities&#39;)})server.get(&#39;/country/:id&#39;, function(req, res, next) {  res.send({    name: &quot;Uruguay&quot;,    cities: server.router.render(&#39;country-cities&#39;, {id: &quot;uruguay&quot;})    })})server.listen(3000)Versioning RoutesRestify provides support for a global version number, as you saw earlier, but it also provides the ability to have different versions on a per-route basis. And, it also provides support for the Accept-version header to pick the right route.If the header is missing, and more than one version for the same route is available, Restify will pick the first one defined in the code.function respV1(req, res, next) {  res.send(&quot;This is version 1.0.2&quot;)}function respV2(req, res, next) {  res.send(&quot;This is version 2.1.3&quot;)}var myPath = &quot;/my/route&quot;server.get({path: myPath, version: &quot;1.0.2&quot;},  respV1)server.get({path: myPath, version: &quot;2.1.3&quot;},  respV2)Now, when hitting the path with different values for Accept-version, the information in the table below is what you get:            Version Used      Response      Description                         This is version 1.0.2      No version was used, so by default, the server is picking the first one defined.              ~1      This is version 1.0.2      Version 1.x.x was selected, so that is what the server responds with.              ~3      {&quot;code&quot;: &quot;InvalidVersion&quot;,&quot;message&quot;: &quot;GET /my/route supports versions: 1.0.2, 2.1.3&quot;}      An error message is returned when an unsupported version is requested.      Content NegotiationAnother interesting feature that Restify provides is support for content negotiation. All you need to do to implement this feature is provide the right content formatters during initialization, like this:restify.createServer({  formatters: {    &#39;application/foo; q=0.9&#39;: function formatFoo(req, res, body) {      if (body instanceof Error)        return body.stack;      if (Buffer.isBuffer(body))        return body.toString(&#39;base64&#39;);      return util.inspect(body);    }  }})By default, Restify comes bundled with formatters for application/json, text/plain, and application/ octect-stream.Vatican.js                                      Category      Request/Response handler, Middleware, Routes handling              Description      Vatican.js is another attempt of a framework designed to create RESTful APIs. It doesn’t follow the Express/Restify path. Its focus is more on the MVP stage of the API, but it provides an interesting alternative.              Home page URL      http://www.vaticanjs.info              Installation      npm install –g vatican      Code ExamplesAfter installation, Vatican.js provides a command-line script to create the project and add resources and resource handlers to it. So to get the project started:$ vatican new test_projectThe main file (index.js) has the following content:var Vatican = require(&quot;vatican&quot;)//Use all default settingsvar app = new Vatican()app.dbStart(function() {    console.log(&quot;Db connection stablished...&quot;)    //Start the server    app.start()})Vatican comes with MongoDB integration, so the dbStart method is actually a reference to the connection to the NoSQL storage. By default, the server is assumed to be in localhost and the database name used is vatican-project.The default port for Vatican is 8753, but just like all defaults in Vatican, it can be overwritten during the instantiation stage. These are the options that can be passed in to the constructor, as shown in the table below:            Option      Description              port      Port of the HTTP server.              handlers      Path to the folder where all handlers are stored. By default it’s ./handlers.              db      Object with two attributes: host and dbname.              cors      This is either a Boolean indicating whether CORS is supported by the API, or an object indicating each of the supported headers.      Setting up a route in Vatican is also a bit different than the others, the command-line script provides the ability to autogenerate the code for the entity/model file and the controller/handler file, which also includes basic code for the CRUD operations. To autogenerate the code:$ vatican g Books -a title:string description:string copies:int -m newBook:post listBooks:get removeBook:deleteIt basically means that Vatican creates both the handler file and the entity. If you check the handler’s file, you’ll notice how all the actions already have their code. That’s because Vatican was able to guess the meaning of the actions provided in the command line by using their name:  newBook: Using “new” assumes you’re creating a new instance of the resource.  listBooks: Using “list” assumes you want to generate a list of items.  removeBook: Using “remove” assumes you’re trying to remove a resource.Variations of those words are also valid, and Vatican will use them to guess the code. You can now go ahead and start the server, the endpoints will work and save information to the database.One final comment on resource generation is about routing. Vatican auto creates them for you. Inside the handler file, you’ll notice annotations in the form of the following:@endpoint (url: /books method: post)BooksHdlr.prototype.newBook = function(req, res, next) {var data = req.params.body//...maybe do validation here?this.model.create(data, function(err, obj) {    if(err) return next(err)    res.send(obj)})}The annotation above the method’s definition is not standard JavaScript, but Vatican is able to parse it and turn it into data during boot up. That means that with Vatican there is no routes file; each route is defined above its associated method, and if you want to get a full list of routes for your system, you can use the following command line:$ vatican listThe annotations can be commented out with a single line to avoid your editor/linter from complaining about the construct; even then, Vatican.js will be able to parse it.Finally, Vatican also fits inside the middleware category, and that’s because even though it’s not based on Connect or Express, it does support Connect-based middleware. The only difference is the method name that uses it.vatican.preprocess(middlewareFunction) //generic middleware for all routesvatican.preprocess(middelwareFunction, [&#39;login&#39;, &#39;authentication&#39;]) //middleware for tworoutes: login and authentication.To set the name of a route, you can add that parameter in the annotation, like this:@endpoint(url: /path method: get name: login)swagger-node-express                                      Category      Up-to-date documentation              Description      This is a module for Express. It integrates into an Express app and provides the functionalities that Swagger does for documenting APIs, which is a web interface with documentation of each method and the ability to try these methods.              Home page URL      https://github.com/swagger-api/swagger-node-express              Installation      npm install swagger-node-express      Code ExamplesThe first thing you need to do after you install the module is integrate Swagger into your Express app:// Load module dependencies.var express = require(&quot;express&quot;), app = express(), swagger = require(&quot;swagger-node-express&quot;).createNew(app);// Create the application.app.use(express.json());app.use(express.urlencoded());After integration is done, the next thing to do is add the models and the handlers. The models are in the form of JSON data, where this is defined is left to the preference of the developer. The handlers contain the actual code of the route handlers, along with other descriptive fields that act as documentation. Let’s look at an example of a model definition:exports.models = {       &quot;Book&quot;: {               &quot;id&quot;: &quot;Book&quot;,               &quot;required&quot;: [&quot;title&quot;, &quot;isbn&quot;],               &quot;properties&quot;: {                            &quot;title&quot;: {         &quot;type&quot;: &quot;string&quot;,         &quot;description&quot;: &quot;The title of the book&quot;}, &quot;isbn&quot;: {                                &quot;type&quot;: &quot;string&quot;,&quot;description&quot;: &quot;International Standard Book Number&quot;},                            &quot;copies&quot;: {         &quot;type&quot;: &quot;integer&quot;,         &quot;format&quot;: &quot;int64&quot;,         &quot;description&quot;: &quot;Number of copies of the book owned                                    }                            }               }}As you can see, the format used is JSON Schema and it might be tedious to maintain, but it provides a standard way for Swagger to understand how our models are created.Manually maintaining a lot of model descriptions might be too much work, and it’s prone to generate errors in the documentation, so it might be a good idea to either use the description to autogenerate the code of the model, or autogenerate the description from the model’s code.Once the model description is done, you add it to Swagger like this:// Load module dependencies.var express = require(&quot;express&quot;), swagger = require(&quot;swagger-node-express&quot;), models = require(&#39;./models-definitions&#39;).models //....swagger.addModels(models)Now you move on to the handler’s description, which contains fields describing each method, and the actual code to execute.//Book handler&#39;s fileexports.listBooks = {&quot;spec&quot;: {by title or isbn&quot;, &quot;string&quot;)]              },              &quot;action&quot;: function(req, res) {                          //...}}//main file&#39;s codevar bookHandler = require(&quot;./bookHandler&quot;)//...swagger.addGet(bookHandler.listBooks) // adds the handler for the list action and the actualaction itselfThis code shows how to describe a specific service (a list of books). Again, some of these parameters can be autogenerated, otherwise, manually maintaining a lot of specs can lead to outdated documentation.Finally, set up the URLs for the Swagger UI (which will display the documentation and will also provide the UI to test the API) and the version:swagger.configure(&quot;http://myserver.com&quot;, &quot;0.1&quot;)Let’s now look at a complete example of a main file, showing the setup and configuration of Swaggerand the Swagger UI./ Load module dependencies.var express = require(&quot;express&quot;), models = require(&quot;./models&quot;).models, app = express(), booksHandler = require(&quot;./booksHandler&quot;) //load the handler&#39;s definition, swagger = require(&quot;swagger-node-express&quot;).createNew(app) //bundle the app to swagger// Create the application.app.use(express.json());app.use(express.urlencoded());var static_url = express.static(__dirname + &#39;/ui&#39;) //the swagger-ui is inside the &quot;ui&quot;folderswagger.configureSwaggerPaths(&quot;&quot;, &quot;api-docs&quot;, &quot;&quot;) //you remove the {format} part of thepaths, to simplify thingsapp.get(/^/docs(/.*)?$/ , function(req, res, next) {    if(req.url === &#39;/docs&#39;) {        res.writeHead(302, {location: req.url + &quot;/&quot;})        res.end()        return}    req.url = req.url.substr(&#39;/docs&#39;.length)    return static_url(req, res, next)})//add the models and the handlerswagger    .addModels(models)    .addGet(booksHandler.listBooks)swagger.configure(&quot;http://localhost:3000&quot;, &quot;1.0.0&quot;)app.listen(&quot;3000&quot;)I/ODocs                                      Category      Up-to-date documentation              Description      I/O Docs is a live documentation system designed for RESTful APIs. By defining the API using the JSON Schema, I/O Docs generates a web interface to try out the API.              Home page URL      https://github.com/mashery/iodocs              Installation      $ git clonehttp://github.com/mashery/iodocs.git $ cd iodocs $ npm install      Code ExamplesAfter installation is done, the only thing left to do to test the application is create a configuration file; there is a config.json.sample file you can use as a starting point.To start up the documentation server, use one of the following commands:$ npm start       #for *nix and OSX systemsC:your-project-folder&amp;gt; npm startwin        #for Windows systemsAfter that, use your browser to go to http://localhost:3000 to start testing the documentation system.If you want to set up your own API, there are a few things to do:  Add your API to the list of documented APIs inside public/data/apiconfig.json like this:{&quot;klout&quot;: {        &quot;name&quot;: &quot;Klout v2 API&quot;    },    &quot;egnyte&quot;: {        &quot;name&quot;: &quot;Egnyte API&quot;    },    &quot;usatoday&quot;: {        &quot;name&quot;: &quot;USA TODAY Census API&quot;    },    &quot;foursquare&quot;: {        &quot;name&quot;: &quot;Foursquare (OAuth 2.0 Auth Code)&quot;}, &quot;rdio&quot;: {        &quot;name&quot;: &quot;Rdio Beta (OAuth 2.0 Client Credentials)&quot;    }, &quot;rdio2&quot;: {        &quot;name&quot;: &quot;Rdio Beta (OAuth 2.0 Implicit Grant)&quot;    },    &quot;requestbin&quot;: {        &quot;name&quot;: &quot;Requestb.in&quot;    },    &quot;bookstore&quot;: {        &quot;name&quot;: &quot;Dummy Bookstore API&quot;    }}  Create a new file called bookstore.json and store it inside the public/data folder. This new JSON file will contain the description of your API and the methods in it; something like this:{    &quot;name&quot;: &quot;Dummy Bookstore API&quot;,    &quot;description&quot;: &quot;Simple bookstore API&quot;,    &quot;protocol&quot;: &quot;rest&quot;,    &quot;basePath&quot;: &quot;http://api.mybookstore.com&quot;,    &quot;publicPath&quot;: &quot;/v1&quot;,    &quot;auth&quot;: {        &quot;key&quot;: {               &quot;param&quot;: &quot;key&quot;} },    &quot;headers&quot;: {        &quot;Accept&quot;: &quot;application/json&quot;,        &quot;Foo&quot;: &quot;bar&quot;    },    &quot;resources&quot;: {        &quot;Books&quot;: {          &quot;methods&quot;: {             &quot;listBooks&quot;: {                &quot;name&quot;: &quot;List of books&quot;,                &quot;path&quot;: &quot;/books&quot;,                &quot;httpMethod&quot;: &quot;GET&quot;,                &quot;description&quot;: &quot;Returns the list of books in stock&quot;,                &quot;parameters&quot;: {                   &quot;sortBy&quot;: {                        &quot;type&quot;: &quot;string&quot;,                        &quot;required&quot;: false,                        &quot;default&quot;: &quot;title&quot;,                        &quot;description&quot;: &quot;Sort the results by title or ISBN code&quot;} }             },                &quot;showBook&quot;: {                   &quot;name&quot;: &quot;Show book&quot;,                   &quot;path&quot;: &quot;/books/{bookId}&quot;,                   &quot;httpMethod&quot;: &quot;GET&quot;,                   &quot;description&quot;: &quot;Returns the data of one specific book&quot;,   &quot;parameters&quot;: {                  &quot;bookId&quot;: {                      &quot;type&quot;: &quot;string&quot;,                      &quot;required&quot;: true,                      &quot;default&quot;: &quot;&quot;,                      &quot;description&quot;: &quot;The ID of the specific book&quot;} }} }} }}  Start up the documentation server and point your web browser to it.Unlike with Swagger, this documentation system is not meant to be integrated into your project, so autogenerating the JSON code might be a bit more difficult.Halson                                      Category      Hypermedia on the response              Description      Halson is a module that helps create HAL-compliant JSON objects, which you’ll then be able to use as part of the response in your API.              Home page URL      http://github.com/seznam/halson              Installation      npm install halson      Code ExamplesThe API provided by this module is quite straightforward, and if you’ve read about the standard, you should have no problem figuring out how to use it. Here is the example from the readme:var halson = require(&#39;halson&#39;);var embed = halson({        title: &quot;joyent / node&quot;,        description: &quot;evented I/O for v8 javascript&quot;    })    .addLink(&#39;self&#39;, &#39;/joyent/node&#39;)    .addLink(&#39;author&#39;, {        href: &#39;/joyent&#39;,        title: &#39;Joyent&#39;    });var resource = halson({        title: &quot;Juraj Hájovský&quot;,        username: &quot;hajovsky&quot;,        emails: [             &quot;juraj.hajovsky@example.com&quot;,             &quot;hajovsky@example.com&quot;        ]    })    .addLink(&#39;self&#39;, &#39;/hajovsky&#39;)    .addEmbed(&#39;starred&#39;, embed);console.log(JSON.stringify(resource));All you need to know is how to add links and what an embedded object is.HAL                                      Category      Hypermedia on the response              Description      HAL is an alternative to HALSON. It provides a simpler interface but the same underlying functionality: abstracting the HAL+JSON format and giving the developer an easy way to use it.              Home page URL      https://www.npmjs.com/package/hal              Installation      npm install hal      Code ExamplesThe API of this module is simpler than the one provided by HALSON and it also provides XML encoding (remember that even though you’re not focusing on XML, it can be a possible second representation for your resources).Let’s look at a simple example:var hal = require(&#39;hal&#39;);var books = new hal.Resource({name: &quot;Books list&quot;}, &quot;/books&quot;)var listOfBooks = [  new hal.Resource({id: 1, title: &quot;Harry Potter and the Philosopher&#39;s stone&quot;, copies: 3}, &quot;/books/1&quot;),  new hal.Resource({id: 2, title: &quot;Harry Potter and the Chamber of Secrets&quot;, copies: 5}, &quot;/books/2&quot;),  new hal.Resource({id: 3, title: &quot;Harry Potter and the Prisoner of Azkaban&quot;, copies: 6}, &quot;/books/3&quot;),  new hal.Resource({id: 4, title: &quot;Harry Potter and the Goblet of Fire&quot;, copies: 1}, &quot;/books/4&quot;),  new hal.Resource({id: 5, title: &quot;Harry Potter and the Order of the Phoenix&quot;, copies: 8},&quot;/books/5&quot;),  new hal.Resource({id: 6, title: &quot;Harry Potter and the Half-blood Prince&quot;, copies: 2}, &quot;/books/6&quot;),  new hal.Resource({id: 7, title: &quot;Harry Potter and the Deathly Hollows&quot;, copies: 7},&quot;/books/7&quot;)]books.embed(&#39;books&#39;, listOfBooks)console.log(JSON.stringify(books.toJSON()))JSON-Gate                                      Category      Request/Response validation              Description      This module validates the structure and content of a JSON object against a predefined schema that follows the JSON Schema format.              Home page URL      https://www.npmjs.com/package/json-gate              Installation      npm install json-gate      Code ExamplesThe usage of this module is quite simple. First, you need to define the schema against which your objects will be validated. This can be done directly with the createSchema method or (recommended) in a separate file, and then passed to the validator. After the schema has been added, you can proceed to validate as many objects as you need:var createSchema = require(&#39;json-gate&#39;).createSchema;var schema = createSchema({    type: &#39;object&#39;,    properties: {        title: {               type: &#39;string&#39;,               minLength: 1,               maxLength: 64,               required: true}, copies: {               type: &#39;integer&#39;,               maximum: 20,               default: 1}, isbn: {               type: &#39;integer&#39;,               required: true        }    },    additionalProperties: false});var invalidInput = {    title: &quot;This is a valid long title for a book, it might not be the best choice!&quot;,    copies: &quot;3&quot;}try {   schema.validate(invalidInput);} catch(err) {    return console.log(err)}The preceding code will output the following error:[Error: JSON object property &#39;title&#39;: length is 71 when it should be at most 64]There are two things to note here:  On one hand, the error message is very “human friendly.” All the error messages reported by JSON-Gate are like this, so it’s easy to understand what you did wrong.  On the other hand, as you probably noticed, the invalidInput object has two errors in its format; the validation stops at the first error, so correcting multiple problems might be slow because you’ll have to correct them one at a time.If you’re not into catching exceptions (and why should you in Node.js?), there is an alternative to the validate method, which is passing in a second argument—a callback function with two arguments: the error object and the original input object.TV4                                      Category      Request/Response validation              Description      This module provides validation against version 4 of the JSON Schema.              Home page URL      https://www.npmjs.com/package/tv4              Installation      npm install tv4      Code ExamplesThe main difference between this validator and JSON-Gate is that this one is specific for version 4 of the JSON Schema draft. It also allows you to collect multiple errors during validation and to reference other schemas, so you can reuse parts of the schema in different sections.Let’s look at some examples:var validator = require(&quot;tv4&quot;)var schema ={    &quot;title&quot;: &quot;Example Schema&quot;,    &quot;type&quot;: &quot;object&quot;,    &quot;properties&quot;: {        &quot;firstName&quot;: {             &quot;type&quot;: &quot;string&quot;        },        &quot;lastName&quot;: {             &quot;type&quot;: &quot;string&quot;        },        &quot;age&quot;: {             &quot;description&quot;: &quot;Age in years&quot;,             &quot;type&quot;: &quot;integer&quot;,             &quot;minimum&quot;: 0} },    &quot;required&quot;: [&quot;firstName&quot;, &quot;lastName&quot;]}var invalidInput = {    firstName: 42,age: &quot;100&quot;}var results = validator.validateMultiple(invalidInput, schema)console.log(results)The output is much bigger than the one from JSON-Gate and it needs a bit of parsing before being able to use it, but it also provides quite a lot of information aside from the simple error message.SummaryThis article covered a lot of modules that will help you create the perfect API architecture. You saw at least two modules for every category on options for picking the tools for the job.",
      "url": " /2016/rest-api-node-modules/",
      "author": "",
      "categories": "Node"
    }
    ,
  

    "2016-architecting-rest-api": {
      "title": "Architecting REST API",
      "content"	 : "It is extremely important to understand a REST-based architecture, meaning how the system will look if you’re basing all of your services in the REST style. But it is equally important to know what the internal architecture of those REST services will look like before you start working.In Node.js there are several modules out there, with thousands of daily downloads that can help you create an API without having to worry too much about the internal aspects of it. And that might be a good idea if you’re in a hurry to get the product out.But, this article goes over all the components that make up a standard, general-purpose REST API from the ground up. The modules are mentioned, but we won’t go into details on how they’re used.For the purpose of this article, I’ll take the traditional approach when it comes to architecting the API, and you’ll use an MVC pattern.The basic internal architecture of a RESTful API contains the following items:  A request handler - This is the focal point that receives every request and processes it before doing anything else.  A middleware/pre-process chain - These guys help shape the request and provide some help for authentication control.  A routes handler - After the request handler is done, and the request itself has been checked and enriched with everything you need, this component figures out who needs to take care of the request.  The controller - This guy is responsible for all requests done related to one specific resource.  The Model - Also known as the resource in our case. You’ll focus most of the logic related to the resource in here.  The representation layer - This layer takes care of creating the representation that is visible to the client app.  The response handler - Last but certainly not least, the response handler takes care of sending the representation of the response back to the client.request mentioned in this chapter is an HTTP request, unless otherwise stated.The Request Handler, the Pre-Process Chain,and the Routes HandlerThe request handler, the pre-process chain, and the routes handler are the first three components in any request to your system, so they’re key to having a responsive and fast API.Luckily, you’re using Node.js, which is great at handling many concurrent requests because of its event loop and async I/O. Let’s list the attributes our request handler needs to have for our RESTful system to work as expected:  It has to gather all the HTTP headers and the body of the request, parse them, and provide a request object with that information.  It needs to be able to communicate with both the pre-processing chain module and the routes handler in order to figure out which controller needs to be executed.  It needs to create a response object capable of finishing and (optionally) writing a response back to the client.  The client application issues a request for a particular resource.  The request handler gathers all information. It creates a request object and passes it along to the pre-processing chain.  Once finished, the pre-processing chain returns the request object—with whatever changes made to it—to the request handler.  Finally, the RH sends the request and response objects to the routes handler so that the process can continue.There is one problem in the Figure above, if the pre-processing chain takes too long, the request handler must wait for it to finish before handing over the request to the routes handler, and any other incoming request is forced to wait as well.This can be especially harmful to the performance of the API if the pre-processing chain is doing some heavy-duty tasks, like loading user-related data or querying external services.Thanks to the fact that you’re using Node.js as the basis for everything here, you can easily change the pre-processing chain to be an asynchronous operation. By doing that, the request handler is able to receive new requests while still waiting for the processing chain from the previous request.The change is minimal, at least at the architectural level. The request handler sets up a callback to the routes handler and that callback is executed once the pre-processing chain is finished.And right after setting up the callback, the request handler is free again for the next request. This clearly provides more freedom to this component, allowing the entire system to process more requests per second.This change will not actually speed up the pre-processing chain time of execution, neither will it speed up the time it takes a single request to be finished, but it will allow the API to handle more requests per second, which in practice means avoiding an obvious bottleneck.As for the pre-processing chain, you’ll use it for generic operations, things that are required in most of the routes you’ll handle. That way you can extract that code from the handlers and centralize it into small units of functions that are called in sequence for every request.Most of the modules you’ll see in the next chapter have one version of the pre-processing chain. For instance, Express.js calls the functions that can be executed in the chain “middleware.” Vatican.js calls them “pre-processors” to differentiate them from the post-processors that the module also provides.The main rule to remember when adding a new function into this chain is that as a good practice, the function should take care of one task, and one task only. (This is generally a good practice to follow on every aspect of software development, some call it the Unix Philosophy, others call it KISS; call it whatever you want, it’s a good idea to keep in mind.) That way, it becomes mind-blowingly easy to enable and disable them when testing, even to alter their order. On the other hand, if you start adding functions that take care of more than one thing, like authenticating the user and loading his/her preferences, you’ll have to edit the function’s code to disable one of those services.Since you’ll want the entire pre-processing to be done asynchronously to release the request handler from waiting for the chain to be done, the chain will use asynchronous serial flow. This way you can be sure of the order of execution; but at the same time, you’re free to have these functions perform actions that take longer than normal, like asynchronous calls to external services, I/O operations, and the like.So far you’re able to handle requests asynchronously and you can do some interesting things to the request by pre-processing it before giving it to the routes handler. But there is one catch: the pre-processing chain is the same for all routes.That might not be a problem if the API is small enough, but just to be on the safe side, and to provide a fully scalable architecture, let’s take a look at another change that can be done over the current version to provide the freedom you require:  The client application issues a request for a particular resource.  The request handler gathers all information. It creates a request object and passes it along to the request handler to return the right controller. This action is simple enough to do synchronously. Ideally, it should be done in constant time.  Once it has the controller, it registers an asynchronous operation with the correct pre-processing chain. This time around, the developer is able to set up as many chains as needed and associates them to one specific route. The request handler also sets up the controller’s method to be executed as the callback to the chain’s process.  Finally, the callback is triggered, and the request object, with the response object passed into the controller’s method to continue the execution.** Step 2 mentions that the controller lookup base on the request should be done in constant time. This is not a hard requirement, but should be the desirable result; otherwise, when handling many concurrent requests, this step might become a bottleneck that can affect subsequent requests.**MVC: a.k.a. Model–View–ControllerThe model–view– controller (MVC) architectural pattern is probably the most well-known pattern out there.MVC is currently among the most well-known and used design patterns on web projects (that much is true). That being said, you should not forget about the others; in fact, I highly recommend you actually get familiar with the most common ones (aside from MVC of course), like Singleton, Factory, Builder, Adapter, Composite, Decorator, and so forth. Just look them up, and read and study some examples; it’s always handy to have them as part of your tool box.Going back to MVC, even though it has become really popular in the last few years, especially since 2007 (coincidently the year when version 2 of Ruby on Rails , a popular web framework that had MVC as part of its core architecture, was released), this bad boy is not new. In fact, it was originally described by Krasner and Pope in 1988 at SmallTalk-803 as a design pattern for creating user interfaces.The reason why it is such a popular pattern on web projects is because it fits perfectly into the multilayer architecture that the web provides. Think about it: due to the client-server architecture, you already have two layers there, and if you organized code to split some responsibilities between orchestration and business logic, you gain one more layer on the server side, which could translate into the scenario shown in below.            Layer      Description                  Business logic      You can encapsulate the business logic of the system into different components, which you can call models. They represent the different resources that the system handles.              Orchestration      The models know how to do their job, but not when or what kind of data to use. The controllers take care of this.              Representation layer      Handles creating the visual representation of the information. In a normal web application, this is the HTML page. In a RESTful API, this layer takes care of the different representations each resource has.      Prior to the table above, I mentioned that the client-server architecture provided the first two layers for MVC, meaning that the client would act as the presentation layer. This is not entirely true, as you see later on, but it does serve as a conceptual layer, meaning that you’ll need a way for the application to present the information to the user (client).The flow:Controller -&amp;gt; Model -&amp;gt; ViewThe figure above shows the decoupling of the three components: the controller, the model (which in this case you can also call the resource), and the view. This decoupling allows for a clear definition of each component’s responsibilities, which in turn helps keep the code clean and easy to understand.Although this is great, the pattern has changed a bit ever since it was adopted by some web development frameworks, like Ruby on Rails:model &amp;lt;-&amp;gt; Controller -&amp;gt; ViewThe current iteration of the pattern removed the relationship between the model and the view, and instead gave the controller that responsibility. The controller now also orchestrates the view.This final images shows you the final architecture for your REST API:Steps 5 and 6 have been added to our architecture.When the right method on the controller is triggered (in step 4), it handles interacting with the model, gathers the required data, and then sends it over to the view to render it back to the client application.This architecture works great, but there is still one improvement that can be done.With our RESTful API, the representations are strictly related to the resources data structure, and you can generalize the view into a view layer, which will take care of transforming the resources into whatever format you require. This change simplifies the development since you centralize the entire view-related code into one single component (the view layer).The diagram in below might not have changed a lot, but the change in the view box into a view layer represents the generalization of that code, which initially implied that there would be one specific view code for every resource.Alternatives to MVCMVC is a great architecture. But not every project looks like an MVC nail, so you might have to  look at other alternatives architectures.There are alternatives, there are similar architectural patterns that may better suit your needs, depending on the particular aspects of your project. Some of them are direct derivatives of MVC, and others try to approach the same problem from a slightly different angle.Hierarchical MVCHierarchical MVC4 is a more complex version of MVC in the sense that you can nest one MVC component inside another one. This gives developers the ability to have things like an MVC group for a page, another MVC group for the navigation inside the page, and a final MVC component for the contents of the page.This approach is especially helpful when developing reusable widgets that can be plugged into components, since each MVC group is self-contained. It is useful in cases when the data to be displayed comes from different related sources. In these cases, having a HMVC structure helps keep the separation of concerns intact, and avoids coupling between components that shouldn’t be.Let’s look at an example. Think of a user reading a blog post and the related comments underneath it. There are two ways to go about it: with MVC or with HMVC.With MVC, the request is done to the BlogPosts controller, since that is the main resource being requested; afterward, that controller loads the proper blog post model and using that model’s ID, it loads the related comments models. Right there, there is an unwanted coupling between the BlogPosts controller and the comments model. You can see this in the diagram in bolow.Figure above shows the coupling that you need to get rid of. So let’s look at what this would look like using HMVC:This architecture it is cleaner and easier to extend. Now in step 3, you’re sending a request to an entirely new MVC component, one in charge of dealing with comments. That component will in turn interact with the corresponding model and with the generic view layer to return the representation of the comments. The representation is received by the BlogPost controller, which attaches it to the data obtained from the BlogPost model and sends everything back into the view layer.If you want to create a new section in the blog showing specific blog posts and their comments, you could easily reuse the comments component. All in all, this pattern could be considered a specialization of common MVC, and it could come in handy when designing complex systems.Model–View–ViewModelThe Model–View–ViewModel pattern was created by Microsoft in 2005 as a way to facilitate UI development using WPF and Silverlight. It allows UI developers to write code using a markup language (called XAML) focusing on the User Experience (UX), and accessing the dynamic functionalities using bindings to the code. This approach allows developers and UX developers to work independently without affecting each other’s work.Just like with MVC, the Model in this architecture concentrates the business logic, while the ViewModel acts as a mediator between the Model and the View, exposing the data from the first one. It also contains most of the view logic, allowing the ViewLayer to only focus on displaying information, leaving all dynamic behavior to the ViewModel.These days, the pattern has been adopted by others outside Microsoft, like the ZK framework inJava and KnockoutJS, AngularJS, Vue.js, and other frameworks in JavaScript (since MVVM is a pattern specializing in UI development, it makes sense that UI frameworks written in JavaScript are big adopters of this pattern).Model–View–AdapterThe model–view–adapter (MVA) pattern is very similar to MVC, but with a couple of differences. Mainly, in MVC the main business logic is concentrated inside each model, which also contains the main data structure, with the controller in charge of orchestrating the model and the view.In MVA, the model is just the data that you’re working with, and the business logic is concentrated in the adapter, which is in charge of interacting both with the view and the model. This allows for a total decoupling of the view and the model, giving all responsibilities to the adapter. This approach works great when switching adapters to achieve different behaviors on the same view and model.Response HandlerThe final component to our API architecture is the response handler. It is in charge of grabbing the resource representation from the view layer and sending it back to the client. The response format (which is not the same as the representation’s format) must be the same as the request’s format; in this case, it’ll be an HTTP 1.1 message.The HTTP response has two parts: the header, which contains several fields specifying properties about the message, and the body. The content of the message’s body is the actual representation of the resource. The header is the section that interests us the most right now; it contains fields like content-type, content- length, and so on. Some of those fields are mandatory and some of them are required if you intend to follow the REST style fully.  Cacheable: From the constraints imposed by REST. Every request must be explicitly or implicitly set as cacheable when applicable. This translates into the use of the HTTP header cache-control.  Content-type: The content type of the response’s body is important for the client application to understand how to parse the data. If your resources only have one possible representation, the content type might be an optional header since you could notify the client app developer about the format through your documentation. But if you were to change it in the future, or add a new one, then it might cause some serious damage to your clients. So consider this header mandatory.  Status: The status code is not mandatory but extremely important, as I’ve mentioned in previous chapters. It provides the client application a quick indicator of the result of the request.  Date: This field should contain the date and time when the message was sent. It should be in HTTP-date format7 (e.g., Fri, 24 Dec 2014 23:34:45 GMT).  Content-length: This field should contain the number of bytes (length) of the body of the message transferred.Let’s look at an example of an HTTP response with the JSON representation of a resource:HTTP/1.0 200 OKDate: Fri, 31 Dec 1999 23:59:59 GMTContent-Type: application/jsonCache-control: private, max-age=0, no-cacheContent-Length: 1354{  &quot;name&quot;: &quot;J.K.Rolling&quot;,  &quot;id&quot;: &quot;ab12351bac&quot;,  &quot;books&quot;: [     {     &quot;title&quot;: &quot;Harry Potter and the Philosopher’s Stone&quot;,     &quot;isbn&quot;: &quot;9788478888566&quot;     },     {     &quot;title&quot;: &quot;Harry Potter and the Prisoner of Azkaban&quot;,     &quot;isbn&quot;: &quot;9788422685227&quot;     }   ]}There is one more improvement that could be made on the response handler if you want to get some extra juice. This is entirely extra, and most of the Node.js frameworks out there don’t have it.The idea is to have a post-processing chain of functions that receives the response content returned by the view layer, and transforms it, or enriches it if you will, with further data. It would act as the first version of the pre-processing chain: one common chain for the entire process.With this idea, you can abstract further code from the controllers just by moving it into the post- processing stage. Code like schema validation or response header setup can be centralized here, and with the added extra of a simple mechanism for switching it around or disabling steps in the chain.Let’s take a look at the final architecture of our API:SummaryThis article covers the basics for a complete and functional RESTful API architecture. It even cover some extras that aren’t required but are certainly nice to have, such as pre- and post-processing. You also look at the main architecture behind our design (MVC) and some alternatives to it, in case your requirements aren’t a perfect match for the MVC model.",
      "url": " /2016/architecting-rest-api/",
      "author": "",
      "categories": "Development, Node"
    }
    ,
  

    "2016-node-js-and-rest": {
      "title": "Node.js and REST",
      "content"	 : "Asynchronous ProgrammingAsynchronous programming means that for every asynchronous function that you execute, you can’t expect it to return the results before moving forward with the program’s flow. Instead, you’ll need to provide a callback block/function that will be executed once the asynchronous code finishes.Above, in the first image, a instruction run in synchronous manner. In order to execute the instruction, you need to wait as long as the instruction takes. In an asynchronous manner you can provide the instruction as a callback to that, allowing you to execute other instruction without waiting for the first one to execuite. The next instruction is executed right after the first one starts the asynchronous “long time running instruction”.This is a very simple example of the potential benefits of asynchronous programming. Sadly, like with most in this digital world, nothing comes without a price, and the added benefits also come with a nasty trade-off. Developers are trained to think of their code in the sequential way they write it, so debugging a code that is not sequential can be difficult to newcomers.For instance, below show a piece of code written in a synchronous and an asynchronous manner, respectively:Synchronous:console.log(&quot;About to read the file...&quot;)var content = Fs.readFileSync(&quot;/path/to/file&quot;) console.log(&quot;File content: &quot;, content)Asynchronous Version of a Simple File Read Operation with a Common Mistake:console.log(&quot;About to read the file...&quot;)var content = &quot;&quot;fs.readFile(&quot;/path/to/file&quot;, function(err, data) {   content = data})console.log(&quot;File content: &quot;, content)The last peace of code does not print the content of the file since the callback is executed after the last line of code.Correct Asynchronous File Read Operation:console.log(&quot;About to read the file...&quot;)var content = &quot;&quot;fs.readFile(&quot;/path/to/file&quot;, function(err, data) {   content = data   console.log(&quot;File content: &quot;, content)})You just moved the last line into the callback function, so you’re sure that the content variable is set correctly.Async AdvancedAsynchronous programming is not just about making sure that you set up the callback function correctly, it also allows for some interesting flow control patterns that can be used to improve the efficiency of the app.Let’s look at two distinct and very useful control flow patterns for asynchronous programming: parallel flow and serial flow.Parallel FlowThe idea behind parallel flow is that the program can run a set of nonrelated tasks in parallel, but only call the callback function provided (to gather their collective outputs) after all tasks have finished executing.Parallel Function://functionX symbols are references to individual functionsparallel([function1, function2, function3, function4], function(data) {   ///do something with the combined output once they all finished})In order to know when each of the functions passed in the array have finished execution, they’ll have to execute a callback function with the results of their operation. The callback will be the only attribute they receive. Below shows the parallel function.Implementation:function parallel(funcs, callback) {     var results = [],           callsToCallback = 0     funcs.forEach(function(fn) { // iterate over all functions       setTimeout(fn(done), 200) // and call them with a 200 ms delay      })    function done(data) { // the functions will call this one when they finish andthey’ll pass the results here       results.push(data)       if(++callsToCallback == funcs.length) {          callback(results)       }} }The implementation in above runs a set of functions in a parallel way (since Node.js runs in a single thread, true parallelism is not possible, so this is as close as you can get). This type of control flow is particularly useful when dealing with calls to external services.Let’s look at a practical example. Assume your API needs to do several operations that, although aren’t related to each other, need to happen before the user can see the results. For instance, load the list of books from the database, query an external service to get news about new books out this week, and log the request into a file.If you were to execute all of those tasks in a series, waiting for one to finish before the next one can be run, then the user would most probably suffer a delay on the response because the total time needed for the execution is the sum of all individual times.But if you can execute all of them in parallel, then the total time is actually equal to the time it takes the slowest task to execute. Let’s look at both cases.SerialFlow://request handling code...//assume &quot;db&quot; is already initialized and provides an interface to the data base db.query(&quot;books&quot;, {limit:1000, page: 1}, function(books) { services.bookNews.getThisWeeksNews(function(news) {     services.logging.logRequest(request, function() { //nothing returned, but you need to call it so you know the logging finished       response.render({listOfBooks: books, bookNews: news})    })   })})Parallel Execution Flow://request handling code... parallel([  function(callback) { db.query(&quot;books&quot;, {limit: 1000, page: 1}, callback) }),  function(callback) { services.bookNews.getThisWeeksNews(callback) }),  function(callback) { services.logRequest(request, callback) }) ], function(data) {     var books = findData(‘books’, data)     var news = findData(‘news’, data)     response.render({listOfBooks: books, bookNews: news})})Above show how each approach looks. The findData function simply looks into the data array, and based on the structure of the items, returns the desired one (first parameter).In the implementation of parallel it is needed because you can’t be sure in which order the functions finished and then sent back their results.Aside from the clear speed boost that the code gets, it’s also easier to read and easier to add new tasks to the parallel flow—just add a new item to the array.Serial FlowThe serial flow provides the means to easily specify a list of functions that need to be executed in a particular order. This solution doesn’t provide a speed boost like parallel flow does, but it does provide the ability to write such code and keep it clean, staying away from what is normally known as spaghetti code.Below shows what you should try to accomplish:Signature of the Serial Function:serial([ function1, function2, function3], function(data) {   //do something with the combined results})Below shows what you shouldn’t do.CommonCaseofNestedCallbacks:  function1(function(data1) {    function2(function(data2) {     function3(function(data3) {      //do something with all the output    }   }}You can see how the code in above could get out of hand if the number of functions kept growing. So the serial approach helps keep the code organized and readable.Let’s look at a possible implementation of the serial function.Implementation of the Serial Function:function serial(functions, done) {    var fn = functions.shift() //get the first function off the list    var results = []    fn(next)    function next(result) {        results.push(result) //save the results to be passed into the final callback once you don’t have any more functions to execute.        var nextFn = functions.shift()        if (nextFn) nextFn(next)        else done(results)    }}There are more variations to these functions, like using an error parameter to handle errors automatically, or limiting the number of simultaneous functions in the parallel flow.All in all, asynchronous programming brings a lot of benefits to implementing APIs. Parallel workflow comes in very handy when dealing with external services, which normally any API would deal with; for instance, database access, other APIs, disk I/O, and so forth.And at the same time, the serial workflow is useful when implementing things like Express.js. For a fully functional and tested library that thrives on asynchronous programming, please check out async.js.Asynchronous I/OA specific case of asynchronous programming relates to a very interesting feature provided by Node.js, asynchronous I/O.This feature is highly relevant to the internal architecture of Node.js. Node.js doesn’t provide multithreading, it actually works with a single thread that runs an event loop.In a nutshell, Node.js was designed with the mindset that I/O operations are the actual bottleneck in every operation, not the processing power. So every request received by the node process will work inside the event loop until an I/O operation is found. When that happens, the callback is registered on a separate queue and the main program’s flow continues. Once the I/O operation finishes, the callback is triggered and the code inside it is run.Async I/O vs. Sync I/ONode.js works best using async I/O, I’ve done some very simple benchmarking. I’ve created a simple API with two endpoints:  /async: This reads a 1.6MB file asynchronously before returning a simple JSON response.  /sync: This reads a 1.6MB file synchronously before returning a simple JSON response.Both endpoints do exactly the same, only in a different manner. The idea is to prove that even in such simple code, the event loop can handle multiple requests better when the underlying code makes use of the asynchronous I/O provided by the platform.Below is the code of both endpoints, the API was written using Vatican.js.Async handler:var fs = require(&quot;fs&quot;)module.exports = AsyncHdlr;function AsyncHdlr(_model) { this.model = _model }//@endpoint (url: /async method: get)AsyncHdlr.prototype.index = function(req, res, next) {    fs.readFile(__dirname + &quot;/../file.txt&quot;, function (err, content) {        res.send({            success: true    })   })}Sync handler:var fs = require(&quot;fs&quot;)module.exports = SyncHdlr;function SyncHdlr(_model) { this.model = _model }//@endpoint (url: /sync method:get)SyncHdlr.prototype.index = function(req, res, next) {    var content = fs.readFileSync(__dirname + &quot;/../file.txt&quot;)    res.send({        success: true}) }Results from the Benchmark of the Two Endpoints:            Synchronous Endpoint      Asynchronous Endpoint                  Requests per second: 2411.28 [#/sec.] (mean)      Requests per second: 2960.79 [#/sec.] (mean)              Time per request 41.472 [ms] (mean)      Time per request: 33.775 [ms] (mean)              Time per request: 0.415 [ms] (mean, across all concurrent requests)      Time per request: 0.338 [ms] (mean, across all concurrent requests)              Transfer rate: 214.28 [KBps] received      Transfer rate: 263.12 [KBps] received      As you can see above, for even the simplest of examples, there are 549 more requests being served by the asynchronous code than in the synchronous code in the same amount of time. Another interesting item is that each request is almost 8 milliseconds faster on the asynchronous endpoint; this might not be a huge number, but considering the nonexistent complexity of the code you’re using, it’s quite relevant.SimplicityNode.js (JavaScript) is not a complicated language. It follows the basic principles that similar scripting languages follow (like Ruby, Python, and PHP). Node.js is simple enough for any developer to pick up and start coding in no time, and yet it’s powerful enough to achieve almost anything developers can set their minds to.JavaScript has gained a lot of traction over the years, but it has also gained a lot of haters, and they have their very valid reasons, a nonstandard object- oriented model, weird usage of the this keyword, a lack of functionality built into the language (it has a lot of libraries dedicated to implementing basic features that come built-in in other languages), and the list goes on. In the end, every tool needs to be chosen based on its strengths. Node.js is a particularly strong option for developing APIs, as you’re about to see.Node.js adds a certain useful flavor to the language, simplifying a developer’s life when trying to develop back-end code. It not only adds the required utilities to work with I/O (which front-end JavaScript doesn’t have for obvious security reasons), but it also provides stability for all the different flavors of JavaScript that each web browser supports.One example of this is how easy it is to set up a web server with just a few lines of code:var http = require(&quot;http&quot;)http.createServer(function(req, res) { //create the server        //request handler code here});http.listen(3000) //start it up on port 3000JavaScript also has the advantage of being the standard front-end language for all commercial web browsers, which means that if you’re a web developer with front-end experience, you have certainly come across JavaScript.Dynamic TypingDynamic typing is a basic characteristic, present in most common languages nowadays, but it’s not less powerful because of that. This little feature allows the developer to not have to think too much when declaring a variable; just give it a name and move on:var a, b, tmp //declare the variables (just give them names)//initialize them with different typesa = 10b = &quot;hello world&quot;//now swap the valuestmp = aa = b //even with automatic casting, a language like C won’t be able to cast &quot;helloworld&quot; into an integer valueb = tmp//print valuesconsole.log(a) //prints &quot;hello world&quot;console.log(b) //prints 10Object-Oriented ProgrammingJavaScript it not an object-oriented language, but it does have support for some of these features. You’ll have enough of them to conceptualize problems and solutions using objects, which is always a very intuitive way of thinking, but at the same time, you’re not dealing with concepts like polymorphism, interfaces, or others that despite helping to structure code, have proven to be dispensable when designing applications.var myObject = { //JS object notation helps simplify definitions        myAttribute: &quot;some value&quot;,        myMethod: function(param1, param2) {                //does something here        } }//And the just... myObject.myMethod(...)Another example:var aDog = { //behave like a dog        makeNoise: function() {                console.log(&quot;woof!&quot;);        } }var aCat = { //behave like a cat        makeNoise: function() {                console.log(&quot;Meewww!&quot;);        } }var myAnimal = { //our main object        makeNoise: function() {console.log(&quot;cri... cri....&quot;) speak: function() {                this.makeNoise()        } }myAnimal.speak() //no change, so.. crickets!myAnimal.speak.apply(aDog) //this will print &quot;woof!&quot;//switch behaviormyAnimal.speak.apply(aCat) //this will now print &quot;Meewww!&quot;You were able to encapsulate a simple behavior into an object and pass it into another object to automatically overwrite its default one.¨Prototypal InheritanceLinked to the one above, the prototypal inheritance feature allows for incredibly easy extension of your objects at any moment of their life cycle; powerful and simple:var Parent = function() {        this.parentName = &quot;Parent&quot;}var Child = function() {}Child.prototype = new Parent()var childObj = new Child();console.log(childObj.parentName)console.log(childObj.sayThanks) //that&#39;s undefined so farParent.prototype.sayThanks = function() { //you &quot;teach&quot; the method to the parent        console.log(&quot;Thanks!&quot;)}console.log(childObj.sayThanks()) //the child can say thanks nowFunctional Programming SupportJavaScript is not a functional programming language; but then again, it does have support for some of its features, such as having first-class citizen functions, allowing you to pass them around like parameters, and return closures easily.This feature makes it possible to work with callbacks, which, as you’ve already seen, is the basis for asynchronous programming. Let’s look at a quick and simple functional programming example:function adder(x) {  return function(y) {    return x+y   }}var add10 = adder(10) //you create a new function that adds 10 to whatever you pass to it. console.log(add10(100)) //will output 110A more complex example is an implementation of the map function, which allows you to transform the values of an array by passing the array and the transformation function. Let’s first look at how you’d use the map function.map([1,2,3,4], function(x) { return x * 2 }) //will return [2,4,6, 8]map([&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;], String.prototype.toUpperCase) //will return [&quot;H&quot;,&quot;E&quot;,&quot;L&quot;,&quot;L&quot;,&quot;O&quot;]Now let’s look at a possible implementation using the functional approach.function reduce(list, fn, init) {        if(list.length == 0) return init        var value = list[0]        init.push(fn.apply(value, [value])) //this will allow us to get both the functions that receive the value as parameters and the methods that use it from it’s context (like toUpperCase)        return reduce(list.slice(1), fn, init) //iterate over the list using it’s tail(everything but the first element)}function map(list, fn) {        return reduce(list, fn, [])}Duck TypingThe type of a variable is determined by its content and properties, not by a fixed value. So the same variable can change its type during the life cycle of your script. Duck typing is both a very powerful feature and a dangerous feature at the same time:var foo = &quot;bar&quot;console.log(typeof foo) //will output &quot;string&quot;foo = 10console.log(typeof foo) //this will now output &quot;number&quot;Native Support for JSONSince JSON actually spawned from JavaScript. Having native support for the main transport language used nowadays is a big plus:var myJSONProfile = {        &quot;first_name&quot;: &quot;Fernando&quot;,        &quot;last_name&quot;: &quot;Doglio&quot;,        &quot;current_age&quot;: 30,        &quot;married&quot;: true,        &quot;phone_numbers&quot;: [}//And you can interact with that JSON without having to parse it or anythingconsole.log(myJSONProfile.first_name, myJSONProfile.last_name)This particular feature is especially useful in several cases.For instance, when working with a document-based storage solution (like MongoDB) because the modeling of data ends up being native in both places (your app and the database). Also, when developing an API, you’ve already seen that the transport language of choice these days is JSON, so the ability to format your responses directly with native notation (you could even just output your entities, for that matter) is a very big plus when it comes to ease of use.The list could be extended, but those are some pretty powerful features that JavaScript and Node.js bring to the table without asking too much of the developer. They are quite easy to understand and use.Node Package ManagerAnother point in favor of Node.js is its amazing package manager. As you might know, development in Node is very module dependent, meaning that you’re not going to be developing the entire thing; most likely you’ll be reusing someone else’s code in the form of modules.This is a very important aspect of Node.js, because this approach allows you to focus on what makes your application unique, and lets the generic code be integrated seamlessly. You don’t have to recode the library for HTTP connectivity, or your route handler on every project (in other words, you don’t have to keep reinventing the wheel). Just set the dependencies of your project into the package.json file, using the best-suited module names, and then npm will take care of going through the whole dependency tree and install everything needed.The amount of active users and modules available assures you that you’ll find what you need. In the rare occasions when you don’t, you can contribute by uploading that specific module to the registry and help the next developer that comes looking for it.To start using npm, just visit their site at www.npmjs.org. There you’ll see a list of recently updated packages to get you started, and some of the most popular ones as well.If want to install it directly, just write the following line into your Linux console:$ curl https://www.npmjs.org/install.sh | shYou need to have Node.js installed to use it properly. You can begin installing modules by simply typing:$ npm install [MODULE_NAME]This command downloads the specified module into a local folder called node_modules; so try to run it from within your project’s folder.You can also use npm to develop your own modules and publish them into the site by using the following:$ npm publishThe preceding command takes attributes from the package.json file, package the module, and upload everything into npm’s registry.SummaryThis article covered the advantages of Node.js for the common developer, especially how its features improve the performance of I/O–heavy systems such as APIs.",
      "url": " /2016/node-js-and-rest/",
      "author": "",
      "categories": "Development, Node"
    }
    ,
  

    "2016-jekyll-incremental-regeneration": {
      "title": "Jekyll Incremental Regeneration",
      "content"	 : "Incremental regeneration is still an experimental featureWhile incremental regeneration will work for the most common cases, it will not work correctly in every scenario. Please be extremely cautious when using the feature.Incremental regeneration helps shorten build times by only generating documents and pages that were updated since the previous build. It does this by keeping track of both file modification times and inter-document dependencies in the .jekyll-metadata file.Under the current implementation, incremental regeneration will only generate a document or page if either it, or one of its dependencies, is modified. Currently, the only types of dependencies tracked are includes (using the {% include %}  tag) and layouts. This means that plain references to other documents (for example, the common case of iterating over site.posts in a post listings page) will not be detected as a dependency.To remedy some of these shortfalls, putting regenerate: true in the front-matter of a document will force Jekyll to regenerate it regardless of whether it has been modified. Note that this will generate the specified document only; references to other documents’ contents will not work since they won’t be re-rendered.Incremental regeneration can be enabled via the –incremental flag (-I for short) from the command-line or by setting incremental: true in your configuration file.",
      "url": " /2016/jekyll-incremental-regeneration/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-custom-markdown-processors": {
      "title": "Jekyll Custom Markdown Processors",
      "content"	 : "If you’re interested in creating a custom markdown processor, you’re in luck! Create a new class in the Jekyll::Converters::Markdown namespace:class Jekyll::Converters::Markdown::MyCustomProcessor  def initialize(config)    require &#39;funky_markdown&#39;    @config = config  rescue LoadError    STDERR.puts &#39;You are missing a library required for Markdown. Please run:&#39;    STDERR.puts &#39;  $ [sudo] gem install funky_markdown&#39;    raise FatalException.new(&quot;Missing dependency: funky_markdown&quot;)  end  def convert(content)    ::FunkyMarkdown.new(content).convert  endendOnce you’ve created your class and have it properly set up either as a plugin in the _plugins folder or as a gem, specify it in your _config.yml:markdown: MyCustomProcessor",
      "url": " /2016/jekyll-custom-markdown-processors/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-markdown-options": {
      "title": "Jekyll Markdown Options",
      "content"	 : "The various Markdown renderers supported by Jekyll sometimes have extra options available.RedcarpetRedcarpet can be configured by providing an extensions sub-setting, whose value should be an array of strings. Each string should be the name of one of the Redcarpet::Markdown class’s extensions; if present in the array, it will set the corresponding extension to true.Jekyll handles two special Redcarpet extensions:  no_fenced_code_blocks — By default, Jekyll sets the fenced_code_blocks extension (for delimiting code blocks with triple tildes or triple backticks) to true, probably because GitHub’s eager adoption of them is starting to make them inescapable. Redcarpet’s normal fenced_code_blocks extension is inert when used with Jekyll; instead, you can use this inverted version of the extension for disabling fenced code.Note that you can also specify a language for highlighting after the first delimiter: ```ruby    ...```With both fenced code blocks and highlighter enabled, this will statically highlight the code; without any syntax highlighter, it will add a class=”LANGUAGE” attribute to the  element, which can be used as a hint by various JavaScript code highlighting libraries.  smart — This pseudo-extension turns on SmartyPants, which converts straight quotes to curly quotes and runs of hyphens to em (—) and en (–) dashes.All other extensions retain their usual names from Redcarpet, and no renderer options aside from smart can be specified in Jekyll. A list of available extensions can be found in the Redcarpet README file. Make sure you’re looking at the README for the right version of Redcarpet: Jekyll currently uses v3.2.x. The most commonly used extensions are:  tables  no_intra_emphasis  autolink",
      "url": " /2016/jekyll-markdown-options/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-liquid-options": {
      "title": "Jekyll Liquid Options",
      "content"	 : "Liquid’s response to errors can be configured by setting error_mode. The options are  lax — Ignore all errors.  warn — Output a warning on the console for each error.  strict — Output an error message and stop the build.",
      "url": " /2016/jekyll-liquid-options/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-front-matter-defaults": {
      "title": "Jekyll Front Matter defaults",
      "content"	 : "Using YAML Front Matter is one way that you can specify configuration in the pages and posts for your site. Setting things like a default layout, or customizing the title, or specifying a more precise date/time for the post can all be added to your page or post front matter.Often times, you will find that you are repeating a lot of configuration options. Setting the same layout in each file, adding the same category - or categories - to a post, etc. You can even add custom variables like author names, which might be the same for the majority of posts on your blog.Instead of repeating this configuration each time you create a new post or page, Jekyll provides a way to set these defaults in the site configuration. To do this, you can specify site-wide defaults using the defaults key in the _config.yml file in your project’s root directory.The defaults key holds an array of scope/values pairs that define what defaults should be set for a particular file path, and optionally, a file type in that path.Let’s say that you want to add a default layout to all pages and posts in your site. You would add this to your _config.yml file:defaults:  -    scope:      path: &quot;&quot; # an empty string here means all files in the project    values:      layout: &quot;default&quot;The _config.yml master configuration file contains global configurations and variable definitions that are read once at execution time. Changes made to _config.yml during automatic regeneration are not loaded until the next execution.Note that Data Files are included and reloaded during automatic regeneration.Here, we are scoping the values to any file that exists in the path scope. Since the path is set as an empty string, it will apply to all files in your project. You probably don’t want to set a layout on every file in your project - like css files, for example, so you can also specify a type value under the scope key.defaults:  -    scope:      path: &quot;&quot; # an empty string here means all files in the project      type: &quot;posts&quot; # previously `post` in Jekyll 2.2.    values:      layout: &quot;default&quot;Now, this will only set the layout for files where the type is posts. The different types that are available to you are pages, posts, drafts or any collection in your site. While type is optional, you must specify a value for path when creating a scope/values pair.As mentioned earlier, you can set multiple scope/values pairs for defaults.defaults:  -    scope:      path: &quot;&quot;      type: &quot;posts&quot;    values:      layout: &quot;my-site&quot;  -    scope:      path: &quot;projects&quot;      type: &quot;pages&quot; # previously `page` in Jekyll 2.2.    values:      layout: &quot;project&quot; # overrides previous default layout      author: &quot;Mr. Hyde&quot;With these defaults, all posts would use the my-site layout. Any html files that exist in the projects/ folder will use the project layout, if it exists. Those files will also have the page.author liquid variable set to Mr. Hyde.collections:  - my_collection:      output: truedefaults:  -    scope:      path: &quot;&quot;      type: &quot;my_collection&quot; # a collection in your site, in plural form    values:      layout: &quot;default&quot;In this example, the layout is set to default inside the collection with the name my_collection.PrecedenceJekyll will apply all of the configuration settings you specify in the defaults section of your _config.yml file. However, you can choose to override settings from other scope/values pair by specifying a more specific path for the scope.You can see that in the second to last example above. First, we set the default layout to my-site. Then, using a more specific path, we set the default layout for files in the projects/ path to project. This can be done with any value that you would set in the page or post front matter.Finally, if you set defaults in the site configuration by adding a defaults section to your _config.yml file, you can override those settings in a post or page file. All you need to do is specify the settings in the post or page front matter. For example:# In _config.yml...defaults:  -    scope:      path: &quot;projects&quot;      type: &quot;pages&quot;    values:      layout: &quot;project&quot;      author: &quot;Mr. Hyde&quot;      category: &quot;project&quot;...# In projects/foo_project.md---author: &quot;John Smith&quot;layout: &quot;foobar&quot;---The post text goes here...The projects/foo_project.md would have the layout set to foobar instead of project and the author set to John Smith instead of Mr. Hyde when the site is built.Default ConfigurationJekyll runs with the following configuration options by default. Alternative settings for these options can be explicitly specified in the configuration file or on the command-line.Please note that both remove_block_html_tags and  remove_span_html_tags are currently unsupported in Jekyll due to the fact that they are not included within the kramdown HTML converter.# Where things aresource:       .destination:  ./_siteplugins_dir:  _pluginslayouts_dir:  _layoutsdata_dir:     _dataincludes_dir: _includescollections:  posts:    output:   true# Handling Readingsafe:         falseinclude:      [&quot;.htaccess&quot;]exclude:      []keep_files:   [&quot;.git&quot;, &quot;.svn&quot;]encoding:     &quot;utf-8&quot;markdown_ext: &quot;markdown,mkdown,mkdn,mkd,md&quot;# Filtering Contentshow_drafts: nulllimit_posts: 0future:      falseunpublished: false# Pluginswhitelist: []gems:      []# Conversionmarkdown:    kramdownhighlighter: rougelsi:         falseexcerpt_separator: &quot;nn&quot;incremental: false# Servingdetach:  falseport:    4000host:    127.0.0.1baseurl: &quot;&quot; # does not include hostnameshow_dir_listing: false# Outputtingpermalink:     datepaginate_path: /page:numtimezone:      nullquiet:    falseverbose:  falsedefaults: []liquid:  error_mode: warn# Markdown Processorsrdiscount:  extensions: []redcarpet:  extensions: []kramdown:  auto_ids:       true  footnote_nr:    1  entity_output:  as_char  toc_levels:     1..6  smart_quotes:   lsquo,rsquo,ldquo,rdquo  input:          GFM  hard_wrap:      false  footnote_nr:    1",
      "url": " /2016/jekyll-front-matter-defaults/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-environment": {
      "title": "Jekyll  Environment ",
      "content"	 : "In the build, or serve, arguments, you can specify a Jekyll environment and value. The build will then apply this value in any conditional statements in your content.For example, suppose you set this conditional statement in your code:{% if jekyll.environment == &quot;production&quot; %}   {%raw%}{% include disqus.html %}{%endif %}When you build your Jekyll site, the content inside the if statement won’t be run unless you also specify a production environment in the build command:JEKYLL_ENV=production jekyll buildSpecifying an environment value allows you to make certain content available only within specific environments.The default value for JEKYLL_ENV is development. Therefore if you omit JEKYLL_ENV from the build arguments, the default value will be JEKYLL_ENV=development. Any content inside {% if jekyll.environment == “development” %} tags will automatically appear in the build.Your environment values can be anything you want (not just development or production). Some elements you might want to hide in development environments include Disqus comment forms or Google Analytics. Conversely, you might want to expose an “Edit me in GitHub” button in a development environment but not include it in production environments.By specifying the option in the build command, you avoid having to change values in your configuration files when moving from one environment to another.",
      "url": " /2016/jekyll-environment/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-custom-webrick-headers": {
      "title": "Jekyll Custom WEBrick Headers",
      "content"	 : "You can provide custom headers for your site by adding them to _config.yml# File: _config.ymlwebrick:  headers:    My-Header: My-Value    My-Other-Header: My-Other-Value",
      "url": " /2016/jekyll-custom-webrick-headers/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-serve-command-options": {
      "title": "Jekyll Serve Command Options",
      "content"	 : "In addition to the options below, the serve sub-command can accept any of the options for the build sub-command, which are then applied to the site build which occurs right before your site is served.            SETTING      OPTIONS AND FLAGS                  Local Server Port Listen on the given port.      port: PORT –port PORT              Local Server Hostname Listen at the given hostname.      host: HOSTNAME –host HOSTNAME              Base URL Serve the website from the given base URL      baseurl: URL –baseurl URL              Detach Detach the server from the terminal      detach: BOOL -B, –detach              Skips the initial site build Skips the initial site build which occurs before the server is started.      –skip-initial-build              X.509 (SSL) Private Key SSL Private Key.      –ssl-key              X.509 (SSL) Certificate SSL Public certificate.      –ssl-cert      Do not use tabs in configuration files since, this will either lead to parsing errors, or Jekyll will revert to the default settings. Use spaces instead",
      "url": " /2016/jekyll-serve-command-options/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-build-command-options": {
      "title": "Jekyll Build Command Options",
      "content"	 : "The table below lists the available settings for Jekyll, and the various options (specified in the configuration file) and flags (specified on the command-line) that control them.            SETTING      OPTIONS AND FLAGS                  Regeneration Enable auto-regeneration of the site when files are modified.      -w, –[no-]watch              Configuration Specify config files instead of using _config.yml automatically. Settings in later files override settings in earlier files.      –config FILE1[,FILE2,…]              Drafts Process and render draft posts.      show_drafts: BOOL –drafts              Environment Use a specific environment value in the build.      JEKYLL_ENV=production              Future Publish posts or collection documents with a future date.      future: BOOL –future              LSI Produce an index for related posts.      lsi: BOOL –lsi              Limit Posts Limit the number of posts to parse and publish.      limit_posts: NUM –limit_posts NUM              Force polling Force watch to use polling.      –force_polling              Verbose output Print verbose output.      -V, –verbose              Silence Output Silence the normal output from Jekyll during a build      -q, –quiet              Incremental build Enable the experimental incremental build feature. Incremental build only re-builds posts and pages that have changed, resulting in significant performance improvements for large sites, but may also break site generation in certain cases.      incremental: BOOL -I, –incremental              Liquid profiler Generate a Liquid rendering profile to help you identify performance bottlenecks.      profile: BOOL –profile      ",
      "url": " /2016/jekyll-build-command-options/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-global-configuration": {
      "title": "Jekyll Global Configuration",
      "content"	 : "Jekyll allows you to concoct your sites in any way you can dream up, and it’s thanks to the powerful and flexible configuration options that this is possible. These options can either be specified in a _config.yml file placed in your site’s root directory, or can be specified as flags for the jekyll executable in the terminal.The table below lists the available settings for Jekyll, and the various options (specified in the configuration file) and flags (specified on the command-line) that control them.            SETTING      OPTIONS AND FLAGS                  Site Source Change the directory where Jekyll will read files      source: DIR -s, –source DIR              Site Destination Change the directory where Jekyll will write files      destination: DIR -d, –destination DIR              Safe Disable custom plugins, and ignore symbolic links      safe: BOOL –safe              Exclude Exclude directories and/or files from the conversion. These exclusions are relative to the site’s source directory and cannot be outside the source directory      exclude: [DIR, FILE, …]              Include Force inclusion of directories and/or files in the conversion.  .htaccess is a good example since dotfiles are excluded by default.      include: [DIR, FILE, …]              Keep files When clobbering the site destination, keep the selected files. Useful for files that are not generated by jekyll; e.g. files or assets that are generated by your build tool. The paths are relative to the destination.      keep_files: [DIR, FILE, …]              Time Zone Set the time zone for site generation. This sets the TZ environment variable, which Ruby uses to handle time and date creation and manipulation. Any entry from the IANA Time Zone Database is valid, e.g. America/New_York. A list of all available values can be found here. The default is the local time zone, as set by your operating system.      timezone: TIMEZONE              Encoding Set the encoding of files by name (only available for Ruby 1.9 or later). The default value is utf-8 starting in 2.0.0, and nil before 2.0.0, which will yield the Ruby default of ASCII-8BIT. Available encodings can be shown by the command ruby -e ‘puts Encoding::list.join(“n”)’      encoding: ENCODING              Defaults Set defaults for YAML Front Matter variables.      see below      The contents of &amp;lt;destination&amp;gt; are automatically cleaned, by default, when the site is built. Files or folders that are not created by your site will be removed. Some files could be retained by specifying them within the &amp;lt;keep_files&amp;gt; configuration directive.",
      "url": " /2016/jekyll-global-configuration/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-api-design": {
      "title": "API Design",
      "content"	 : "Great API’sYears of experience of dealing with different kinds of APIs have left the developer community with a pretty good sense of the need-to-have features of any good API.  Developer friendly:  Extensibility:  Up-to-date documentation:  Proper error handling:  Provides multiple SDK/libraries:  Security:  Scalability:Developer FriendlyBy definition, an API is an application programming interface, with the key word being interface. When thinking about designing an API that will be used by developers other than yourself, the key aspect, Developer eXperience (or DX), needs to be taken into consideration.Even when the API will be used by another system, the integration into that system is first done by one or more developers—human beings that bring the human factor into that integration. This means you’ll want the API to be as easy to use as possible, which makes for a great DX, and which should translate into more developers and client applications using the API.Since simplifying things for humans could lead into an oversimplification of the interface, which in turn could lead to design issues when dealing with complex functionalities.It is important to consider the DX as one of the major aspects of an API, but there are other aspects that have to be taken into consideration and have weight in the design decisions.Communication’s ProtocolThis is one of the most basic aspects of the interface. When choosing a communication protocol, it’s always a good idea to go with one that is familiar to the developers using the API. There are several standards that already have libraries and modules available in many programming languages (e.g., HTTP, FTP, SSH, etc.).A custom-made protocol isn’t always a good idea because you’ll lose that instant portability in so many existing technologies. That said, if you’re ready to create support libraries for the most used languages, and your custom protocol is more efficient for your use case, it could be the right choice.In the end, it’s up to the API designer to evaluate the best solution based on the context he’s working in.In this article, we’re working under the assumption that the protocol chosen for REST is HTTP. It’s a very well-known protocol, any modern programming language supports it and it’s the basis for the entire Internet.You can rest assured that most developers have a basic understanding of how to use it. And if not, there is plenty of information out there to get to know it better.Easy-to-Remember Access PointsThe points of contact between all client apps and the API are called endpoints. The API needs to provide them to allow clients to access its functionalities. This can be done through whatever communications protocol is chosen. These access points should have mnemotechnic names to help the developer understand their purpose just by reading them.Of course, the name by itself should never be a replacement for a detailed documentation, but it is normally considered a good idea to reference the resource being used, and to have some kind of indicator of the action being taken when calling that access point.The following is a good example of a badly named access point:GET /books/action1This example uses the HTTP protocol to specify the access point, and even though the entity used is being referenced, the action name is not clear; action1 could mean anything, or even worst, the meaning could change in the future, but the name would still be suitable, so any existing client would undoubtedly break.A better example—one that follows REST and the standards:GET /booksThis should present the developer with more than enough information to understand that a GET request into the root of a resource (/books) will always yield a list of items of this type, then the developer can replicate this pattern into other resources, as long as the interface is kept uniform across all other endpoints.Uniform InterfaceEasy-to-remember access points are important, but so is being consistent when defining them. Again, you have to go back to the human factor when consuming an API.That means you need to be consistent when defining endpoints’ names, request formats, and response formats. There can be more than one for the latter two (more specifically, the response format is directly tied to the various representations a resource can have), but as long as the default is always the same, there will be no problems.A good example of an inconsistent interface, even though not on an API, can be seen in the programming language PHP. It has underscore notation on most functions’ names, but the underscore is not used on some, so the developer is always forced to go back to the documentation to check how to write these functions (or worst, rely on his/her memory).For example, str_replace is a function that uses an underscore to separate both words (str and replace), whereas htmlentities has no separation of words at all.Another example of bad design practice in an API is to name the endpoints based on the actions taken instead of the resources handled, for example:/getAllBooks/submitNewBook/updateAuthor/getBooksAuthors/getNumberOfBooksOnStockThese examples clearly show the pattern that this API is following. And at a first glance, they might not seem that bad, but consider how poor the interface is going to become as new features and resources are added to the system (not to mention if the actions are modified).Each new addition to the system causes extra endpoints to the API’s interface. The developers of client apps will have no clue as to how these new endpoints are named. For instance, if the API is extended to support the cover images of books, with the current naming scheme, these are all possible new endpoints:/addNewImageToBook/getBooksImages/addCoverImage/listBooksCoversAnd the list can go on. So for any real-world application, you can safely assume that following this type of pattern will yield a really big list of endpoints, increasing the complexity of both server-side code and client-side code. It will also hurt the system’s ability to capture new developers, due to the inherited complexity that it will have over the years.To solve this problem, and generate an easy-to-use and uniform interface across the entire API, you can apply the REST style to the endpoints. If you remember the constraints proposed by REST, you end up with a resource-centric interface. And thanks to HTTP, you also have verbs to indicate actions.Table below shows how the previous interface changes using REST.            Old Style      REST Style                  /getAllBooks      GET /books              /submitNewBook      POST /books              /updateAuthor      PUT /authors/:id              /getBooksAuthors      GET /books/:id/authors              /getNumberOfBooksOnStock      GET /books (This number can easily be returned as part of this endpoint.)              /addNewImageToBook      PUT /books/:id              /getBooksImages      GET /books/:id/images              /addCoverImage      POST /books/:id/cover_image              /listBooksCovers      GET /books (This information can be returned in this endpoint using subresources.)      You went from having to remember nine different endpoints to just two, with the added bonus of having all HTTP verbs being the same in all cases once you defined the standard. Now there is no need to remember specific roles in each case.Transport LanguageAnother aspect of the interface to consider is the transport language used. For many years, the de facto standard was XML. It provided a technology-agnostic way of expressing data that could easily be sent between clients and servers. Nowadays, there is a new standard gaining popularity over XML—JSON.Why JSON?JSON provides some advantages:  It’s lightweight. There is very little data in a JSON file that is not directly related to the information being transferred. This is a major winning point over more verbose formats like XML.  It’s human readable. The format itself is so simple that it can easily be read and written by a human. This is particularly important considering that a focus point of the interface of any good API is the human factor.  It supports different data types. Because not everything being transferred is a string, this feature allows the developer to provide extra meaning to the information transferred.These are the three main aspects that are helping JSON win so many followers in the developer community.Even though JSON is a great format and is gaining traction, it’s not the silver bullet that will always solve all of your problems; so it’s also important to provide clients with options. And here is where REST comes to help.Since the protocol you’re basing REST on is HTTP, developers can use a mechanism called content negotiation to allow clients to specify which of the supported formats they want to receive. This allows for more flexibility on the API, and still keeps the interface uniform.Going back to the list of endpoints, the last one talks about using a subresource as the solution. That can be interpreted in several ways, because not only is the language used to transfer the data important, but so is the structure that you give the data being transferred. My final advice for a uniform interface is to standardize the format used, or even better, follow an existing one, like HAL.ExtensibilityA good API is never fully finished, the APIs will keep growing and changing because the client apps developers find new ways to use it, the business model of the API owner changes over time, or simply because features are added and removed.When any of this happens, the API may need to be extended or changed, and new access points added or old ones changed. If the original design is right, then going from v1 to v2 should be no problem, but if it’s not, then that migration could spell disaster for everyone.How Is Extensibility Managed?When extending the API, you’re basically releasing a new version of your software, so the first thing you need to do is let your users know what will happen once the new version is out.A good API should take the following points into consideration:  How easily can new endpoints be added?  Is the new version backward-compatible?  Can clients continue to work with older versions of the API while their code is being updated?  What will happen to existing clients targeting the new API?  How easy will it be for clients to target the new version of the API?Once all these points are settled, then you can safely grow and extend the API.Normally, going from version A to version B of an API by instantly deprecating version A and taking it offline in favor of version B is considered a bad move, unless you have very few client applications using that version, of course.A better approach for this type of situation is to allow developers to choose which version of the API they want to use, keeping the old version long enough to let everyone migrate into the newer one.And in order to do this, an API would include its version number in the resource identifier. This approach makes the version number a mandatory part of the URL to clearly show the version in use.Another approach, which may not be as clear, is to provide a versionless URL that points to the latest version of the API, and an optional URL parameter to overwrite the version. Both approaches have pros and cons that have to be weighted by the developer creating the API.Pros and Cons of Having the Version of the API As Part of the URL:            Pros      Cons                  The version number is clearly visible, helping avoid confusion about the version being used.      URLs are more verbose.              Easy to migrate from one version to another, from a client perspective (all URLs change the same portion—the version number)      A wrong implementation on the API code could cause a huge amount of work when migrating from one version to the other (i.e., if the version is hardcoded on the endpoint’s URL template, individually for every endpoint).              Allows cleaner architecture when more than one version of the API needs to be kept working.      .              Clear and simple migration from one version to the next from the API perspective, since both versions could be kept working in parallel for a period of time, allowing slower clients to migrate without breaking.      .              The right versioning scheme can make fixes and backward-compatible new features instantly available without the need to update on the client’s part.      .              Simpler URLs.      A Hidden version number might lead to confusion about the version being used.              Instant migration to latest working code of the API.      Non-backward-compatible changes will break the clients that are not referencing a specific version of the API.              Simple migration from one version to the next from the client’s perspective (only change the value of the attribute).      Complex architecture required to make version selection available.              Easy test of client code against the latest version (just don’t send version-specific parameters).      .      Keeping this in mind, there are several versioning schemes to use when it comes to setting the version of a software product.Ubuntu’s7 version numbers represent the year and month of the release; so version 14.04 means it was released in April 2014.In the Chromium project, version numbers have four parts8: MAJOR.MINOR.BUILD.PATCH. The following is from the Chromium project’s page on versioning: MAJOR and MINOR may get updated with any significant Google Chrome release (Beta or Stable update). MAJOR must get updated for any backward- incompatible user data change (since this data survives updates). BUILD must get updated whenever a release candidate is built from the current trunk (at least weekly for Dev channel release candidates). BUILD number is an ever-increasing number representing a point in time of the Chromium trunk. PATCH must get updated whenever a release candidate is built from the BUILD branch.Another intermediate approach, known as Semantic Versioning or SemVer,9 is well accepted by the community. It provides the right amount of information. It has three numbers for each version: MAJOR. MINOR.PATCH.  MAJOR represents changes that are not backward-compatible.  MINOR represents new features that leave the API backward-compatible.  PATCH represents small changes like bug fixes and code optimization.With that scheme, the first number is the only one that is really relevant to clients, since that’ll be the one indicating compatibility with their current version.By having the latest version of MINOR and PATCH deployed on the API at all times, you’re providing clients with the latest compatible features and bug fixes, without making clients update their code.So with that simple versioning scheme, the endpoints look like this:GET /1/books?limit=10&amp;amp;size=10POST /v2/photosGET /books?v=1When choosing a versioning scheme, please take the following into consideration:  Using the wrong versioning scheme might cause confusion or problems when implementing a client app, by consuming the wrong version of the API. For instance, using Ubuntu’s versioning scheme for your API might not be the best way to communicate what is going on in each new version.  The wrong versioning scheme might force clients to update a lot, like when a minor fix is deployed or a new backward-compatible feature is added. Those changes shouldn’t require a client update. So don’t force the client to specify those parts of the version unless your scheme requires it.Up-to-Date DocumentationNo matter how mnemotechnic your endpoints are, you still need to have documentation explaining everything that your API does. Whether optional parameters or the mechanics of an access point, the documentation is fundamental to having a good DX, which translates into more users.A good API requires more than just a few lines explaining how to use an access point (there is nothing worse than discovering that you need an access point but it has no documentation at all), but needs a full list of parameters and explanatory examples.Some providers give developers a simple web interface to try their API without having to write any code. This is particularly useful for newcomers.There are some online services that allow API developers to upload their documentation, as well as those that provide the web UI to test the API; for example, Mashape provides this service for free.Another good example of detailed documentation is at Facebook’s developer site.10 It providesimplementation and usage examples for all the platforms that Facebook supports.An example of a poorly written documentation is 4chan’s API documentation. Yes, the API appears to not be complicated enough to merit writing a whole book about it, but then again, there are no examples provided, only a generic explanation of how to find the endpoints and what parameters to use. Newcomers might find it hard to understand how to implement a simple client that uses this API.Although it might not seem like the most productive idea while developing an API, the team needs to consider working on extensive documentation. It is one of the main things that will assure the success or failure of the API for two main reasons:  It should help newcomers and advance developers to consume your API without any problems.  It should serve as a blueprint for the development team, if it is kept up-to-date. Jumping into a project mid-development is easier if there is a well-written and well- explained blueprint of how the API is meant to work.This also applies to updating the documentation when changes are made to the API. You need to keep it updated; otherwise, the effect is the same as not having documentation at all.Proper Error HandlingError handling on an API is incredibly important, because if it is done right, it can help the client app understand how to handle errors, and on the human side of it, it can help developers understand what it is they’re doing wrong and how to fix it.There are two very distinct moments during the life cycle of an API client that you need to consider error handling:  Phase 1: The development of the client.  Phase 2: The client is implemented and being used by end users.Development of the ClientDuring the first phase, developers implement the required code to consume the API. It is very likely that a developer will have errors on the requests during this stage. Those errors need to be handled properly, which means returning enough information to let developers know what they did wrong and how they can fix it.A common problem with some systems is that their creators ignore this stage, and when there is a problem with the request, the API crashes, and the returned information is just an error message with the stack trace and the status code 500.When you forget to add error handling in the client development stage. The stack trace returned might give the developer some sort of clue (at best) as to what exactly went wrong, but it also shows a lot of unnecessary information, so it ends up being confusing. This certainly hurts development time, and no doubt would be a major point against the DX of the API.Its better to clearly show that there has been an error, what the error is, and an error code. A with only three attributes, is much better helpful:  The error indicator gives the developer a clear way to check whether or not the response is an error message (you could also check against the status code of the response).  The error message is clearly intended for the developer, and not only states what’s missing, but also explains how to fix it.  A custom error code, if explained in the documentation, could help a developer automate actions when this type of response happens again.The Client Is Implemented and Being Used by End UsersDuring this stage in the life cycle of the client, you’re not expecting any more developer errors, such as using the wrong endpoint, missing parameters, and the like, but there could still be problems caused by the data generated by the user.Client applications that request some kind of input from the user are always subject to errors on the user’s part, and even though there are always ways to validate that input before it reaches the API layer, it’s not safe to assume all clients will do that. So the safest bet for any API designer and developer is to assume there is no validation done by the client, and anything that could go wrong, will go wrong with the data. This is also a safe assumption to make from a security point of view, so it’s providing a minor security improvement as a side effect.With that mindset, the API implemented should be rock-solid and able to handle any type of errors in the input data. The response should mimic the one from phase 1: there should be an error indicator, an error message stating what’s wrong (and if possible, how to fix it), and a custom error code. The custom error code is especially useful in this stage, since it’ll provide the client with the ability to customize the error shown to the end user.Multiple SDK/LibrariesIf you expect your API to be massively used across different technologies and platforms, it might be a good idea to develop and provide support for libraries and SDKs that can be used with your system.By doing so, you provide developers with the means to consume your services, so all they have to do is use them to create their client apps. Essentially, you’re shaving off potential weeks or months (depending on the size of your system) of development time.Another benefit is that most developers will inherently trust your libraries over others that do the same, because you’re the owner of the service those libraries are consuming.Finally, consider open sourcing the code of your libraries. These days, the open source community is thriving. Developers will undoubtedly help maintain and improve your libraries if they’re of use to them. Let’s look again at some of the biggest APIs out there:  Facebook API provides SDKs for iOS, Android, JavaScript, PHP, and Unity.12  Google Maps API provides SDKs for several technologies, including iOS, the Web, and Android.13  Twitter API provides SDKs for several of their APIs, including Java, ASP, C++, Clojure, .NET, Go, JavaScript, and a lot of other languages.  Amazon provides SDKs for their AWS service, including PHP, Ruby, .NET, and iOS.They even have those SDKs on GitHub for anyone to see.SecuritySecuring your API is a very important step in the development process and it should not be ignored, unless what you’re building is small enough and has no sensitive data to merit the effort.There are two big security issues to deal with when designing an API:  Authentication: Who’s going to access the API?  Authorization: What will they be able to access once logged in?Authentication deals with letting valid users access the features provided by the API. Authorization deals with handling what those authenticated users can actually do inside the system.Before going into details about each specific issue, there are some common aspects that need to be remembered when dealing with security on RESTful systems (at least, those based on HTTP):  RESTful systems are meant to be stateless. Remember that REST defines the server as stateless, which means that storing the user data in session after the initial login is not a good idea (if you want to stay within the guidelines provided by REST that is).  Remember to use HTTPS. On RESTful systems based on HTTP, HTTPS should be used to assure encryption of the channel, making it harder to capture and read data traffic (man-in-the-middle attack).Accessing the SystemThere are some widely used authentication schemes out there meant to provide different levels of security when signing users into a system. Some of the most commonly known ones are Basic Auth with TSL, Digest Auth, OAuth 1.0a, and OAuth 2.0.I’ll go over these and talk about each of their pros and cons. I’ll also cover an alternative method that should prove to be the most RESTful, in the sense that it’s 100% stateless.Almost Stateless MethodsOAuth 1.0a, OAuth 2.0, Digest Auth, and Basic Auth + TSL are the go-to methods of authentication these days. They work wonderfully, they have been implemented in all of the modern programming languages, and they have proven to be the right choice for the job (when used for the right use-case).That being said, as you’re about to see, none of them are 100% stateless.They all depend on having the user have information stored on some kind of cache layer on the server side. This little detail, especially for the purists out there, means a no-go when designing a RESTful system, because it goes against one of the most basic of the constraints imposed by REST, Communication between client and server must be stateless.This means the state of the user should not be stored anywhere.You will look the other way in this particular case, however. I’ll cover the basics of each method anyway, because in real life, you have to compromise and you have to find a balance between purism and practicality. But don’t worry. I’ll go over an alternative design that will solve authentication and stay true to REST.Basic Auth with TSLThanks to the fact that you’re basing REST on HTTP for the purpose of this book, the latter provides a basic authentication method that most of the languages have support for.Keep in mind, though, that this method is aptly named, since it’s quite basic and works by sending the username and password unencrypted over HTTP. So the only way to make it secure is to use it with a secured connection over HTTPS (HTTP + TSL).This authentication method works as follows:  First, a client makes a request for a resource without any special header.  The server responds with a 401 unauthorized response, and within it, a WWW- Authenticate header, specifying the method to use (Basic or Digest) and the realm name.  The client then sends the same request, but adds the Authorization header, with the string USERNAME:PASSWORD encoded in base 64.On the server side, there needs to be some code to decode the authentication string and load the user data from the session storage used (normally a database).Aside from the fact that this approach is one of the many that will break the nonstateless constraint, it’s easy and fast to implement.** When using this method, if the password for a logged in user is reset, then the login data sent on the request becomes old and the current session is terminated.**Digest AuthThis method is an improvement over the previous one, in the sense that it adds an extra layer of security by encrypting the login information. The communication with the server works the same way, by sending the same headers back and forth.With this methodology, upon receiving a request for a protected resource, the server will respond with a WWW-Authenticate header and some specific parameters. Here are some of the most interesting:  Nounce: A uniquely generated string. This string needs to be unique on every 401 response.  Opaque: A string returned by the server that has to be sent back by the client unaltered.  Qop: Even though optional, this parameter should be sent to specify the quality of protection needed (more than one token can be sent in this value). Sending auth back would imply a simple authentication, whereas sending auth-int implies authentication with integrity check.  Algorithm: This string specifies the algorithm used to calculate the checksum response form the client. If not present, then MD5 should be assumed.For the full list of parameters and implementation details, please refer to the RFC.16 Here is a list of some of the most interesting ones:  Username: The unencrypted username.  URI: The URI you’re trying to access.  Response: The encrypted portion of the response. This proves that you are who you say you are.  Qop: If present, it should be one of the supported values sent by the server.To calculate the response, the following logic needs to be applied:MD5(HA1:STRING:HA2)Those values for HA1 are calculated as follows:  If no algorithm is specified on the response, then MD5(username:realm:password) should be used.  If the algorithm is MD5-less, then it should be MD5(MD5(username:realm:password) :nonce:cnonce)Those values for HA2 are calculated as follows:  If qop is auth, then MD5(method:digestURI) should be used.  If qop is auth-int, then MD5(method:digestURI:MD5(entityBody))Finally, the response will be as follows:MD5(HA1:nonce:nonceCount:clientNonce:HA2) //for the case when &quot;qop&quot; is &quot;auth&quot; or &quot;auth-int&quot;MD5(HA1:nonce:HA2) //when &quot;qop&quot; is unspecified.The main issue with this method is that the encryption used is based on MD5, and in 2004 it was proven that this algorithm is not collision resistant, which basically means a man-in-the-middle attack would make it possible for an attacker to get the necessary information and generate a set of valid credentials.A possible improvement over this method, just like with its “Basic” brother, would be adding TSL; this would definitely help make it more secure.OAuth 1.0aOAuth 1.0a is the most secure of the four nonstateless methodologies described in this section. The process is a bit more tedious than the ones described earlier (see Figure 2-8), but the trade-off here is a significantly increased level of security.In this case, the service provider has to allow the developer of the client app to register the app on the provider’s web site. By doing so, the developer obtains a consumer key (a unique identifying key for his application) and the consumer secret. Once that process is done, the following steps are required:  The client app needs a request token. The purpose is to receive the user’s approval and then request an access token. To get the request token, a specific URL must be provided by the server; in this step, the consumer key and the consumer secret are used.  Once the request token is obtained, the client must make a request using the token on a specific server URL (i.e., http://provider.com/oauth/authorize) to get authorization from the end user.• After authorization from the user is given, then the client app makes a request to the provider for an access token and a token secret key.• Once the access token and secret token are obtained, the client app is able to request protected resources for the provider on behalf of the user by signing each request.OAuth 2.0OAuth 2.0 is meant to be the evolution of OAuth 1.0a, it focuses on client developer simplicity. The main problem with implementations of systems that worked with OAuth 1.0 was the complexity implied in the last step, signing every request.Due to its complexity, the last step is the key weak point of the algorithm, if either the client or server makes a tiny mistake, then the requests will not validate. Even when the same aspect made it the only methodology that didn’t need to work on top of SSL (or TSL), this benefit wasn’t enough.OAuth 2.0 tries to simplify the last step by making some key changes, mainly:  It relies on SSL (or TSL) to ensure that the information sent back and forth is encrypted.  Signatures are not required for requests after the token has been generated.To summarize, this version of OAuth tries to simplify the complexity introduced by OAuth 1.0, while sacrificing security at the same time (by relying on TSL to ensure data encryption). It is the preferred method over OAuth 1.0 if the devices you’re dealing with have support for TSL (computers, mobile devices, etc.); otherwise, you might want to consider using other options.A Stateless AlternativeAs you’ve seen, the alternatives you have when it comes to implementing a security protocol to allow users to sign into a RESTful API are not stateless, and even though you should be prepared to make that commitment in order to gain the benefits of tried and tested ways of securing your application, there is a fully REST compatible way of doing it as well.The stateless constraints basically imply that any and all states of the communication between client and server should be included on every request made by the client. This of course includes the user information, so if you want to have stateless authentication, you need to include that in your requests as well.If you want to ensure the authenticity of each request, you can borrow the signature step of OAuth 1.0a and apply it on every request by using a pre-established secret key between the client and the server, and a MAC (Message Authentication Code) algorithm to do the signing.As you’re keeping it stateless, the information required to generate the MAC needs to also be sent as part of the request, so the server can re-create the result and corroborate its validity. This approach has some clear advantages in our case, mainly:  It’s simpler than both OAuth 1.0a and OAuth 2.0.  Zero storage is needed, since any and all required information to validate the encryption needs to be sent on every request.ScalabilityScalability is usually an underestimated aspect of API design, mainly because it’s quite difficult to fully understand and predict the reach one API will have before it launches. It might be easier to estimate this if the team has previous experience with similar projects.A good API should be able to scale, that means, it should be able to handle as much traffic as it gets without compromising its performance. But it also means it should not spend resources if they’re not needed.This is not only a reflection of the hardware that the API resides on (although that is an important aspect) it’s also a reflection of the underlying architecture of that API.Over the years, the classic monolithic design in software architecture has been migrating into a fully distributed one, so splitting the API into different modules that interact with each other makes sense.This provides the flexibility needed to not only scale up or down the resources that are affected, but to also provide fault tolerance, help developers maintain cleaner code bases amongst other advantages.Achieving a distributed architecture to ensure scalability using REST is quite simple. Fielding’s paper proposes a distributed system based on a client-server scheme.So splitting the entire system into a set of smaller APIs, having them talk to each other when required will ensure the advantages mentioned earlier.For instance, let’s look at an internal system for a bookstore, the main entities would be:            Entity      Description                  Books      Represents the inventory of the store. It’ll control everything from book data, to number of copies, and so forth.              Clients      Contact information of clients.              Users      Internal bookstore users, they will have access to the system.              Purchases      Records information about book sales.      Now, consider that system on a small bookstore, one that is just starting and has just a few employees. It’s very tempting to go with a monolithic design, not a lot of resources will be spent and the design is quite simple.Now, consider what would happen if the small bookstore suddenly grows so much that it expands into several other bookstores, they go from having one store, to 100, employee numbers grow, books need better tracking, purchases sky rocket.The simple system from before will not be enough to handle such growth. It would require changes to support networking, centralized data storage, distributed access, better storage capacity, and so forth. In other words scaling it up would be too expensive and probably it would require a complete rewrite.Finally, consider an alternative beginning, what if you took the time to create the first system using a distributed architecture based on REST? Having each sub-system be a different API and having them talk to each other.Then you would’ve been able to scale the whole thing much easier, working independently on each sub-system there would be no need for full rewrites and the system could potentially keep growing to meet new needs.SummaryThis chapter covered what the developer community considers a “good API,” which means the following:  Remembering the Developer eXperience (DX).  Being able to grow and improve without breaking existing clients.  Having up-to-date documentation.  Providing correct error handling.  Providing multiple SDK and libraries.  Thinking about security.  Being able to scale, both up and down, as needed.",
      "url": " /2016/api-design/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2016-rest-resources": {
      "title": "REST Resources",
      "content"	 : "The main building blocks of a REST architecture are the resources. Anything that can be named can be a resource (a web page, an image, a person, a weather service report, etc.).Resources define what the services are going to be about, the type of information that is going to be transferred, and their related actions. The resource is the main entity from which everything else is born.A resource is the abstraction of anything that can be conceptualized (from an image file, to a plain text document). The structure of a resource is shown in the table below:            Property      Description                  Representations      It can be any way of representing data (binary, JSON, XML, etc.). A single resource can have multiple representations.              Identifier      A URL that retrieves only one specific resource at any given time.              Metadata      Content-type, last-modified time, and so forth.              Control data      Is-modifiable-since, cache-control.      RepresentationsAt its core, a representation is a set of bytes, and some metadata that describes these bytes. A single resource can have more than one representation; just think of a weather service report. The weather report for a single day could potentially return the following information:  The date the report is referencing  The maximum temperature for the day  The minimum temperature for the day  The temperature unit to be used  A humidity percentage  A code indicating how cloudy the day will be (e.g., high, medium, low)Now that the resource’s structure is defined, here are a few possible representations of the same resource:JSON {  &quot;date&quot;: &quot;2014-10-25&quot;,  &quot;max_temp&quot;: 25.5,  &quot;min_temp&quot;: 10.0,  &quot;temp_unit&quot;: &quot;C&quot;,  &quot;humidity_percentage&quot;: 75.0,  &quot;cloud_coverage&quot;: &quot;low&quot;}XML&amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;UTF-8&#39; ?&amp;gt;&amp;lt;root&amp;gt;  &amp;lt;temp_unit value=&quot;C&quot; /&amp;gt;  &amp;lt;humidity_percentage value=&quot;75.0&quot; /&amp;gt;  &amp;lt;cloud_coverage value=&quot;low&quot; /&amp;gt;  &amp;lt;date value=&quot;2014-10-25&quot; /&amp;gt;  &amp;lt;min_temp value=&quot;10.0&quot; /&amp;gt;  &amp;lt;max_temp value=&quot;25.5&quot; /&amp;gt;&amp;lt;/root&amp;gt;2014-10-25|25.5|10.0|C|75.0|lowAnd there could be many more. They all successfully represent the resource correctly; it is up to the client to read and parse the information. Even when the resource has more than one representation, it is common for clients to only request one of them. Unless you’re doing some sort of consistency check against the API, there is no point in requesting more than one representation of the same resource, is there?There are two very popular ways to let the client request a specific representation on a resource that has more than one. The first one directly follows the principles described by REST, called content negotiation, which is part of the HTTP standard. The second one is a simplified version of this, with limited benefits. For the sake of completeness, I’ll quickly go over them both.Content NegotiationAs mentioned, this methodology is part of the HTTP standard so it’s the preferred way according to REST (at least when focused on API development on top of HTTP). It is also more flexible and provides further advantages than the other method.It consists of the client sending a specific header with the information of the different content types (or types of representations) supported, with an optional indicator of how much preferred that format is. Let’s look at an example from the “Content Negotiation” page on Wikipedia:Accept: text/html; q=1.0, text/*; q=0.8, image/gif; q=0.6, image/jpeg; q=0.6, image/*;q=0.5, */*; q=0.1This example is from a browser configured to accept various types of resources, but preferring HTML over plain text, and GIF or JPEG images over other types, but ultimately accepts any other content type as a last resort.On the server side, the API is in charge of reading this header and finding the best representation for each resource, based on the client’s preferences.Using File ExtensionsEven though this approach is not part of the REST proposed style, it is widely used and a fairly simple alternative to the somewhat more complex other option.During the last few years, using file extensions has become an alternative preferred over using content negotiation; it is a simpler version and it doesn’t rely on a header being sent, but instead, it works with the concept of file extensions. The extension portion of the file’s name indicates the content type to the operating system and any other software trying to use it; so in the following case, the extension added to the resource’s URL (unique identifier) indicates to the server the type of representation wanted.GET /api/v1/books.json GET /api/v1/books.xmlResource IdentifierThe resource identifier should provide a unique way of identification at any given moment and it should provide the full path to the resource. The way to access the resource it to provide its full URI (unique resource identifier).The identifier of each resource must be able to reference it unequivocally at any given moment in time. This is an important distinction, because a URI like the following might reference Harry Potter and the Half Blood Prince for a certain period of time, and then Harry Potter and the Deathly Hollows one year later:GET /api/v1/books/lastThis renders that URI as an invalid resource ID. Instead, each book needs a unique URI that is certain to not change over time:GET /api/v1/books/j-k-rowling/harry-potter-and-the-deathly-hollowsGET /api/v1/books/j-k-rowling/harry-potter-and-the-half-blood-princeA valid example for getting the last book might be:GET /api/v1/books?limit=1&amp;amp;sort=created_atThe preceding URI references the lists of books, and it asks for only one, sorted by its publish date, thus rendering the last book added.ActionsIdentifying a resource is easy. You know how to access it and you even know how to request for a specific format (if there is more than one). But that’s not all that REST proposes. Since REST is using the HTTP protocol as a standing point, the latter provides a set of verbs that can be used to reference the type of action being done over a resource.There are other actions, aside from accessing, that a client app can take in the resources provided by an API; these depend on the service provided by the API. These actions could potentially be anything, just like the type of resources handled by the system. Still, there is a set of common actions that any system that is resource-oriented should be able to provide: CRUD (create, retrieve, update, and delete) actions.These so-called actions can be directly mapped to the HTTP verbs, but REST does not enforce a standardized way to do so. However, there are some actions that are naturally derived by the verb and others that have been standardized by the API development community over the years, as shown in the table bolow:            HTTP Verb      Proposed Action                  GET      Access a resource in a read-only mode.              POST      Normally used to send a new resource into the server (create action).              PUT      Normally used to update a given resource (update action).              DELETE      Used to delete a resource.              HEAD      Not part of the CRUD actions, but the verb is used to ask if a given resource exists without returning any of its representations.              OPTIONS      Not part of the CRUD actions, but used to retrieve a list of available verbs on a given resource (i.e., What can the client do with a specific resource?).      That said, a client may or may not support all of these actions. It depends on what needs to be achieved. For instance, web browsers— a clear and common example of a REST client— only have support forGET and POST verbs from within the HTML code of a page, such as links and forms (although using the XMLHTTPRequest object from JavaScript would provide support for the major verbs mentioned earlier).Note: The list of verbs and their corresponding actions are suggestions. For instance, there are some developers who prefer to switch PUT and POST, by having PUT add new elements and POST update them.Complex ActionsCRUD actions are normally required, but they’re just a very small subset of the entire spectrum of actions that a client can do with a specific resource or set of resources.For instance, take common actions like searching, filtering, working with subresources, sharing a blogpost, and so forth. All of these actions fail to directly match one of the verbs that I mentioned.The first solution that many developers succumb to is to specify the action taken as part of the URL; so you might end up with things like the following:GET /api/v1/blogpost/12342/like GET /api/v1/books/searchGET /api/v1/authors/filteringhose URLs break the URI principle, because they’re not referencing a unique resource at any given time; instead, they’re referencing an action on a resource (or group of resources). They might seem like a good idea at first, but in the long run, and if the system keeps on growing, there will be too many URLs, which will increase the complexity of the client using the API.So to keep things simple, use the following rule of thumb: Hide the complexity of your actions behind the ? sign. This rule can apply to all verbs, not just GET, and can help achieve complex actions without compromising the URL complexity of the API. For the preceding examples, the URIs could become something like this:PUT /api/v1/blogposts/12342?action=likeGET /api/v1/books?q=[SEARCH-TERM]GET /api/v1/authors?filters=[COMMA SEPARATED LIST OF FILTERS]Notice how the first one changed from a GET to a PUT due to the fact that the action is updating a resource by liking it.Hypermedia Respons and Main Entry PointTo make REST’s interface uniform, several constraints must be applied. One of them is Hypermedia as the Engine of Application State, also known as HATEOAS. If you follow the rules of REST you end up with a great new feature that allows any RESTful system client to start the interaction knowing only a single endpoint of the entire system, the root endpoint.Example of a JSONResponse from the Root Endpoint{  &quot;metadata&quot;: {    &quot;links&quot;: [      &quot;books&quot;: {        &quot;uri&quot;: &quot;/books&quot;,        &quot;content-type&quot;: &quot;application/json&quot;      },      &quot;authors&quot;: {        &quot;uri&quot;: &quot;/authors&quot;,        &quot;content-type&quot;: &quot;application/json&quot;      }] }}Example of Another JSON Response with Hyper links to Other Resources{    &quot;resources&quot;: [{        &quot;title&quot;: &quot;Harry Potter and the Half Blood prince&quot;,        &quot;description&quot;: &quot;......&quot;,        &quot;author&quot;: {            &quot;name&quot;: &quot;J.K.Rowling&quot;,            &quot;metadata&quot;: {                &quot;links&quot;: {                    &quot;data&quot;: {                        &quot;uri&quot;: &quot;/authors/j-k-rowling&quot;,                        &quot;content-type&quot;: &quot;application/json&quot;                    },                    &quot;books&quot;: {                        &quot;uri&quot;: &quot;/authors/j-k-rowling/books&quot;,                        &quot;content-type&quot;: &quot;application/json&quot;                    }                }            }        },        &quot;copies&quot;: 10    }, {        &quot;title&quot;: &quot;Dune&quot;,        &quot;description&quot;: &quot;......&quot;,        &quot;author&quot;: {            &quot;name&quot;: &quot;Frank Herbert&quot;,            &quot;metadata&quot;: {                &quot;links&quot;: {                    &quot;data&quot;: {                        &quot;uri&quot;: &quot;/authors/frank-herbert&quot;,                        &quot;content-type&quot;: &quot;application/json&quot;                    },                    &quot;books&quot;: {                        &quot;uri&quot;: &quot;/authors/frank-herbert/books&quot;,                        &quot;content-type&quot;: &quot;application/json&quot;                    }                }            }        },        &quot;copies&quot;: 5    }],    &quot;total&quot;: 100,    &quot;metadata&quot;: {        &quot;links&quot;: {            &quot;next&quot;: {                &quot;uri&quot;: &quot;/books?page=1&quot;,                &quot;content-type&quot;: &quot;application/json&quot;            }        }    }}With that information, the client application knows the following logical steps:  How to get the information from the books authors  How to get the list of books by the authors  How to get the next page of resultsNote that the full list of authors is not accessible through this endpoint; this is because it’s not needed in this particular use case, so the API just doesn’t return it. It was present on the root endpoint, though; so if the client needs it when displaying the information to the end user, it should still be available.Each link from the preceding example contains an attribute specifying the content-type of the representation of that resource. If the resources have more than one possible representation, the different formats could be added as different links inside each resource’s metadata element, letting the client choose the most adequate to the current use case, or the type could change based on the client’s preferences (content negotiation).Note that the earlier JSON structure (more specifically, the metadata elements’ structure) is not important. The relevant part of the example is the information presented in the response. Each server has the freedom to design the structure as needed.Not having a standard structure might harm the developer experience while interacting with your system, so it might be a good idea to adopt one. This is certainly not enforced by REST, but it would be a major point in favor of your system. A good standard to adopt in this case would be Hypertext Application Language, or HAL,6 which tries to create a standard for both XML and JSON when representing resources with those languages.A Few Notes on HALHAL tries to define a representation as having two major elements: resources and links.According to HAL, a resource has links, embedded resources (other resources associated to their parent), and a state (the actual properties that describe the resource). On the other hand, links have a target (the URI),a relation, and some other optional properties to deal with deprecation, content negotiation, and so forth. below shows the preceding example represented using the HAL format:{    &quot;_embedded&quot;: [{        &quot;title&quot;: &quot;Harry Potter and the Half Blood prince&quot;,        &quot;description&quot;: &quot;......&quot;,        &quot;copies&quot;: 10,        &quot;_embedded&quot;: {            &quot;author&quot;: {                &quot;name&quot;: &quot;J.K.Rowling&quot;,                &quot;_links&quot;: {                    &quot;self&quot;: {                        &quot;href&quot;: &quot;/authors/j-k-rowling&quot;,                        &quot;type&quot;: &quot;application/json+hal&quot;                    },                    &quot;books&quot;: {                        &quot;href&quot;: &quot;/authors/j-k-rowling/books&quot;,                        &quot;type&quot;: &quot;application/json+hal&quot;                    }                }            }        }    }, {        &quot;title&quot;: &quot;Dune&quot;,        &quot;description&quot;: &quot;......&quot;,        &quot;copies&quot;: 5,        &quot;_embedded&quot;: {            &quot;author&quot;: {                &quot;name&quot;: &quot;Frank Herbert&quot;,                &quot;_links&quot;: {                    &quot;self&quot;: {                        &quot;href&quot;: &quot;/authors/frank-herbert&quot;,                        &quot;type&quot;: &quot;application/json+hal&quot;                    },                    &quot;books&quot;: {                        &quot;href&quot;: &quot;/authors/frank-herbert/books&quot;,                        &quot;type&quot;: &quot;application/json+hal&quot;                    }                }            }        }    }],    &quot;total&quot;: 100,    &quot;_links&quot;: {        &quot;self&quot;: {            &quot;href&quot;: &quot;/books&quot;,            &quot;type&quot;: &quot;application/json+hal&quot;        },        &quot;next&quot;: {            &quot;href&quot;: &quot;/books?page=1&quot;,            &quot;type&quot;: &quot;application/json+hal&quot;        }    }}The main change in above is that the actual books have been moved inside an element called “_embedded”, as the standard dictates, since they’re actual embedded documents inside the represented resource, which is the list of books (the only property that belongs to the resource is “total”, representing the total number of results). The same can be said for the authors, now inside the “_embedded” element of each book.Status CodesAnother interesting standard that REST can benefit from when based on HTTP is the usage of HTTP status codes.7 A status code is a number that summarizes the response associated to it. There are some common ones,like 404 for “Page not found,” or 200 for “OK,” or the 500 for “Internal server error”.A status code is helpful for clients to begin interpreting the response, but in most cases, it shouldn’t be a substitute for it. As the API owner, you can’t really transmit in the response what exactly caused a crash on your side by just replying with the number 500. There are some cases, though, when a number is enough, like 404; although a good response will always return information that should help the client solve the problem (with a 404, a link to the home page or the root URL are good places to start).These codes are grouped in five sets, based on their meaning:  1xx: Informational and only defined under HTTP 1.1.  2xx: The request went OK, here’s your content.  3xx: The resource was moved somehow to somewhere.  4xx: The source of the request did something wrong.  5xx: The server crashed due to some error on its code.            Status Code      Meaning                  200      OK. The request went fine and the content requested was returned. This is normally used on GET requests.              201      Created. The resource was created and the server has acknowledged it. It could be useful on responses to POST or PUT requests. Additionally, the new resource could be returned as part of the response body.              204      No content. The action was successful but there is no content returned. Useful for actions that do not require a response body, such as a DELETE action.              301      Moved permanently. This resource was moved to another location and the location is returned. This header is especially useful when URLs change over time (maybe due to a change on version, a migration, or some other disruptive change), keeping the old ones and returning a redirection to the new location allows old clients to update their references in their own time.              400      Bad request. The request issued has problems (might be lacking some required parameters, for example). A good addition to a 400 response might be an error message that a developer can use to fix the request.              401      Unauthorized. Especially useful for authentication when the requested resource is not accessible to the user owning the request.              403      Forbidden. The resource is not accessible, but unlike 401, authentication will not affect the response.              404      Not found. The URL provided does not identify any resource. A good addition to this response could be a set of valid URLs that the client can use to get back on track (root URL, previous URL used, etc.).              405      Method not allowed. The HTTP verb used on a resource is not allowed. For instance doing a PUT on a resource that is read-only.              500      Internal server error. A generic error code when an unexpected condition is met and the server crashes. Normally, this response is accompanied by an error message explaining what went wrong.      To see the full list of HTTP status codes and their meaning, please refer to the RFC of HTTP 1.1REST vs. the PastBefore REST was all cool and hip, and every business out there wanted to provide their clients with a RESTful API in their service, there were other options for developers who wanted to interconnect systems. These are still being used on old services or by services that required their specific features, but less and less so every year.Back in the 1990s, the software industry started to think about system interoperability and how two (or more) computers could achieve it. Some solutions were born, such as COM,9 created by Microsoft, and CORBA,10 created by the Object Management Group. These were the first two implementations back then, but they had a major issue: they were not compatible with each other.Other solutions arose, like RMI, but it was meant specifically for Java, which meant it was technology dependent, and hadn’t really caught up with the development community.By 1997, Microsoft decided to research solutions that would use XML as the main transport language and would allow systems to interconnect using RPC (Remote Procedure Call) over HTTP, thus achieving a somewhat technology-independent solution that would considerably simplify system interconnectivity. That research gave birth to XML-RPC around 1998.It is quite clear that the messages (both requests and responses) were overly verbose, something that was directly related to the use of XML. There are implementations of XML-RPC that exist today for several operating systems and programming languages, like Apache XML-RPC12 (written in Java), XMLRPC-EPI13 (written in C), and XML-RPC-C14 for C and C++.After XML-RPC became more popular, it mutated into SOAP,15 a more standardized and formalized version of the same principle. SOAP still uses XML as the transport language, but the message format is now richer (and therefore complex). SOAP services are actually dependent on another technology called Web Service Description Language (WSDL). An XML-based language, it describes the services provided to clients that want to consume them.The main drawback of these types of services was the amount of information used, both to describe them and to use them. Even though XML provided the much-required technology agnostic means of encoding data to be transmitted between two systems, it also blotted the message sent quite noticeably.Both of these technologies (XML-RPC and SOAP + WSDL) provided the solution to system interconnectivity at a time when it was required. They provided a way to transmit messages using a “universal” language between all systems, but they also had several major issues compared to today’s leading standard. This can be clearly seen, for example, in the way developers feel about using XML instead of JSON.            XML-RCP / SOAP      REST                  Specific SOAP clients had to be created for each programming language. Even though XML was universal, a new client would have to be coded to parse the WSDL to understand how the service worked.      REST is completely technology agnostic and doesn’t require special clients, only a programming language capable of connectivity through the chosen protocol (e.g., HTTP, FTP, etc.).              The client needs to know everything about the service before initiating the interaction (thus the WSDL mentioned earlier).      The client only needs to know the main root endpoint, and with the hypermedia provided on the response, self-discovery is possible.              Because the service was used from within the client source code and called a specific function or method from within the server’s code, the coupling between those two systems was too big. A rewrite of the server code would probably lead to a rewrite on the client’s code.      The interface is implementation independent; the complete server-side code can be rewritten and the API’s interface will not have to be changed.      Comparing XML-RPC/SOAP with REST might not be entirely fair (or possible) due to the fact that the first two are protocols, whereas the latter is an architectural style; but some points can still be compared if you keep that distinction in mind.SummaryThis chapter was a small overview of what REST is meant to be and what kind of benefits a system will gain by following the REST style. The chapter also covered a few extra principles, like HTTP verbs and status codes, which although are not part of the REST style, are indeed part of the HTTP standard, the protocol we’re basing this book on.Finally, The main technologies used prior to REST, and you saw how they compared to the current leading industry standard.",
      "url": " /2016/rest-resources/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2016-jekyll-directory-structure": {
      "title": "Jekyll Directory Structure",
      "content"	 : "Jekyll is, at its core, a text transformation engine.You give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files.Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. A static web site is the final product.A basic Jekyll site looks something like this:.├── _config.yml├── _drafts|   ├── begin-with-the-crazy-ideas.md|   └── on-simplicity-in-technology.md├── _includes|   ├── footer.html|   └── header.html├── _layouts|   ├── default.html|   └── post.html├── _posts|   ├── 2007-10-29-why-every-programmer-should-play-nethack.md|   └── 2009-04-26-barcamp-boston-4-roundup.md├── _data|   └── members.yml├── _site├── .jekyll-metadata└── index.htmlAn overview of what each of these does:            FILE / DIRECTORY      DESCRIPTION                  _config.yml      Stores configuration data. Many of these options can be specified from the command line executable but it’s easier to specify them here so you don’t have to remember them.              _drafts      Drafts are unpublished posts. The format of these files is without a date: title.MARKUP.              _includes      These are the partials that can be mixed and matched by your layouts and posts to facilitate reuse.              _layouts      These are the templates that wrap posts. Layouts are chosen on a post-by-post basis in the YAML Front Matter              _posts      Your dynamic content, so to speak. The naming convention of these files is important, and must follow the format: YEAR-MONTH-DAY-title.MARKUP. The permalinks can be customized for each post, but the date and markup language are determined solely by the file name.              _data      Well-formatted site data should be placed here. The Jekyll engine will autoload all YAML files in this directory (using either the .yml, .yaml, .json or  .csv formats and extensions) and they will be accessible via site.data. If there’s a file members.yml under the directory, then you can access contents of the file through site.data.members.              _site      This is where the generated site will be placed (by default) once Jekyll is done transforming it. It’s probably a good idea to add this to your .gitignore file.              .jekyll-metadata      This helps Jekyll keep track of which files have not been modified since the site was last built, and which files will need to be regenerated on the next build. This file will not be included in the generated site. It’s probably a good idea to add this to your .gitignore file.              index.html and other HTML, Markdown, Textile files      Provided that the file has a YAML Front Matter section, it will be transformed by Jekyll. The same will happen for any .html, .markdown,  .md, or .textile file in your site’s root directory or directories not listed above.              Other Files/Folders      Every other directory and file except for those listed above—such as  css and images folders,  favicon.ico files, and so forth—will be copied verbatim to the generated site.      ",
      "url": " /2016/jekyll-directory-structure/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-basic-usage": {
      "title": "Jekyll Basic Usage",
      "content"	 : "The Jekyll gem makes a jekyll executable available to you in your Terminal window. You can use this command in a number of ways:$ jekyll build# =&amp;gt; The current folder will be generated into ./_site$ jekyll build --destination &amp;lt;destination&amp;gt;# =&amp;gt; The current folder will be generated into &amp;lt;destination&amp;gt;$ jekyll build --source &amp;lt;source&amp;gt; --destination &amp;lt;destination&amp;gt;# =&amp;gt; The &amp;lt;source&amp;gt; folder will be generated into &amp;lt;destination&amp;gt;$ jekyll build --watch# =&amp;gt; The current folder will be generated into ./_site,#    watched for changes, and regenerated automatically.The _config.yml master configuration file contains global configurations and variable definitions that are read once at execution time. Changes made to _config.yml during automatic regeneration are not loaded until the next execution.Note Data Files are included and reloaded during automatic regeneration.**The contents of  are automatically cleaned, by default, when the site is built. Files or folders that are not created by your site will be removed. Files and folders you wish to retain in  may be specified within the  configuration directive.Do not use an important location for ; instead, use it as a staging area and copy files from there to your web server.**Jekyll also comes with a built-in development server that will allow you to preview what the generated site will look like in your browser locally.$ jekyll serve# =&amp;gt; A development server will run at http://localhost:4000/# Auto-regeneration: enabled. Use `--no-watch` to disable.$ jekyll serve --detach# =&amp;gt; Same as `jekyll serve` but will detach from the current terminal.#    If you need to kill the server, you can `kill -9 1234` where &quot;1234&quot; is the PID.#    If you cannot find the PID, then do, `ps aux | grep jekyll` and kill the instance. [Read more](http://unixhelp.ed.ac.uk/shell/jobz5.html).As of version 2.4, the serve command will watch for changes automatically. To disable this, you can use jekyll serve –no-watch, which preserves the old behavior.$ jekyll serve --no-watch# =&amp;gt; Same as `jekyll serve` but will not watch for changes.These are just a few of the available configuration options. Many configuration options can either be specified as flags on the command line, or alternatively (and more commonly) they can be specified in a _config.yml file at the root of the source directory. Jekyll will automatically use the options from this file when run. For example, if you place the following lines in your _config.yml file:source:      _sourcedestination: _deployThen the following two commands will be equivalent:$ jekyll build$ jekyll build --source _source --destination _deployFor more about the possible configuration options, see the configuration page.If you’re interested in browsing these docs on-the-go, install the jekyll-docs gem and run jekyll docs in your terminal.",
      "url": " /2016/jekyll-basic-usage/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-code-snippet-highlighting": {
      "title": "Jekyll Code snippet highlighting",
      "content"	 : "Jekyll has built in support for syntax highlighting of over 60 languages thanks to Rouge. Rouge is the default highlighter in Jekyll 3 and above. To use it in Jekyll 2, set highlighter to rouge and ensure the rouge gem is installed properly.Alternatively, you can use Pygments to highlight your code snippets. To use Pygments, you must have Python installed on your system, have the pygments.rb gem installed and set highlighter to pygments in your site’s configuration file.To render a code block with syntax highlighting, surround your code as follows:{% highlight ruby %}def foo  puts &#39;foo&#39;end{% endhighlight %}The argument to the highlight tag (ruby in the example above) is the language identifier. To find the appropriate identifier to use for the language you want to highlight, look for the “short name” on the Rouge wiki or the Pygments’ Lexers page.Line numbersThere is a second argument to highlight called linenos that is optional. Including the linenos argument will force the highlighted code to include line numbers.{% highlight ruby linenos%}def foo  puts &#39;foo&#39;end{% endhighlight %}Stylesheets for syntax highlightingIn order for the highlighting to show up, you’ll need to include a highlighting stylesheet. For an example stylesheet you can look at syntax.css. These are the same styles as used by GitHub and you are free to use them for your own site. If you use linenos, you might want to include an additional CSS class definition for the .lineno class in syntax.css to distinguish the line numbers from the highlighted code.",
      "url": " /2016/jekyll-code-snippet-highlighting/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-installation": {
      "title": "Jekyll Installation",
      "content"	 : "When installing Jekyll there are a few requirements you’ll need to make sure your system has before you start.  Ruby (including development headers, v1.9.3 or above for Jekyll 2 and v2 or above for Jekyll 3)  RubyGems  Linux, Unix, or Mac OS X  NodeJS, or another JavaScript runtime (Jekyll 2 and earlier, for CoffeeScript support).  Python 2.7 (for Jekyll 2 and earlier)Install with RubyGemsThe best way to install Jekyll is via RubyGems. At the terminal prompt, simply run the following command to install Jekyll:$ gem install jekyllIf you are using OS X you need to have Xcode installed.Optional ExtrasThere are a number of extra features that Jekyll supports that you may want to install, depending on how you plan to use Jekyll. These extras include LaTeX support, and the use of alternative content rendering engines.Chances are you’ll want to enable syntax highlighting using Pygments or Rouge. How to do that.",
      "url": " /2016/jekyll-installation/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll-quick-start-guide": {
      "title": "Jekyll Quick Start Guide",
      "content"	 : "Here’s how to get a boilerplate Jekyll site up and runnin~ $ gem install jekyll bundler~ $ jekyll new myblog~ $ cd myblogbundle installbundle exec jekyll serveNow browse to http://localhost:4000If you wish to install jekyll into an existing directory, you can do so by running jekyll new . from within the directory instead of creating a new one. If the existing directory isn’t empty, you’ll also have to pass the –force option like so jekyll new . –force.",
      "url": " /2016/jekyll-quick-start-guide/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-jekyll": {
      "title": "Jekyll",
      "content"	 : "Jekyll is a simple, blog-aware, static site generator.It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website.Jekyll also happens to be the engine behind GitHub Pages, which means you can use Jekyll to host your project’s page, blog, or website from GitHub’s servers for free.",
      "url": " /2016/jekyll/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-rest-constraints": {
      "title": "REST Constraints",
      "content"	 : "There are two ways to define a system.One is to start from a blank slate, an empty whiteboard, with no initial knowledge of the system being built or the use of familiar components until the needs are satisfied.A second approach is to start with the full set of needs for the system, and constraints are added to individual components until the forces that influence the system are able to interact in harmony with each other.REST follows the second approach. In order to define a REST architecture, a null-state is initially defined. a system that has no constraints whatsoever and where component differentiation is nothing but a myth, and constraints are added one by one.Client-ServerThe first constraint to be added is one of the most common ones on network-based architectures: client - server. A server is in charge of handling a set of services, and it listens for requests regarding said services. The requests, in turn, are made via a connector by a client system needing one of those servicesThe main principle behind this constraint is the separation of concerns. It allows for the separation of front-end code from the server side code, which should take care of storage and server-side processing of the data.This constraint allows for the independent evolution of both components, offering a great deal of flexibility by letting client applications improve without affecting the server code and vice-versa.StatelessThe constraint to be added on top of the previous one is the stateless constraint. Communication between client and server must be stateless, meaning that each request done from the client must have all the information required for the server to understand it, without taking advantage of any stored data.This constraint represents several improvements for the underlying architecture:      Visibility: Monitoring the system becomes easy when all the information required is inside the request.        Scalability: By not having to store data between requests, the server can free resources faster.        Reliability: A system that is stateless can recover from a failure much easier than one that isn’t, since the only thing to recover is the application itself.        Easier implementation: Writing code that doesn’t have to manage stored state data across multiple servers is much easier to do, thus the full server-side system becomes simpler.  This constrains are a trade-off. On one hand, benefits are gained by the system, but on the other side, network traffic could potentially be harmed by adding a minor overhead on every request from sending repeated state information.CacheableThe cacheable constraint is added to the current set of constraints. It proposes that every response to a request must be explicitly or implicitly set as cacheable, when applicable.By caching the responses, there are some obvious benefits that get added to the architecture.On the server side, some interactions are completely bypassed while the content is cached. On the client side, an apparent improvement of performance is perceived. The trade-off with this constraint is the possibility of cached data being stale, due to poor caching rules. This constraint is, again, dependent on the type of system being implemented.Uniform InterfaceOne of REST’s main characteristics and winning points when compared to other alternatives is the uniform interface constraint.By keeping a uniform interface between components, you simplify the job of the client when it comes to interacting with your system.Another major winning point here is that the client’s implementation is independent of yours, so by defining a standard and uniform interface for all of your services, you effectively simplified the implementation of independent clients by giving them a clear set of rules to follow.Said rules are not part of the REST style, but there are constraints that can be used to create such rules for each individual case.This benefit doesn’t come without a price, though; as with many other constraints, there is a trade-off here.Having a standardized and uniform interface for all interactions with your system might harm performance when a more optimized form of communication exists. Particularly, the REST style is designed to be optimized for the Web, so the more you move away from that, the more inefficient the interface can be.Note In order to achieve the uniform interface, a new set of constraints must be added to the interface: identification of resources, manipulation of resources through representation, self-descriptive messages, and hypermedia as the engine of application state (a.k.a HATEOAS).REST Layered SystemREST was designed with the Internet in mind, which means that an architecture that follows REST is expected to work properly with the massive amount of traffic that exists in the web of webs.In order to achieve this, the concept of layers is introduced. By separating components into layers, and allowing each layer to only use the one below and to communicate its output to the one above, you simplify the system’s overall complexity and keep component coupling in check.The main disadvantage of this constraint is that for small systems, it might add unwanted latency into the overall data flow, due to the different interactions between layers.Code-on-DemandCode-on-demand is the only optional constraint imposed by REST, which means that an architect using REST can choose whether or not to use this constraint, and either gains its advantages or suffers its disadvantages.With this constraint, the client can download and execute code provided by the server (such as Java applets, JavaScript scripts, etc.). In the case of REST APIs, this constraint seems unnecessary, because the normal thing for an API client to do is just get information from an endpoint, and then process it however needed, but for other uses of REST, like web servers, a client(i.e., a browser) will probably benefit from this constraint.All of these constraints provide a set of virtual walls within which an architecture can move and still gain the benefits of the REST design style.",
      "url": " /2016/rest-constraints/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2016-rest-architectural-style": {
      "title": "REST Architectural Style",
      "content"	 : "Just because you can interact with a system using HTTP, and send JSON back and forth, doesn’t mean it’s a RESTful system. REST is a lot more than that.REST is protocol independent, but for the sake of this article and since we’re focusing on API design, let’s assume that the protocol we’re using is HTTP, which will simplify explanations and examples.The term REST, is an architectural style for distributed hypermedia systems. Put simply, REST (short for Representational State Transfer) is an architectural style defined to help create and organize distributed systems. An important aspect of REST is that it is an architectural style—not a guideline, not a standard, or anything that would imply that there are a set of hard rules to follow in order to end up having a RESTful architecture.It, it’s subject to misinterpretations from the people reading about it. Not only that, but some go as far as to leave parts out, and implement a subset of its features.The main idea behind REST is that a distributed system, organized RESTfully, will improve in the following areas:      Performance: The communication style proposed by REST is meant to be efficient and simple, allowing a performance boost on systems that adopt it.        Scalability of component interaction: Any distributed system should be able to handle this aspect well enough, and the simple interaction proposed by REST greatly allows for this.        Simplicity of interface: A simple interface allows for simpler interactions between systems, which in turn can grant benefits like the ones previously mentioned.        Modifiability of components: The distributed nature of the system, and the separation of concerns proposed by REST allows for components to be modified independently of each other at a minimum cost and risk.        Portability: REST is technology and language agnostic, meaning that it can be implemented and consumed by any type of technology.        Reliability: The stateless constraint proposed by REST allows for the easier recovery of a system after failure.        Visibility: The stateless constraint proposed has the added benefit of improving visibility, because any monitoring system doesn’t need to look further than a single request message to determine the full state of said request.  A component-centric design allows you to make systems that are very fault tolerant. Having the failure of one component not affect the entire stability of the system is a great benefit for any system. Interconnecting components is quite easy, minimizing the risks when adding new features or scaling up or down.A system designed with REST in mind will be accessible to a wider audience, thanks to its portability. With a generic interface, the system can be used by a wider range of developers.In order to achieve these properties and benefits, a set of constraints were added to REST to help define a uniform connector interface.",
      "url": " /2016/rest-architectural-style/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2016-basic-color-theory": {
      "title": "Basic Color Theory",
      "content"	 : "There are three basic categories of color theory that are logical and useful :  The color wheel  Color harmony  The context of how colors are used.The Color WheelA color circle, based on red, yellow and blue, is traditional in the field of art. Sir Isaac Newton developed the first circular diagram of colors in 1666. Since then, scientists and artists have studied and designed numerous variations of this concept.There are also definitions (or categories) of colors based on the color wheel. We begin with a 3-part color wheel.      Primary Colors: Red, yellow and blueIn traditional color theory (used in paint and pigments), primary colors are the 3 pigment colors that can not be mixed or formed by any combination of other colors. All other colors are derived from these 3 hues.        Secondary Colors: Green, orange and purpleThese are the colors formed by mixing the primary colors.        Tertiary Colors: Yellow-orange, red-orange, red-purple, blue-purple, blue-green &amp;amp; yellow-greenThese are the colors formed by mixing a primary and a secondary color. That’s why the hue is a two word name, such as blue-green, red-violet, and yellow-orange.  ",
      "url": " /2016/Basic-Color-Theory/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2016-add-mailchimp-to-your-site": {
      "title": "Add Mailchimp to your site",
      "content"	 : "  Create an account  Click “Create A List” and fill out form  Click “Signup Forms” and select “General Form”  Add the url Mailchimp provides you to your site&amp;lt;a href=&quot;/urlFromMailchimp&quot;&amp;gt;",
      "url": " /2016/Add-Mailchimp-to-your-site/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2016-github-pages-custom-domain": {
      "title": "Github Pages - Custom Domain",
      "content"	 : "  Register a domain name  Go to you DNS settings  Create two A records and two CNAME (www) records that points to192.30.252.153 &amp;amp; 192.30.252.154  Create a file named “CNAME” -&amp;gt; enter you domain name -&amp;gt; save the file",
      "url": " /2016/Github-pages-Custom-domain/",
      "author": "",
      "categories": "Development, Jekyll"
    }
    ,
  

    "2016-font-awesome": {
      "title": "Font Awesome",
      "content"	 : "Font Awesome provides a standard set of web and brand icons free for personal and commercial use.These icons make it easy to illustrate something quickly with almost no effort.You can find the project at Font AwesumeAdd Font Awesome to your site:  Go to Fone Awesome get started  Enter your email and go to your email client  Open the new mail and click “Register my Font Awesome CDN account”  Copy the that embeded code and past in the head section of your siteAdd an icon to your site  Check for an icon to use at the cheat sheet  add a font awesome class to an &amp;lt;i&amp;gt; tags “class” attribute&amp;lt;i class=fa-ambulance&amp;gt;&amp;lt;/i&amp;gt;",
      "url": " /2016/Font-Awesome/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2016-content-editor-for-github": {
      "title": "Content Editor for GitHub",
      "content"	 : "Prose is a content editor for GitHub, designed to be used with Jekyll. It provide you with an interface for CRUD operations.  Go to: http://Prose.io  Authenticate on Github  Go to _post directory  Do some CRUD operation",
      "url": " /2016/Content-Editor-for-GitHub/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-step-by-step-first-jekyll-site": {
      "title": "Github page and Jekyll",
      "content"	 : "  Create a new account at github  Create a new repository named username.github.io  Click the “Set up in Desktop” button  Open Github Desktop  Go to preferences and log in to your new account  Click the plus sign to access the repository that we created earlier  Clone it to where you want your local version to reside  Add all file from kaktus theme  Add a commit message -&amp;gt; click “Commit to master” -&amp;gt; “Publish”Your new site is now available on username.github.io",
      "url": " /2016/Step-by-step-First-Jekyll-site/",
      "author": "",
      "categories": "Jekyll"
    }
    ,
  

    "2016-planning-a-new-project": {
      "title": "Planning a new project",
      "content"	 : "Planning is crucial in the early stages of starting a new project. Even though a good plan can’t account forthe unexpected, it can provide us with broad milestones. We have to turn those milestones into concreteobjectives that can followed throughout the project.If obstacles arise while executing the objectives, we simply have to revisit the milestones and rethink theobjectives in line with what we learned from the ones that didn’t work. This iterative process is known bymany names, but Kant Beck provided us with a complete framework called Extreme Programming (XP). Startingprojects with a simple design that constantly evolves to add needed flexibility and remove complexity.There are two questions to keep in mind during the initial planning phases of a project:  What is the scope of this web site? The scope spans a multitude of factors, suchas the purpose of the project, the intended audience, and how that audience willinteract with the web site. Finally, the scope extends beyond the project to thedeveloper as well. How much time will a developer dedicate to maintaining andupdating the project instead of new content.  What is the scale of this web site? The scale convers the resources required tointegrating new technologies with the web site in the future, reaching out to andserving a large enough audience. This might involve techniques such as creatingmailing lists, which we talk about later in this chapter.These two questions are broadly applicable to personal projects that you would like to show off, ablog that you started to write, and even professional web sites for organizations.To begin answering, we first need a concise description of our web site. You should layout a shortbut comprehensive description of what the project will be about.Once we have the description of what the project will be abut, we can start thinking about thefinished product that will deliver the goals outlined in the description. To make this simpler,the best solution is to find other projects that have a description similar to our so that wecan draw inspiration from them. An alternative method is to prototype your idea from scratch.However, if we can find another app that already does most of what we want, prototyping becomesmuch easier.Examining an already existing app, we have a few ideas about how our product should look orfunction. To get a realistic idea of what that finished product might look like, we need toadvance our understanding of the project and how we approach it. Creating a simple prototypeis a great way to start modeling behavior that our web site will exhibit.example prototypeOnce we have this base model of the prototype, it is easier to start adding components to itand making more modifications. We can think of the app that we are looking at for inspirationas a collection of features, and then decide which ones we want to implement in our product.The scale of a new project is often small, you want to learn as much as you can about youraudience and how they interact with the web site. Scaling is all about testing and improvingon the features that your audience uses. This is not something we can prototype easily.The scope and scale are part of a larger thought process that result in the creation of aproject specification. We create a complete specification in another article.After creating the prototype, the last step before we start writing code is to make a list oftechnologies that we are going to use. You can think ahead in terms of concrete snippets orincludes files that you could use.",
      "url": " /2016/Planning-a-new-project/",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "2016-javascript-case-sensivity": {
      "title": "JavaScript - Case Sensitivity",
      "content"	 : "JavaScript is a case-sensitive language, this means that language keywords, variables, function names, and other identifiers must be typed with a constant capitalization.Note: HTML is not case-sensitive and may cause some confusion.",
      "url": " /2016/JavaScript-Case-Sensivity/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-javascript-charset": {
      "title": "JavaScript - Charset",
      "content"	 : "JS programs are written using the Unicode charset.Unicode is a superset of ASCII and Latin1.ECMAScript3 requires version 2.1 or later.ECMAScript5 requires version 3 or later.",
      "url": " /2016/JavaScript-Charset/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-javascript-client-side": {
      "title": "JavaScript - Client Side",
      "content"	 : "This article shows you how to embed JS in an HTML document and goes through some other client-side JS examples.&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;script src=&quot;library.js&quot;&amp;gt; &amp;lt;!-- Include a library of JS code --&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;This is a paragraph of HTML markup&amp;lt;/p&amp;gt;&amp;lt;script&amp;gt;// and this is some client-side JS code// litteraly embedded within the HTML document&amp;lt;/script&amp;gt;&amp;lt;p&amp;gt;More HTML markup&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;lt;!-- The window object, is a techique for scripting the web browser --&amp;gt;&amp;lt;script&amp;gt;function monveon() {// Display a modal dialog box to ask the user a questionvar answer = confirm(&quot;Ready to move on?&quot;);// If answer &quot;OK&quot;, make browser load new pageif(aswer) window.location = &quot;http://google.com&quot;;};// Run the functino defined 1 minute (60,000 millliseconds) from now.setTimeout(moveon,60000);&amp;lt;/script&amp;gt;&amp;lt;!-- This function demonstrate a number of basic document searching and mod techniques --&amp;gt;&amp;lt;script&amp;gt;// Display a message in a special debugging output section of the document.// if the document does not contain such a section. create one.function debug(msg) {// Find the debugging section of the document, looking at HTML id attributevar log = document.getElementById(&quot;debuglog&quot;);// If no element with the id exist, create one.if (!log) {log = document.createElement(&quot;div&quot;);// Crete a new &amp;lt;div&amp;gt; elementlog.id = &quot;debuglog&quot;;// Set the HTML attribute on itlog.innerHTML = &quot;&amp;lt;h1&amp;gt;Debug Log&amp;lt;/h1&amp;gt;&quot;;// Define initial contentdocument.boby.appendChild(log);// Add it at the end}// Wrap the message in its own &amp;lt;pre&amp;gt; and append it to the log.var pre = document.createElement(&quot;pre&quot;);// Create a &amp;lt;pre&amp;gt; tagvar text = document.createTextNode(msg);// Wrap msg in a text nodepre.appendChild(text);// Add text to the &amp;lt;pre&amp;gt;log.appendChild(pre);// Add &amp;lt;pre&amp;gt; to the log}&amp;lt;/script&amp;gt;&amp;lt;!-- How to use JS woth CSS style that define the presentation --&amp;gt;&amp;lt;script&amp;gt;function hide(e, reflow) {// Hide the element eif(reflow) {// If 2nd argument is truee.style.display = &quot;none&quot;;// hide element and use its space}else {// Otherwisee.style.display = &quot;hidden&quot;;// make invisible, but leave its space}}function highlight(e) {// Highlight e by setting a CSS class// Simply define or append to the HTML class attribute.// This assumes that a CSS stylesheet already defines the &quot;hilite&quot; class.if (!e.className) e.className = &quot;hilite&quot;;else e.className += &quot; hilite&quot;;}&amp;lt;/scritpt&amp;gt;&amp;lt;!-- To define behavior with JS, we register events --&amp;gt;&amp;lt;script src=&quot;debug.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script src=&quot;hide.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;button onclick=&quot;hide(this,true); debug(&#39;hide button 1&#39;);&quot;&amp;gt;Hide1&amp;lt;/button&amp;gt;&amp;lt;button onclick=&quot;hide(this); debug(&#39;hide butto 2&#39;);&quot;&amp;gt;Hide 2&amp;lt;/button&amp;gt;}&amp;lt;!-- Some more client-side JS that uses events --&amp;gt;&amp;lt;script&amp;gt;// The load event occurs when a document is fully loaded. Usually we need to wait for this event// before we start runnung our JS codewindow.onload = Function() {// Run this function after the document loads// Find all &amp;lt;img&amp;gt; tags in the documentvar images = document.getElementsByTagName(&quot;img&quot;);// Loop through them, adding an event handler for click events to each so that clicking on// images hides itfor(var i=0; i &amp;lt; image.length; i++) {var image = images[i];if(image.addEventListener)// another way of register a handlerimage.addEventListener(&quot;click&quot;,hide,false);else// For compatability with IE 8 and beforeimage.attachEvent(&quot;onclick&quot;,hide);}// This is the event handler function registered abovefunction hide(event) {// srcElement needed for IE8, target for Chrome and Firefoxvar target = event.target ? event.target : event.srcElement;target.style.visibility = &quot;hidden&quot;;}};&amp;lt;!-- Example the use of JQuary library --&amp;gt;&amp;lt;script&amp;gt;function debug(msg) {var log = $(&quot;#debug&quot;);// Find the element to display msg inif(log.length == 0) {// If it doesn&#39;t exist yetm create it...log == $(&quot;&amp;lt;div id=&#39;debuglog&#39;&amp;gt;&amp;lt;h1&amp;gt;Debug Log&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&quot;);log.appendTo(document.body);// and insert it at the end of the body}log.append($(&quot;&amp;lt;pre/&amp;gt;&quot;).text(msg));// Wrap msg in &amp;lt;pre&amp;gt; and append to log.}&amp;lt;/script&amp;gt;}",
      "url": " /2016/JavaScript-Client-Side/",
      "author": "",
      "categories": "JavaScript"
    }
    ,
  

    "2016-javascript-core": {
      "title": "JavaScript - Overview ",
      "content"	 : "JavaScript is an object-oriented dynamic language with types and operators, standard built-in objects, and methods.Its syntax is based on the Java and C languages — so many structures from those languages apply to JavaScript as well.One of the key differences is that JavaScript does not have classes; instead, the class functionality is accomplished by object prototypes (see more about ES6 Classes).The other main difference is that functions are objects, giving functions the capacity to hold executable code and be passed around like any other object.// Anyting following double slashes is an English-Language comment.// Read Comments carfully: they explain tghe JS code.// A variable is a symbolic name for a value.// Variables are declared with the var keyword:var x;// Declare a variable named x.// Values can be assigned to variables with an = sign.x = 0;// Now the variable x has the value 0.x// =&amp;gt; 0: A variable evaluates to its value.// JS supports several types of values.x = 1;// Numbers.x = 0.1;// Just one Number for integers and reals.x = &quot;Hello World&quot;;// Strings of text in quotation marks.x = &#39;JavaScript&#39;;// Single quote marks also delimit strings.x = trye;// Boolean value.x = false;// the other Boolean value.x = null;// Null is a special value means &quot;no value&quot;.x = undefined;// Undefined is like null./* * Two inportant types that JS programs manipulate are objects and arrays. */// JS&#39;s most importat data type is object. An object is an collection of name/value// pair, or a string value map.var book = {// objects are enclosed in curley braces.topic: &quot;JavaScript&quot;,// The property &quot;topic&quot; has the value &quot;JavaScript&quot;.fat: true// The propery &quot;true&quot; has the value true.};// The brace marks the end of the object.// Access the property of an object with . or []:book.topic// =&amp;gt; &quot;JavaScript&quot;book[&quot;fat&quot;]// =&amp;gt; true: another way to access property values.book.author = &quot;Flanagan&quot;;// Create a new property by assignment.book.contents = {};// {} is an empty object with no properties.// JS also supports arrays (numrically indexed lists) of values:var primes = [2, 3, 5, 7];// An array of 4 values, delimited with [ and ].primes[0]// =&amp;gt; 2: The first element (index 0) of the array.primes.length// =&amp;gt; 4: how many elements in the array.primes[primes.length-1]// =&amp;gt; 7: the last element of the arrayprimes[4] = 9;// add a new element by assignment.primes[4] = 11;// Or alter an existing element by assignment.var empty = [];// [] is an empty array with no elements.empry.length// =&amp;gt; 0// Arrays and objects can hold other arrays and objects:var point = [// An array with 2 elements.{x:0, y:0},// Each element is an object.{x:1, y:1}];var data = {// An object with 2 properties.trail1: [[1,2], [3,4]],// The value of each property is an arraytrail2: [[2,3], [4,5]]// The elements of the arrays is arrays.};/* The syntax above listing array elements within square braces or mapping object * property names to property values inside curly braces is known as an initializer * expression, and it is just one of the topics in chapter 4, Expressions and Operators. * An expression is a phrase of JS that can be evaluated to produce a value. * The use of . and [] tp refer to the value of an object property or array element is an expression. * =&amp;gt; shows that is is an valuation of an expression. * * One of the nost common ways to form expressions in JS is to use operators like these: */// Oerators act on values (the operands) to produce a new value.// Aritmetic operators are the nost common:3 + 2 // =&amp;gt; 5: addition3 - 2// =&amp;gt; 1: subtraction3 / 2// =&amp;gt; 1.5: divisionpoint[1].x - point[0].x// =&amp;gt; 1: more complicated operands also work.&quot;3&quot; + &quot;2&quot;// =&amp;gt;&quot;32&quot;: adds numbers, concatinates strings// JS defines some shorthand aritmetic operatorsvar count = 0;// Defines a variablecount++;// Increment the variablecount--;// Decrement the variablecount += 2;// Add 2: same as count = count + 2;count *= 3;// Multiply by 3: same as count = count * 3;count // =&amp;gt; 6: variable names are expressions, too.// Equality and relational operators test whether two values are equal,// unequal, less than, greater than, and so on. They evaluates to true or false.var x = 2, y = 3;// These = signs are assignemnt, not equality tests.x == y// =&amp;gt; false: equalityx != y// =&amp;gt; true: inequalityx &amp;lt; y// =&amp;gt; true: less-thanx &amp;gt;= y// =&amp;gt; trye: less-than or equalx &amp;gt; y// =&amp;gt; false: greater-thanx &amp;gt;= Y// =&amp;gt; false: greater-than or equal&quot;two&quot; == &quot;three&quot;// =&amp;gt; false: the two strings are different&quot;two&quot; &amp;gt; &quot;three&quot;// =&amp;gt; true: &quot;tw&quot; is alphabetically greater than &quot;th&quot;false == (x &amp;gt; y)// =&amp;gt; true: false is equal to false// Loguical operators combine or invert boolan values(x == 2) &amp;amp;&amp;amp; (y == 3)// =&amp;gt; true: both the comparison are true. &amp;amp;&amp;amp; is AND(x &amp;gt; 3) || (y &amp;lt; 3)// =&amp;gt; false: neither comparison is true. || is OR!(x == y)// =&amp;gt; true: ! inverts a boolean value/* If the phrases of JS is expressions then the full sentences are statements. * In the code above, the lines that end with semicolons are statements. (in the * code below, you&#39;ll see multiline statements that do not end with semicolons.) * There is actually a lot of overlap between statements and expressions. Roughly, an * expression is something that computes a value but doesn&#39;t do anything: it doesn&#39;t * alter the code state in any way. Statements doesn&#39;t have a value (that we care about), * but thay do alter the state. The other broad category of statements is control structures, * such as conditionals and loops. Example below, after we cover functions. *//* A function is a named parameterized block of JS code that you define once, and can then * invoke over and over again. */// Functions are parameterized block of JS code that we can invoke.function plus1(x) {// Defines a function named plus1 with parameter x.return x + 1;// return a value one larger thatn the value passed in.};// Functions are enclosed in curly braces.plua1(y);// =&amp;gt; 4: y is 3, so this invocation returns 3 + 1.var square = funtion(x) {// Function are values, and can be assigned to varsreturn x * x;// Compute the function&#39;s value.};// Semicolon marks the end of the assignmentsquare(plus1(y))// =&amp;gt; 16: invoke two functions in one expression.// When functions are assigned to the property of an object, we call// them &quot;methods&quot;. All JS objects have methods:var a = [];// Create an empty arraya.push(1,2,3);// The push() method adds element to an array.a reverse();// Anpther method: revers the order of the elements.// We can define our own methods, too. The &quot;this&quot; keyword refers to the object.// on lwhich the method is defined: in this case, the points array from above.points.dist = function(){// Defines a method to compute distances between pointsvar p1 = this[0];// First element of the array we&#39;re invoked on.var p2 = this[1];// Second element of the &quot;this&quot; object.var a = p2.x - p1.x;// Difference in X cordinates.var b = p2.y - p1.y;// Difference in Y cordinates.return Math-sqrt(a*a +// The Pythagorean theoremb*b);// Math.sqrt() computes the square root.};points.dist();// =&amp;gt; 1.414: distance between our two points/* * Function whos bodies demonstrate common JS control structures statements: */// JS statements include conditiional and loops using the syntax of c, c++, and other languages:function abs(x) {// A function to compute the absolute value.if (x &amp;gt; 0) {// The if statement...return x;// executes this code if the comparison is true.}// end of the if clause.else {// executes if comparison is falsereturn -x;}// Curly braces is optional if only 1 statement per clause};// Note return statement nested inside if/elsefunction factorial(n) {// A function to compute factorialsvar product = 1;// Start with the product of 1while(n &amp;gt; 1) {// Repeat statements in {} while expr in () is trueproduct *= n;// Shortcut for n = n -1}// end of loopreturn product;// return the product.};factorial(4);// =&amp;gt; 24: 1*4*3*2function factorial2(n) {// Another version using a different loopvar i, product = 1;// Start with 1for(i=2, i &amp;lt; n, i++)// Automatically increment i fron 2 up to nproduct *=1// Do this each time. {} not needed for 1-line loopsreturn product;// return fratorial.}fractorial(5);// =&amp;gt; 120: 1*2*3*4*5/* * JS is an object-oriented language, but is quite different than most. * Here is a very simple example that demonstrates how to define a JS class to * represent 2D geometric points. Objects that instances of this class have a * single method named r() that computs the distane of the point from the origin */// Define a consturcor function to initialize a new Point object:function Point(x,y) {// By convention, constructors start with Capthis.x = x;// this keyword is the new object being initialized.this.y = y;// Store function arguments as object properties.};// No return is necessary.// Use an constructor functin with keyword &quot;new&quot; to create instancesvar p = Point(1,1);// The geometric point (1,1)// Define methods for Point objects by assigning them to the prototype// object associated with the constructor funtion.Point.prototype.r = function() {return Math.sqrt(  // Return the square root of x^2 + y^2this.x * this.x+ // This is the Point obhect on wich the method ...this.y * this.y  // ... is invoked);};// Now the Point object p (and all future Point objects) inherits the method r()p.r();// =&amp;gt; 1.414...",
      "url": " /2016/JavaScript-Core/",
      "author": "",
      "categories": "JavaScript"
    }
    
  
}
